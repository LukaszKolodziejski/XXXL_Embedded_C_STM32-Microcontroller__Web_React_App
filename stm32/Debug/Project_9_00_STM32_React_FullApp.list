
Project_9_00_STM32_React_FullApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008288  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008670  08008670  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001f4  0800886c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800886c  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019373  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000351d  00000000  00000000  00039597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001338  00000000  00000000  0003dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029390  00000000  00000000  0003f308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013558  00000000  00000000  00068698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb8cd  00000000  00000000  0007bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001774bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  00177538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008440 	.word	0x08008440

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	08008440 	.word	0x08008440

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b972 	b.w	8000e18 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	4688      	mov	r8, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14b      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	d967      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0720 	rsb	r7, r2, #32
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b72:	4095      	lsls	r5, r2
 8000b74:	ea47 0803 	orr.w	r8, r7, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b84:	fa1f fc85 	uxth.w	ip, r5
 8000b88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b90:	fb07 f10c 	mul.w	r1, r7, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9e:	f080 811b 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8118 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba8:	3f02      	subs	r7, #2
 8000baa:	442b      	add	r3, r5
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	192c      	adds	r4, r5, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bdc:	eba4 040c 	sub.w	r4, r4, ip
 8000be0:	2700      	movs	r7, #0
 8000be2:	b11e      	cbz	r6, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xbe>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80eb 	beq.w	8000dd2 <__udivmoddi4+0x286>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000c02:	4638      	mov	r0, r7
 8000c04:	4639      	mov	r1, r7
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f783 	clz	r7, r3
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d147      	bne.n	8000ca2 <__udivmoddi4+0x156>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd0>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80fa 	bhi.w	8000e10 <__udivmoddi4+0x2c4>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa0>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xe8>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 808f 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3e:	1b49      	subs	r1, r1, r5
 8000c40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c44:	fa1f f885 	uxth.w	r8, r5
 8000c48:	2701      	movs	r7, #1
 8000c4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb08 f10c 	mul.w	r1, r8, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x14c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x14a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80b6 	bhi.w	8000e02 <__udivmoddi4+0x2b6>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e79f      	b.n	8000be2 <__udivmoddi4+0x96>
 8000ca2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca6:	40bb      	lsls	r3, r7
 8000ca8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc0:	4325      	orrs	r5, r4
 8000cc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc6:	0c2c      	lsrs	r4, r5, #16
 8000cc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ccc:	fa1f fa8e 	uxth.w	sl, lr
 8000cd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	fa02 f207 	lsl.w	r2, r2, r7
 8000cde:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	f080 8087 	bcs.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	f240 8084 	bls.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4473      	add	r3, lr
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d10:	45a2      	cmp	sl, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1e 0404 	adds.w	r4, lr, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d26b      	bcs.n	8000df6 <__udivmoddi4+0x2aa>
 8000d1e:	45a2      	cmp	sl, r4
 8000d20:	d969      	bls.n	8000df6 <__udivmoddi4+0x2aa>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4474      	add	r4, lr
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	eba4 040a 	sub.w	r4, r4, sl
 8000d32:	454c      	cmp	r4, r9
 8000d34:	46c2      	mov	sl, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	d354      	bcc.n	8000de4 <__udivmoddi4+0x298>
 8000d3a:	d051      	beq.n	8000de0 <__udivmoddi4+0x294>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d069      	beq.n	8000e14 <__udivmoddi4+0x2c8>
 8000d40:	ebb1 050a 	subs.w	r5, r1, sl
 8000d44:	eb64 0403 	sbc.w	r4, r4, r3
 8000d48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d4c:	40fd      	lsrs	r5, r7
 8000d4e:	40fc      	lsrs	r4, r7
 8000d50:	ea4c 0505 	orr.w	r5, ip, r5
 8000d54:	e9c6 5400 	strd	r5, r4, [r6]
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e747      	b.n	8000bec <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f703 	lsr.w	r7, r0, r3
 8000d64:	4095      	lsls	r5, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0c01      	lsrs	r1, r0, #16
 8000d76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7a:	fa1f f885 	uxth.w	r8, r5
 8000d7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb07 f308 	mul.w	r3, r7, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x256>
 8000d92:	1869      	adds	r1, r5, r1
 8000d94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d98:	d22f      	bcs.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d92d      	bls.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9e:	3f02      	subs	r7, #2
 8000da0:	4429      	add	r1, r5
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	b281      	uxth	r1, r0
 8000da6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000daa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb00 f308 	mul.w	r3, r0, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x27e>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc0:	d217      	bcs.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d915      	bls.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd0:	e73b      	b.n	8000c4a <__udivmoddi4+0xfe>
 8000dd2:	4637      	mov	r7, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e709      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e6e7      	b.n	8000bac <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000de0:	4541      	cmp	r1, r8
 8000de2:	d2ab      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dec:	3801      	subs	r0, #1
 8000dee:	4613      	mov	r3, r2
 8000df0:	e7a4      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df2:	4660      	mov	r0, ip
 8000df4:	e7e9      	b.n	8000dca <__udivmoddi4+0x27e>
 8000df6:	4618      	mov	r0, r3
 8000df8:	e795      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfa:	4667      	mov	r7, ip
 8000dfc:	e7d1      	b.n	8000da2 <__udivmoddi4+0x256>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e77c      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	442c      	add	r4, r5
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0x14c>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	442b      	add	r3, r5
 8000e0e:	e72f      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e10:	4638      	mov	r0, r7
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xda>
 8000e14:	4637      	mov	r7, r6
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0xa0>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <BH1750_Init>:


#include "bh1750.h"


void BH1750_Init(BH1750_HandleTypeDef* bh1750){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]
	uint8_t command;

	command = BH1750_POWER_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(bh1750 -> I2C, bh1750 -> Address, &command, 1, bh1750 -> Timeout);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	b299      	uxth	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f107 020f 	add.w	r2, r7, #15
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f002 f87f 	bl	8002f40 <HAL_I2C_Master_Transmit>

	command = BH1750_CONTINOUS_H_RES_MODE;
 8000e42:	2310      	movs	r3, #16
 8000e44:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(bh1750 -> I2C, bh1750 -> Address, &command, 1, bh1750 -> Timeout);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f107 020f 	add.w	r2, r7, #15
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f002 f870 	bl	8002f40 <HAL_I2C_Master_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <BH1750_ReadLux>:


float BH1750_ReadLux(BH1750_HandleTypeDef* bh1750){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	6078      	str	r0, [r7, #4]
	float lux = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
	uint8_t data[2];


	HAL_I2C_Master_Receive(bh1750 -> I2C, bh1750 -> Address, data, 2, bh1750 -> Timeout);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f107 0208 	add.w	r2, r7, #8
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f002 f94c 	bl	8003128 <HAL_I2C_Master_Receive>
    lux = ((data[0] << 8) | data[1]) /1.2;
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	7a7a      	ldrb	r2, [r7, #9]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb73 	bl	8000584 <__aeabi_i2d>
 8000e9e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <BH1750_ReadLux+0x60>)
 8000ea4:	f7ff fd02 	bl	80008ac <__aeabi_ddiv>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	460c      	mov	r4, r1
 8000eac:	4618      	mov	r0, r3
 8000eae:	4621      	mov	r1, r4
 8000eb0:	f7ff fde4 	bl	8000a7c <__aeabi_d2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60fb      	str	r3, [r7, #12]

    return lux;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	ee07 3a90 	vmov	s15, r3
}
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	3ff33333 	.word	0x3ff33333

08000ecc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <MX_ETH_Init+0x7c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_ETH_Init+0x78>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	3302      	adds	r3, #2
 8000efa:	22e1      	movs	r2, #225	; 0xe1
 8000efc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	3303      	adds	r3, #3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	3305      	adds	r3, #5
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f2e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f32:	f001 f945 	bl	80021c0 <HAL_ETH_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000f3c:	f000 fc10 	bl	8001760 <Error_Handler>
  }

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000022c 	.word	0x2000022c
 8000f48:	40028000 	.word	0x40028000

08000f4c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	; (80010a4 <HAL_ETH_MspInit+0x158>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 8096 	bne.w	800109c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8001006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001018:	2332      	movs	r3, #50	; 0x32
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <HAL_ETH_MspInit+0x160>)
 8001034:	f001 fd30 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001038:	2386      	movs	r3, #134	; 0x86
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_ETH_MspInit+0x164>)
 8001054:	f001 fd20 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106a:	230b      	movs	r3, #11
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <HAL_ETH_MspInit+0x168>)
 8001076:	f001 fd0f 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800107a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <HAL_ETH_MspInit+0x16c>)
 8001098:	f001 fcfe 	bl	8002a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40028000 	.word	0x40028000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40021800 	.word	0x40021800

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MX_GPIO_Init+0x130>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a45      	ldr	r2, [pc, #276]	; (80011ec <MX_GPIO_Init+0x130>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <MX_GPIO_Init+0x130>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b40      	ldr	r3, [pc, #256]	; (80011ec <MX_GPIO_Init+0x130>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <MX_GPIO_Init+0x130>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_GPIO_Init+0x130>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_GPIO_Init+0x130>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a39      	ldr	r2, [pc, #228]	; (80011ec <MX_GPIO_Init+0x130>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_GPIO_Init+0x130>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_GPIO_Init+0x130>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <MX_GPIO_Init+0x130>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_GPIO_Init+0x130>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_GPIO_Init+0x130>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <MX_GPIO_Init+0x130>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_GPIO_Init+0x130>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_GPIO_Init+0x130>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <MX_GPIO_Init+0x130>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_GPIO_Init+0x130>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f244 0181 	movw	r1, #16513	; 0x4081
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MX_GPIO_Init+0x134>)
 800116a:	f001 fe3f 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2140      	movs	r1, #64	; 0x40
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <MX_GPIO_Init+0x138>)
 8001174:	f001 fe3a 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_GPIO_Init+0x13c>)
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <MX_GPIO_Init+0x140>)
 800118e:	f001 fc83 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001192:	f244 0381 	movw	r3, #16513	; 0x4081
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <MX_GPIO_Init+0x134>)
 80011ac:	f001 fc74 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011b0:	2340      	movs	r3, #64	; 0x40
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0x138>)
 80011c8:	f001 fc66 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_GPIO_Init+0x138>)
 80011e0:	f001 fc5a 	bl	8002a98 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	10110000 	.word	0x10110000
 80011fc:	40020800 	.word	0x40020800

08001200 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f001 fdf0 	bl	8002e20 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fa8b 	bl	8001760 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f002 fa41 	bl	80036d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fa82 	bl	8001760 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f002 fa83 	bl	800376a <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fa79 	bl	8001760 <Error_Handler>
  }

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000274 	.word	0x20000274
 8001278:	40005400 	.word	0x40005400
 800127c:	00808cd2 	.word	0x00808cd2

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_I2C_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d128      	bne.n	80012f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c0:	2312      	movs	r3, #18
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012cc:	2304      	movs	r3, #4
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <HAL_I2C_MspInit+0x84>)
 80012d8:	f001 fbde 	bl	8002a98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_UART_RxCpltCallback>:
// stale
float k = 1;

void transmit_IT_Json_Data(int percent, int lux );

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(huart-> Instance == USART3){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_UART_RxCpltCallback+0x168>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f040 80a5 	bne.w	8001466 <HAL_UART_RxCpltCallback+0x15e>
	  connected = 1;
 800131c:	4b55      	ldr	r3, [pc, #340]	; (8001474 <HAL_UART_RxCpltCallback+0x16c>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

	  int percent [1];
	  int lux [1];
	  char * pch;

	  pch = strtok (json_data," \":,{}");
 8001322:	4955      	ldr	r1, [pc, #340]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 8001324:	4855      	ldr	r0, [pc, #340]	; (800147c <HAL_UART_RxCpltCallback+0x174>)
 8001326:	f005 ff8f 	bl	8007248 <strtok>
 800132a:	6178      	str	r0, [r7, #20]

	   while (pch != NULL)
 800132c:	e02b      	b.n	8001386 <HAL_UART_RxCpltCallback+0x7e>
	  {
	    if(strcmp( pch, "percent" ) == 0){
 800132e:	4954      	ldr	r1, [pc, #336]	; (8001480 <HAL_UART_RxCpltCallback+0x178>)
 8001330:	6978      	ldr	r0, [r7, #20]
 8001332:	f7fe ff6d 	bl	8000210 <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <HAL_UART_RxCpltCallback+0x4e>
	        pch = strtok (NULL, " \":,{}");
 800133c:	494e      	ldr	r1, [pc, #312]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 800133e:	2000      	movs	r0, #0
 8001340:	f005 ff82 	bl	8007248 <strtok>
 8001344:	6178      	str	r0, [r7, #20]
	        sscanf (pch,"%d",percent);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	461a      	mov	r2, r3
 800134c:	494d      	ldr	r1, [pc, #308]	; (8001484 <HAL_UART_RxCpltCallback+0x17c>)
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f005 ff4e 	bl	80071f0 <siscanf>
 8001354:	e012      	b.n	800137c <HAL_UART_RxCpltCallback+0x74>
	    } else if(strcmp( pch, "lux" ) == 0){
 8001356:	494c      	ldr	r1, [pc, #304]	; (8001488 <HAL_UART_RxCpltCallback+0x180>)
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7fe ff59 	bl	8000210 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10b      	bne.n	800137c <HAL_UART_RxCpltCallback+0x74>
	        pch = strtok (NULL, " \":,{}");
 8001364:	4944      	ldr	r1, [pc, #272]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 8001366:	2000      	movs	r0, #0
 8001368:	f005 ff6e 	bl	8007248 <strtok>
 800136c:	6178      	str	r0, [r7, #20]
	        sscanf (pch,"%d",lux);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	461a      	mov	r2, r3
 8001374:	4943      	ldr	r1, [pc, #268]	; (8001484 <HAL_UART_RxCpltCallback+0x17c>)
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f005 ff3a 	bl	80071f0 <siscanf>
	    }
	    pch = strtok (NULL, " \":,{}");
 800137c:	493e      	ldr	r1, [pc, #248]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 800137e:	2000      	movs	r0, #0
 8001380:	f005 ff62 	bl	8007248 <strtok>
 8001384:	6178      	str	r0, [r7, #20]
	   while (pch != NULL)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1d0      	bne.n	800132e <HAL_UART_RxCpltCallback+0x26>
	  }
	   lux[0] -= 1000;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001392:	60fb      	str	r3, [r7, #12]
	   percent[0] -= 100;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	3b64      	subs	r3, #100	; 0x64
 8001398:	613b      	str	r3, [r7, #16]

	   if(percent[0]<25){
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b18      	cmp	r3, #24
 800139e:	dc10      	bgt.n	80013c2 <HAL_UART_RxCpltCallback+0xba>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4839      	ldr	r0, [pc, #228]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013a6:	f001 fd21 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	4837      	ldr	r0, [pc, #220]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013b0:	f001 fd1c 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	4834      	ldr	r0, [pc, #208]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013bc:	f001 fd16 	bl	8002dec <HAL_GPIO_WritePin>
 80013c0:	e040      	b.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
	   }else if((percent[0]>=25)&&(percent[0]<50)){
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b18      	cmp	r3, #24
 80013c6:	dd13      	ble.n	80013f0 <HAL_UART_RxCpltCallback+0xe8>
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b31      	cmp	r3, #49	; 0x31
 80013cc:	dc10      	bgt.n	80013f0 <HAL_UART_RxCpltCallback+0xe8>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2101      	movs	r1, #1
 80013d2:	482e      	ldr	r0, [pc, #184]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013d4:	f001 fd0a 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013de:	f001 fd05 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013ea:	f001 fcff 	bl	8002dec <HAL_GPIO_WritePin>
 80013ee:	e029      	b.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
	   }else if((percent[0]>=50)&&(percent[0]<75)){
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b31      	cmp	r3, #49	; 0x31
 80013f4:	dd13      	ble.n	800141e <HAL_UART_RxCpltCallback+0x116>
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b4a      	cmp	r3, #74	; 0x4a
 80013fa:	dc10      	bgt.n	800141e <HAL_UART_RxCpltCallback+0x116>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2101      	movs	r1, #1
 8001400:	4822      	ldr	r0, [pc, #136]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001402:	f001 fcf3 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	4820      	ldr	r0, [pc, #128]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 800140c:	f001 fcee 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	481d      	ldr	r0, [pc, #116]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001418:	f001 fce8 	bl	8002dec <HAL_GPIO_WritePin>
 800141c:	e012      	b.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
	   }else if(percent[0]>=75){
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b4a      	cmp	r3, #74	; 0x4a
 8001422:	dd0f      	ble.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2101      	movs	r1, #1
 8001428:	4818      	ldr	r0, [pc, #96]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 800142a:	f001 fcdf 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001434:	f001 fcda 	bl	8002dec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001440:	f001 fcd4 	bl	8002dec <HAL_GPIO_WritePin>
	   }
	   luks_ustawione = percent[0];
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_UART_RxCpltCallback+0x188>)
 8001448:	6013      	str	r3, [r2, #0]
	   lux[0] = luks_odczytane;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_UART_RxCpltCallback+0x18c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]
	   // Tutaj powinna być funkcja, która weźmie percent[0] jako argument i przetworzy na LUX
	   // ...

	   // Tą funkcję niżej możesz przenieść tam gdzie będzie nowa przetworzona wartość Lux
	   // ..................np. transmit_IT_Json_Data(old_Percent, new_Lux );
	   transmit_IT_Json_Data(percent[0], lux[0] );
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f820 	bl	800149c <transmit_IT_Json_Data>
	   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


	   HAL_UART_Receive_IT(&huart3, (uint8_t*)json_data, 26);
 800145c:	221a      	movs	r2, #26
 800145e:	4907      	ldr	r1, [pc, #28]	; (800147c <HAL_UART_RxCpltCallback+0x174>)
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_UART_RxCpltCallback+0x190>)
 8001462:	f004 fc79 	bl	8005d58 <HAL_UART_Receive_IT>

	}
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004800 	.word	0x40004800
 8001474:	2000021c 	.word	0x2000021c
 8001478:	08008458 	.word	0x08008458
 800147c:	200002c0 	.word	0x200002c0
 8001480:	08008460 	.word	0x08008460
 8001484:	08008468 	.word	0x08008468
 8001488:	0800846c 	.word	0x0800846c
 800148c:	40020400 	.word	0x40020400
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000010 	.word	0x20000010
 8001498:	2000035c 	.word	0x2000035c

0800149c <transmit_IT_Json_Data>:

void transmit_IT_Json_Data(int percent, int lux ){
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	if((0 <= percent) && (percent <= 100) && (0 <= lux) && (lux <= 1000)){
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db19      	blt.n	80014e0 <transmit_IT_Json_Data+0x44>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	dc16      	bgt.n	80014e0 <transmit_IT_Json_Data+0x44>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db13      	blt.n	80014e0 <transmit_IT_Json_Data+0x44>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014be:	dc0f      	bgt.n	80014e0 <transmit_IT_Json_Data+0x44>
		char new_Json_Data[26];

		// Jak będzie rzeczywisty lux, to będziesz mógł zastąpić: oszukane_lux -> lux
		//int oszukane_lux = percent + 100;
		int n=sprintf (new_Json_Data, "{\"lux\":%d,\"percent\":%d}", lux, percent);
 80014c0:	f107 0008 	add.w	r0, r7, #8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <transmit_IT_Json_Data+0x4c>)
 80014ca:	f005 fe71 	bl	80071b0 <siprintf>
 80014ce:	6278      	str	r0, [r7, #36]	; 0x24
		//....

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)new_Json_Data, n);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <transmit_IT_Json_Data+0x50>)
 80014dc:	f004 fbe0 	bl	8005ca0 <HAL_UART_Transmit_IT>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	08008470 	.word	0x08008470
 80014ec:	2000035c 	.word	0x2000035c

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f000 fcb0 	bl	8001e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f89f 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f7ff fddd 	bl	80010bc <MX_GPIO_Init>
  MX_ETH_Init();
 8001502:	f7ff fce3 	bl	8000ecc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001506:	f000 fb79 	bl	8001bfc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800150a:	f000 fbf3 	bl	8001cf4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800150e:	f7ff fe77 	bl	8001200 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001512:	f000 f9d5 	bl	80018c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001516:	f000 fa61 	bl	80019dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800151a:	2100      	movs	r1, #0
 800151c:	483a      	ldr	r0, [pc, #232]	; (8001608 <main+0x118>)
 800151e:	f003 fbb3 	bl	8004c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001522:	2104      	movs	r1, #4
 8001524:	4838      	ldr	r0, [pc, #224]	; (8001608 <main+0x118>)
 8001526:	f003 fbaf 	bl	8004c88 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800152a:	213c      	movs	r1, #60	; 0x3c
 800152c:	4837      	ldr	r0, [pc, #220]	; (800160c <main+0x11c>)
 800152e:	f003 fc81 	bl	8004e34 <HAL_TIM_Encoder_Start>
  // inicjalizacja czujnika
  BH1750_Init(&hbh1750_1);
 8001532:	4837      	ldr	r0, [pc, #220]	; (8001610 <main+0x120>)
 8001534:	f7ff fc72 	bl	8000e1c <BH1750_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t*)json_data, 26);
 8001538:	221a      	movs	r2, #26
 800153a:	4936      	ldr	r1, [pc, #216]	; (8001614 <main+0x124>)
 800153c:	4836      	ldr	r0, [pc, #216]	; (8001618 <main+0x128>)
 800153e:	f004 fc0b 	bl	8005d58 <HAL_UART_Receive_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, RED_procent);
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <main+0x12c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <main+0x118>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	luks_odczytane = (int)(BH1750_ReadLux(&hbh1750_1));
 800154c:	4830      	ldr	r0, [pc, #192]	; (8001610 <main+0x120>)
 800154e:	f7ff fc8b 	bl	8000e68 <BH1750_ReadLux>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	ee17 2a90 	vmov	r2, s15
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <main+0x130>)
 8001560:	601a      	str	r2, [r3, #0]
	uchyb = (luks_ustawione - luks_odczytane);
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <main+0x134>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <main+0x130>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	4a2e      	ldr	r2, [pc, #184]	; (8001628 <main+0x138>)
 800156e:	6013      	str	r3, [r2, #0]
	//uchyb = uchyb/luks_ustawione;
	RED_procent += (int)(k*uchyb);
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <main+0x138>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <main+0x13c>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158a:	ee17 2a90 	vmov	r2, s15
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <main+0x12c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <main+0x12c>)
 8001596:	6013      	str	r3, [r2, #0]
	if(RED_procent > 1000){
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <main+0x12c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a0:	dd03      	ble.n	80015aa <main+0xba>
		RED_procent = 1000;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <main+0x12c>)
 80015a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a8:	601a      	str	r2, [r3, #0]
	}
	if(RED_procent < 0){
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <main+0x12c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <main+0xc8>
			RED_procent = 0;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <main+0x12c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, RED_procent);
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <main+0x12c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <main+0x118>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
	BLUE_procent = __HAL_TIM_GET_COUNTER(&htim4);
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <main+0x11c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <main+0x140>)
 80015cc:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, BLUE_procent);
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <main+0x140>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <main+0x118>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38

	if(connected == 1){
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <main+0x144>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10f      	bne.n	8001600 <main+0x110>
		int n=sprintf (new_Json_Data, "{\"lux\":%d,\"percent\":%d}", luks_odczytane, luks_ustawione);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <main+0x130>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <main+0x134>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4638      	mov	r0, r7
 80015ea:	4913      	ldr	r1, [pc, #76]	; (8001638 <main+0x148>)
 80015ec:	f005 fde0 	bl	80071b0 <siprintf>
 80015f0:	61f8      	str	r0, [r7, #28]

		HAL_UART_Transmit(&huart3, (uint8_t*)new_Json_Data, n, 100);
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4639      	mov	r1, r7
 80015f8:	2364      	movs	r3, #100	; 0x64
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <main+0x128>)
 80015fc:	f004 fabe 	bl	8005b7c <HAL_UART_Transmit>
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(250);
 8001600:	20fa      	movs	r0, #250	; 0xfa
 8001602:	f000 fc87 	bl	8001f14 <HAL_Delay>
	luks_odczytane = (int)(BH1750_ReadLux(&hbh1750_1));
 8001606:	e7a1      	b.n	800154c <main+0x5c>
 8001608:	2000031c 	.word	0x2000031c
 800160c:	200002dc 	.word	0x200002dc
 8001610:	20000000 	.word	0x20000000
 8001614:	200002c0 	.word	0x200002c0
 8001618:	2000035c 	.word	0x2000035c
 800161c:	20000210 	.word	0x20000210
 8001620:	20000010 	.word	0x20000010
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000218 	.word	0x20000218
 800162c:	20000014 	.word	0x20000014
 8001630:	20000214 	.word	0x20000214
 8001634:	2000021c 	.word	0x2000021c
 8001638:	08008470 	.word	0x08008470

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0b4      	sub	sp, #208	; 0xd0
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001646:	2230      	movs	r2, #48	; 0x30
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fda8 	bl	80071a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	2284      	movs	r2, #132	; 0x84
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fd99 	bl	80071a0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800166e:	f002 fa11 	bl	8003a94 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b38      	ldr	r3, [pc, #224]	; (8001754 <SystemClock_Config+0x118>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a37      	ldr	r2, [pc, #220]	; (8001754 <SystemClock_Config+0x118>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <SystemClock_Config+0x118>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <SystemClock_Config+0x11c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <SystemClock_Config+0x11c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <SystemClock_Config+0x11c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016c8:	2348      	movs	r3, #72	; 0x48
 80016ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 f9e8 	bl	8003ab4 <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80016ea:	f000 f839 	bl	8001760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001712:	2102      	movs	r1, #2
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fc71 	bl	8003ffc <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001720:	f000 f81e 	bl	8001760 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <SystemClock_Config+0x120>)
 8001726:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001728:	2300      	movs	r3, #0
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fe56 	bl	80043ec <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001746:	f000 f80b 	bl	8001760 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	37d0      	adds	r7, #208	; 0xd0
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000
 800175c:	00204100 	.word	0x00204100

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x44>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_MspInit+0x44>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_MspInit+0x44>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x44>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x44>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x44>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 fb62 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USART3_IRQHandler+0x10>)
 800181a:	f004 fb3f 	bl	8005e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000035c 	.word	0x2000035c

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f005 fc78 	bl	800714c <__errno>
 800185c:	4602      	mov	r2, r0
 800185e:	230c      	movs	r3, #12
 8001860:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20050000 	.word	0x20050000
 8001888:	00000400 	.word	0x00000400
 800188c:	20000220 	.word	0x20000220
 8001890:	200007e8 	.word	0x200007e8

08001894 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <SystemInit+0x28>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <SystemInit+0x28>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SystemInit+0x28>)
 80018aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ae:	609a      	str	r2, [r3, #8]
#endif
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08e      	sub	sp, #56	; 0x38
 80018c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <MX_TIM3_Init+0x114>)
 80018f4:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <MX_TIM3_Init+0x118>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <MX_TIM3_Init+0x114>)
 80018fa:	2223      	movs	r2, #35	; 0x23
 80018fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <MX_TIM3_Init+0x114>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <MX_TIM3_Init+0x114>)
 8001906:	f240 32e7 	movw	r2, #999	; 0x3e7
 800190a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <MX_TIM3_Init+0x114>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <MX_TIM3_Init+0x114>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001918:	482e      	ldr	r0, [pc, #184]	; (80019d4 <MX_TIM3_Init+0x114>)
 800191a:	f003 f955 	bl	8004bc8 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001924:	f7ff ff1c 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800192e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001932:	4619      	mov	r1, r3
 8001934:	4827      	ldr	r0, [pc, #156]	; (80019d4 <MX_TIM3_Init+0x114>)
 8001936:	f003 fbcd 	bl	80050d4 <HAL_TIM_ConfigClockSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001940:	f7ff ff0e 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001944:	4823      	ldr	r0, [pc, #140]	; (80019d4 <MX_TIM3_Init+0x114>)
 8001946:	f003 f96a 	bl	8004c1e <HAL_TIM_PWM_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001950:	f7ff ff06 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	481c      	ldr	r0, [pc, #112]	; (80019d4 <MX_TIM3_Init+0x114>)
 8001964:	f004 f82e 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800196e:	f7ff fef7 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2360      	movs	r3, #96	; 0x60
 8001974:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	4812      	ldr	r0, [pc, #72]	; (80019d4 <MX_TIM3_Init+0x114>)
 800198a:	f003 fa8b 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001994:	f7ff fee4 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	2204      	movs	r2, #4
 800199c:	4619      	mov	r1, r3
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_TIM3_Init+0x114>)
 80019a0:	f003 fa80 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019aa:	f7ff fed9 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	2208      	movs	r2, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <MX_TIM3_Init+0x114>)
 80019b6:	f003 fa75 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80019c0:	f7ff fece 	bl	8001760 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <MX_TIM3_Init+0x114>)
 80019c6:	f000 f8c3 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 80019ca:	bf00      	nop
 80019cc:	3738      	adds	r7, #56	; 0x38
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000031c 	.word	0x2000031c
 80019d8:	40000400 	.word	0x40000400

080019dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fbd8 	bl	80071a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_TIM4_Init+0xa4>)
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <MX_TIM4_Init+0xa8>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a20:	2303      	movs	r3, #3
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a34:	2302      	movs	r3, #2
 8001a36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a4c:	f003 f960 	bl	8004d10 <HAL_TIM_Encoder_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a56:	f7ff fe83 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <MX_TIM4_Init+0xa4>)
 8001a68:	f003 ffac 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a72:	f7ff fe75 	bl	8001760 <Error_Handler>
  }

}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	; 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002dc 	.word	0x200002dc
 8001a84:	40000800 	.word	0x40000800

08001a88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_TIM_Base_MspInit+0x38>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d128      	bne.n	8001b3c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x80>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x80>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x80>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001b38:	f000 ffae 	bl	8002a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40000800 	.word	0x40000800
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020c00 	.word	0x40020c00

08001b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_TIM_MspPostInit+0x9c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d138      	bne.n	8001be4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <HAL_TIM_MspPostInit+0xa0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_TIM_MspPostInit+0xa0>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_TIM_MspPostInit+0xa0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_TIM_MspPostInit+0xa0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <HAL_TIM_MspPostInit+0xa0>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_TIM_MspPostInit+0xa0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <HAL_TIM_MspPostInit+0xa4>)
 8001bbe:	f000 ff6b 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bc2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <HAL_TIM_MspPostInit+0xa8>)
 8001be0:	f000 ff5a 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020800 	.word	0x40020800

08001bfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <MX_USART3_UART_Init+0x5c>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c40:	f003 ff4e 	bl	8005ae0 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c4a:	f7ff fd89 	bl	8001760 <Error_Handler>
  }

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000035c 	.word	0x2000035c
 8001c58:	40004800 	.word	0x40004800

08001c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_UART_MspInit+0x8c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_UART_MspInit+0x90>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_UART_MspInit+0x90>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_UART_MspInit+0x90>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_MspInit+0x90>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_UART_MspInit+0x90>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_UART_MspInit+0x90>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <HAL_UART_MspInit+0x94>)
 8001ccc:	f000 fee4 	bl	8002a98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2027      	movs	r0, #39	; 0x27
 8001cd6:	f000 fa1a 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cda:	2027      	movs	r0, #39	; 0x27
 8001cdc:	f000 fa33 	bl	8002146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40004800 	.word	0x40004800
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020c00 	.word	0x40020c00

08001cf4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001cfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d02:	2206      	movs	r2, #6
 8001d04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d08:	2202      	movs	r2, #2
 8001d0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d14:	2202      	movs	r2, #2
 8001d16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d38:	f001 fd63 	bl	8003802 <HAL_PCD_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d42:	f7ff fd0d 	bl	8001760 <Error_Handler>
  }

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003dc 	.word	0x200003dc

08001d50 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d70:	d141      	bne.n	8001df6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4817      	ldr	r0, [pc, #92]	; (8001e04 <HAL_PCD_MspInit+0xb4>)
 8001da8:	f000 fe76 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <HAL_PCD_MspInit+0xb4>)
 8001dc2:	f000 fe69 	bl	8002a98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_PCD_MspInit+0xb0>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e0e:	e003      	b.n	8001e18 <LoopCopyDataInit>

08001e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e16:	3104      	adds	r1, #4

08001e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e20:	d3f6      	bcc.n	8001e10 <CopyDataInit>
  ldr  r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e24:	e002      	b.n	8001e2c <LoopFillZerobss>

08001e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e28:	f842 3b04 	str.w	r3, [r2], #4

08001e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e30:	d3f9      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e32:	f7ff fd2f 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f005 f98f 	bl	8007158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff fb59 	bl	80014f0 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001e44:	08008678 	.word	0x08008678
  ldr  r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e4c:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001e50:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001e54:	200007e8 	.word	0x200007e8

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>

08001e5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5e:	2003      	movs	r0, #3
 8001e60:	f000 f94a 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 f805 	bl	8001e74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fc81 	bl	8001770 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f965 	bl	8002162 <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f92d 	bl	800210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	20000020 	.word	0x20000020
 8001ed0:	2000001c 	.word	0x2000001c

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000020 	.word	0x20000020
 8001ef8:	200007e0 	.word	0x200007e0

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200007e0 	.word	0x200007e0

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_Delay+0x40>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000020 	.word	0x20000020

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	05fa0000 	.word	0x05fa0000

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	; (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff29 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002120:	f7ff ff3e 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 8002124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f7ff ff8e 	bl	800204c <NVIC_EncodePriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff5d 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff31 	bl	8001fbc <__NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffa2 	bl	80020b4 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d004      	beq.n	8002198 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e00c      	b.n	80021b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2205      	movs	r2, #5
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80021d0:	4ba9      	ldr	r3, [pc, #676]	; (8002478 <HAL_ETH_Init+0x2b8>)
 80021d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e183      	b.n	80024ee <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fea6 	bl	8000f4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002200:	4b9e      	ldr	r3, [pc, #632]	; (800247c <HAL_ETH_Init+0x2bc>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	4a9d      	ldr	r2, [pc, #628]	; (800247c <HAL_ETH_Init+0x2bc>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6453      	str	r3, [r2, #68]	; 0x44
 800220c:	4b9b      	ldr	r3, [pc, #620]	; (800247c <HAL_ETH_Init+0x2bc>)
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002218:	4b99      	ldr	r3, [pc, #612]	; (8002480 <HAL_ETH_Init+0x2c0>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a98      	ldr	r2, [pc, #608]	; (8002480 <HAL_ETH_Init+0x2c0>)
 800221e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002222:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002224:	4b96      	ldr	r3, [pc, #600]	; (8002480 <HAL_ETH_Init+0x2c0>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4994      	ldr	r1, [pc, #592]	; (8002480 <HAL_ETH_Init+0x2c0>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800224a:	f7ff fe57 	bl	8001efc <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002250:	e011      	b.n	8002276 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002252:	f7ff fe53 	bl	8001efc <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002260:	d909      	bls.n	8002276 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e13b      	b.n	80024ee <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e4      	bne.n	8002252 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f023 031c 	bic.w	r3, r3, #28
 8002296:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002298:	f002 f874 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 800229c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4a78      	ldr	r2, [pc, #480]	; (8002484 <HAL_ETH_Init+0x2c4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d908      	bls.n	80022b8 <HAL_ETH_Init+0xf8>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_ETH_Init+0x2c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d804      	bhi.n	80022b8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e027      	b.n	8002308 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4a73      	ldr	r2, [pc, #460]	; (8002488 <HAL_ETH_Init+0x2c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d908      	bls.n	80022d2 <HAL_ETH_Init+0x112>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4a72      	ldr	r2, [pc, #456]	; (800248c <HAL_ETH_Init+0x2cc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d804      	bhi.n	80022d2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f043 030c 	orr.w	r3, r3, #12
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e01a      	b.n	8002308 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4a6d      	ldr	r2, [pc, #436]	; (800248c <HAL_ETH_Init+0x2cc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d903      	bls.n	80022e2 <HAL_ETH_Init+0x122>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4a6c      	ldr	r2, [pc, #432]	; (8002490 <HAL_ETH_Init+0x2d0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d911      	bls.n	8002306 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_ETH_Init+0x2d0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d908      	bls.n	80022fc <HAL_ETH_Init+0x13c>
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_ETH_Init+0x2d4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d804      	bhi.n	80022fc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e005      	b.n	8002308 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	e000      	b.n	8002308 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002306:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002310:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002314:	2100      	movs	r1, #0
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f956 	bl	80025c8 <HAL_ETH_WritePHYRegister>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f9b3 	bl	8002694 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0d9      	b.n	80024ee <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800233a:	20ff      	movs	r0, #255	; 0xff
 800233c:	f7ff fdea 	bl	8001f14 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a7 	beq.w	8002498 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800234a:	f7ff fdd7 	bl	8001efc <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8cd 	bl	80024f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800235e:	f7ff fdcd 	bl	8001efc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d90f      	bls.n	8002390 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f98c 	bl	8002694 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0ae      	b.n	80024ee <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0da      	beq.n	8002350 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800239a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239e:	2100      	movs	r1, #0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f911 	bl	80025c8 <HAL_ETH_WritePHYRegister>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023b0:	6939      	ldr	r1, [r7, #16]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f96e 	bl	8002694 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80023c0:	2301      	movs	r3, #1
 80023c2:	e094      	b.n	80024ee <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff fd9a 	bl	8001efc <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	461a      	mov	r2, r3
 80023d0:	2101      	movs	r1, #1
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f890 	bl	80024f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023d8:	f7ff fd90 	bl	8001efc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d90f      	bls.n	800240a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80023ee:	6939      	ldr	r1, [r7, #16]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f94f 	bl	8002694 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e071      	b.n	80024ee <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0da      	beq.n	80023ca <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	461a      	mov	r2, r3
 800241a:	211f      	movs	r1, #31
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f86b 	bl	80024f8 <HAL_ETH_ReadPHYRegister>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f930 	bl	8002694 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800243c:	2301      	movs	r3, #1
 800243e:	e056      	b.n	80024ee <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	e002      	b.n	800245a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	e037      	b.n	80024dc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e032      	b.n	80024dc <HAL_ETH_Init+0x31c>
 8002476:	bf00      	nop
 8002478:	03938700 	.word	0x03938700
 800247c:	40023800 	.word	0x40023800
 8002480:	40013800 	.word	0x40013800
 8002484:	01312cff 	.word	0x01312cff
 8002488:	02160ebf 	.word	0x02160ebf
 800248c:	039386ff 	.word	0x039386ff
 8002490:	05f5e0ff 	.word	0x05f5e0ff
 8002494:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f889 	bl	80025c8 <HAL_ETH_WritePHYRegister>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024c0:	6939      	ldr	r1, [r7, #16]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8e6 	bl	8002694 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00c      	b.n	80024ee <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80024d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80024d8:	f7ff fd1c 	bl	8001f14 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8d8 	bl	8002694 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop

080024f8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	460b      	mov	r3, r1
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b82      	cmp	r3, #130	; 0x82
 8002518:	d101      	bne.n	800251e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	e050      	b.n	80025c0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2282      	movs	r2, #130	; 0x82
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 031c 	and.w	r3, r3, #28
 8002534:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8a1b      	ldrh	r3, [r3, #16]
 800253a:	02db      	lsls	r3, r3, #11
 800253c:	b29b      	uxth	r3, r3
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002544:	897b      	ldrh	r3, [r7, #10]
 8002546:	019b      	lsls	r3, r3, #6
 8002548:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f023 0302 	bic.w	r3, r3, #2
 8002558:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800256a:	f7ff fcc7 	bl	8001efc <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002570:	e015      	b.n	800259e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002572:	f7ff fcc3 	bl	8001efc <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d309      	bcc.n	8002596 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e014      	b.n	80025c0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e4      	bne.n	8002572 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	460b      	mov	r3, r1
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b42      	cmp	r3, #66	; 0x42
 80025e8:	d101      	bne.n	80025ee <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	e04e      	b.n	800268c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2242      	movs	r2, #66	; 0x42
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 031c 	and.w	r3, r3, #28
 8002604:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8a1b      	ldrh	r3, [r3, #16]
 800260a:	02db      	lsls	r3, r3, #11
 800260c:	b29b      	uxth	r3, r3
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002644:	f7ff fc5a 	bl	8001efc <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800264a:	e015      	b.n	8002678 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800264c:	f7ff fc56 	bl	8001efc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d309      	bcc.n	8002670 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e00d      	b.n	800268c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e4      	bne.n	800264c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0b0      	sub	sp, #192	; 0xc0
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80026da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026de:	663b      	str	r3, [r7, #96]	; 0x60
 80026e0:	e001      	b.n	80026e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80026e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026f0:	2300      	movs	r3, #0
 80026f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002700:	2340      	movs	r3, #64	; 0x40
 8002702:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002768:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800276c:	4bab      	ldr	r3, [pc, #684]	; (8002a1c <ETH_MACDMAConfig+0x388>)
 800276e:	4013      	ands	r3, r2
 8002770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002774:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002778:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800277c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002780:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002786:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800278a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800278c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800278e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002794:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002798:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800279a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800279c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800279e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80027a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80027a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80027a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80027a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7ff fba3 	bl	8001f14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80027da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027dc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80027de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80027e0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80027e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80027e6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80027e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80027ec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80027ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80027f2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80027f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80027fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002804:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002806:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002812:	2001      	movs	r0, #1
 8002814:	f7ff fb7e 	bl	8001f14 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002820:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800282a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002834:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002840:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002844:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002848:	4013      	ands	r3, r2
 800284a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800284e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002852:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002858:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800285a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800285e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002864:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800286a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800286c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002870:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002872:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002884:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff fb3f 	bl	8001f14 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800289e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80028a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7ff fb2a 	bl	8001f14 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80028ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80028d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80028ee:	2304      	movs	r3, #4
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80028f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80028f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800290e:	2300      	movs	r3, #0
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002912:	2300      	movs	r3, #0
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f241 0318 	movw	r3, #4120	; 0x1018
 800291e:	4413      	add	r3, r2
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002926:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <ETH_MACDMAConfig+0x38c>)
 800292c:	4013      	ands	r3, r2
 800292e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002932:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002934:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002936:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002938:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800293a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800293c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800293e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002940:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002942:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002944:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002946:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002948:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800294a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800294e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002952:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002954:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	f241 0318 	movw	r3, #4120	; 0x1018
 8002966:	4413      	add	r3, r2
 8002968:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f241 0318 	movw	r3, #4120	; 0x1018
 8002976:	4413      	add	r3, r2
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800297e:	2001      	movs	r0, #1
 8002980:	f7ff fac8 	bl	8001f14 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f241 0318 	movw	r3, #4120	; 0x1018
 800298c:	4413      	add	r3, r2
 800298e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002992:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002998:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800299c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80029a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80029a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80029aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80029ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7ff faa1 	bl	8001f14 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10d      	bne.n	8002a04 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6811      	ldr	r1, [r2, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <ETH_MACDMAConfig+0x390>)
 80029fa:	431a      	orrs	r2, r3
 80029fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a00:	440b      	add	r3, r1
 8002a02:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f80b 	bl	8002a28 <ETH_MACAddressConfig>
}
 8002a12:	bf00      	nop
 8002a14:	37c0      	adds	r7, #192	; 0xc0
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	ff20810f 	.word	0xff20810f
 8002a20:	f8de3f23 	.word	0xf8de3f23
 8002a24:	00010040 	.word	0x00010040

08002a28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3305      	adds	r3, #5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	3204      	adds	r2, #4
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <ETH_MACAddressConfig+0x68>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3303      	adds	r3, #3
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	061a      	lsls	r2, r3, #24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3301      	adds	r3, #1
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <ETH_MACAddressConfig+0x6c>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	6013      	str	r3, [r2, #0]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40028040 	.word	0x40028040
 8002a94:	40028044 	.word	0x40028044

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e175      	b.n	8002da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	f040 8164 	bne.w	8002d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d00b      	beq.n	8002af6 <HAL_GPIO_Init+0x5e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aea:	2b11      	cmp	r3, #17
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b12      	cmp	r3, #18
 8002af4:	d130      	bne.n	8002b58 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 0201 	and.w	r2, r3, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x100>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b12      	cmp	r3, #18
 8002b96:	d123      	bne.n	8002be0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	220f      	movs	r2, #15
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	08da      	lsrs	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3208      	adds	r2, #8
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0203 	and.w	r2, r3, #3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80be 	beq.w	8002d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_GPIO_Init+0x320>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <HAL_GPIO_Init+0x320>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <HAL_GPIO_Init+0x320>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c3a:	4a60      	ldr	r2, [pc, #384]	; (8002dbc <HAL_GPIO_Init+0x324>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_GPIO_Init+0x328>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d037      	beq.n	8002cd6 <HAL_GPIO_Init+0x23e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x32c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d031      	beq.n	8002cd2 <HAL_GPIO_Init+0x23a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02b      	beq.n	8002cce <HAL_GPIO_Init+0x236>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a54      	ldr	r2, [pc, #336]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d025      	beq.n	8002cca <HAL_GPIO_Init+0x232>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a53      	ldr	r2, [pc, #332]	; (8002dd0 <HAL_GPIO_Init+0x338>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d01f      	beq.n	8002cc6 <HAL_GPIO_Init+0x22e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_GPIO_Init+0x33c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x22a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_GPIO_Init+0x340>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_GPIO_Init+0x344>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	; (8002de0 <HAL_GPIO_Init+0x348>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	; (8002de4 <HAL_GPIO_Init+0x34c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002cae:	2309      	movs	r3, #9
 8002cb0:	e012      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cb2:	230a      	movs	r3, #10
 8002cb4:	e010      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	e00e      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cba:	2307      	movs	r3, #7
 8002cbc:	e00c      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e00a      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	e008      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e004      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x240>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ce8:	4934      	ldr	r1, [pc, #208]	; (8002dbc <HAL_GPIO_Init+0x324>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d1a:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d20:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d44:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d98:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	f67f ae86 	bls.w	8002ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	3724      	adds	r7, #36	; 0x24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40021800 	.word	0x40021800
 8002ddc:	40021c00 	.word	0x40021c00
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40022400 	.word	0x40022400
 8002de8:	40013c00 	.word	0x40013c00

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e08:	e003      	b.n	8002e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	619a      	str	r2, [r3, #24]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fa1a 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d104      	bne.n	8002eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_I2C_Init+0x11c>)
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	ea42 0103 	orr.w	r1, r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	021a      	lsls	r2, r3, #8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	02008000 	.word	0x02008000

08002f40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
 8002f50:	4613      	mov	r3, r2
 8002f52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	f040 80da 	bne.w	8003116 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0x30>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0d3      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1d8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe ffc0 	bl	8001efc <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2319      	movs	r3, #25
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f9e6 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0be      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2221      	movs	r2, #33	; 0x21
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	893a      	ldrh	r2, [r7, #8]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2bff      	cmp	r3, #255	; 0xff
 8002fca:	d90e      	bls.n	8002fea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	4b51      	ldr	r3, [pc, #324]	; (8003120 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fb48 	bl	8003678 <I2C_TransferConfig>
 8002fe8:	e06c      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	4b48      	ldr	r3, [pc, #288]	; (8003120 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fb37 	bl	8003678 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800300a:	e05b      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f9e3 	bl	80033dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e07b      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d034      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0x184>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d130      	bne.n	80030c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2200      	movs	r2, #0
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f975 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e04d      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2bff      	cmp	r3, #255	; 0xff
 8003084:	d90e      	bls.n	80030a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 faeb 	bl	8003678 <I2C_TransferConfig>
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fada 	bl	8003678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d19e      	bne.n	800300c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f9c2 	bl	800345c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e01a      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2220      	movs	r2, #32
 80030e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_I2C_Master_Transmit+0x1e4>)
 80030f6:	400b      	ands	r3, r1
 80030f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	80002000 	.word	0x80002000
 8003124:	fe00e800 	.word	0xfe00e800

08003128 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	460b      	mov	r3, r1
 8003136:	817b      	strh	r3, [r7, #10]
 8003138:	4613      	mov	r3, r2
 800313a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	f040 80db 	bne.w	8003300 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_I2C_Master_Receive+0x30>
 8003154:	2302      	movs	r3, #2
 8003156:	e0d4      	b.n	8003302 <HAL_I2C_Master_Receive+0x1da>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003160:	f7fe fecc 	bl	8001efc <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2319      	movs	r3, #25
 800316c:	2201      	movs	r2, #1
 800316e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8f2 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0bf      	b.n	8003302 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2222      	movs	r2, #34	; 0x22
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2210      	movs	r2, #16
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	893a      	ldrh	r2, [r7, #8]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2bff      	cmp	r3, #255	; 0xff
 80031b2:	d90e      	bls.n	80031d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	22ff      	movs	r2, #255	; 0xff
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	8979      	ldrh	r1, [r7, #10]
 80031c2:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_I2C_Master_Receive+0x1e4>)
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fa54 	bl	8003678 <I2C_TransferConfig>
 80031d0:	e06d      	b.n	80032ae <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_I2C_Master_Receive+0x1e4>)
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fa43 	bl	8003678 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80031f2:	e05c      	b.n	80032ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	6a39      	ldr	r1, [r7, #32]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f96b 	bl	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e07c      	b.n	8003302 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d034      	beq.n	80032ae <HAL_I2C_Master_Receive+0x186>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d130      	bne.n	80032ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2200      	movs	r2, #0
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f880 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e04d      	b.n	8003302 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	2bff      	cmp	r3, #255	; 0xff
 800326e:	d90e      	bls.n	800328e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	b2da      	uxtb	r2, r3
 800327c:	8979      	ldrh	r1, [r7, #10]
 800327e:	2300      	movs	r3, #0
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f9f6 	bl	8003678 <I2C_TransferConfig>
 800328c:	e00f      	b.n	80032ae <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f9e5 	bl	8003678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d19d      	bne.n	80031f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	6a39      	ldr	r1, [r7, #32]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f8cd 	bl	800345c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e01a      	b.n	8003302 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_I2C_Master_Receive+0x1e8>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	80002400 	.word	0x80002400
 8003310:	fe00e800 	.word	0xfe00e800

08003314 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d103      	bne.n	8003332 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d007      	beq.n	8003350 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	619a      	str	r2, [r3, #24]
  }
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336c:	e022      	b.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d01e      	beq.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe fdc1 	bl	8001efc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d113      	bne.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00f      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4013      	ands	r3, r2
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d0cd      	beq.n	800336e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033e8:	e02c      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8dc 	bl	80035ac <I2C_IsAcknowledgeFailed>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e02a      	b.n	8003454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d01e      	beq.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7fe fd79 	bl	8001efc <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d113      	bne.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d1cb      	bne.n	80033ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003468:	e028      	b.n	80034bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f89c 	bl	80035ac <I2C_IsAcknowledgeFailed>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e026      	b.n	80034cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fd3d 	bl	8001efc <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d1cf      	bne.n	800346a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e0:	e055      	b.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f860 	bl	80035ac <I2C_IsAcknowledgeFailed>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e053      	b.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d129      	bne.n	8003558 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d105      	bne.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e03f      	b.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2220      	movs	r2, #32
 8003524:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003532:	400b      	ands	r3, r1
 8003534:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e022      	b.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7fe fcd0 	bl	8001efc <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e007      	b.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d1a2      	bne.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	fe00e800 	.word	0xfe00e800

080035ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d151      	bne.n	800366a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c6:	e022      	b.n	800360e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d01e      	beq.n	800360e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d0:	f7fe fc94 	bl	8001efc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <I2C_IsAcknowledgeFailed+0x3a>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e02e      	b.n	800366c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d1d5      	bne.n	80035c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2220      	movs	r2, #32
 800362a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff fe71 	bl	8003314 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <I2C_IsAcknowledgeFailed+0xc8>)
 800363e:	400b      	ands	r3, r1
 8003640:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fe00e800 	.word	0xfe00e800

08003678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	4613      	mov	r3, r2
 8003688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	0d5b      	lsrs	r3, r3, #21
 8003694:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <I2C_TransferConfig+0x58>)
 800369a:	430b      	orrs	r3, r1
 800369c:	43db      	mvns	r3, r3
 800369e:	ea02 0103 	and.w	r1, r2, r3
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036a8:	7a7b      	ldrb	r3, [r7, #9]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	03ff63ff 	.word	0x03ff63ff

080036d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d138      	bne.n	800375c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e032      	b.n	800375e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	d139      	bne.n	80037f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800378a:	2302      	movs	r3, #2
 800378c:	e033      	b.n	80037f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003804:	b08f      	sub	sp, #60	; 0x3c
 8003806:	af0a      	add	r7, sp, #40	; 0x28
 8003808:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e116      	b.n	8003a42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fa8e 	bl	8001d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2203      	movs	r2, #3
 8003838:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fa22 	bl	8006c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	687e      	ldr	r6, [r7, #4]
 8003860:	466d      	mov	r5, sp
 8003862:	f106 0410 	add.w	r4, r6, #16
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800386c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003872:	e885 0003 	stmia.w	r5, {r0, r1}
 8003876:	1d33      	adds	r3, r6, #4
 8003878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387a:	6838      	ldr	r0, [r7, #0]
 800387c:	f003 f9b6 	bl	8006bec <USB_CoreInit>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0d7      	b.n	8003a42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f003 fa10 	bl	8006cbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e04a      	b.n	800393a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	333d      	adds	r3, #61	; 0x3d
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	333c      	adds	r3, #60	; 0x3c
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	b298      	uxth	r0, r3
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3342      	adds	r3, #66	; 0x42
 80038e0:	4602      	mov	r2, r0
 80038e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	333f      	adds	r3, #63	; 0x3f
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	3344      	adds	r3, #68	; 0x44
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3348      	adds	r3, #72	; 0x48
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3350      	adds	r3, #80	; 0x50
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	3301      	adds	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	d3af      	bcc.n	80038a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e044      	b.n	80039d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	3301      	adds	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d3b5      	bcc.n	800394a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	687e      	ldr	r6, [r7, #4]
 80039e6:	466d      	mov	r5, sp
 80039e8:	f106 0410 	add.w	r4, r6, #16
 80039ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039fc:	1d33      	adds	r3, r6, #4
 80039fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f003 f987 	bl	8006d14 <USB_DevInit>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e014      	b.n	8003a42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f80b 	bl	8003a4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 fb39 	bl	80070b2 <USB_DevDisconnect>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	10000003 	.word	0x10000003

08003a94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40007000 	.word	0x40007000

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e291      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8087 	beq.w	8003be6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad8:	4b96      	ldr	r3, [pc, #600]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d00c      	beq.n	8003afe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae4:	4b93      	ldr	r3, [pc, #588]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d112      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62>
 8003af0:	4b90      	ldr	r3, [pc, #576]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	4b8d      	ldr	r3, [pc, #564]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d06c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x130>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d168      	bne.n	8003be4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e26b      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x7a>
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e02e      	b.n	8003b8c <HAL_RCC_OscConfig+0xd8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x9c>
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7e      	ldr	r2, [pc, #504]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7b      	ldr	r2, [pc, #492]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e01d      	b.n	8003b8c <HAL_RCC_OscConfig+0xd8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b5a:	4b76      	ldr	r3, [pc, #472]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a75      	ldr	r2, [pc, #468]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a72      	ldr	r2, [pc, #456]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0xd8>
 8003b74:	4b6f      	ldr	r3, [pc, #444]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6e      	ldr	r2, [pc, #440]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6b      	ldr	r2, [pc, #428]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe f9b2 	bl	8001efc <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe f9ae 	bl	8001efc <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e21f      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f99e 	bl	8001efc <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe f99a 	bl	8001efc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e20b      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	4b57      	ldr	r3, [pc, #348]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x110>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d069      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf2:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfe:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x190>
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d116      	bne.n	8003c44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x17a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e1df      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	493d      	ldr	r1, [pc, #244]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	e040      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d023      	beq.n	8003c94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a38      	ldr	r2, [pc, #224]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe f950 	bl	8001efc <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c60:	f7fe f94c 	bl	8001efc <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1bd      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4929      	ldr	r1, [pc, #164]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
 8003c92:	e018      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f92c 	bl	8001efc <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fe f928 	bl	8001efc <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e199      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d038      	beq.n	8003d44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d019      	beq.n	8003d0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe f909 	bl	8001efc <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cee:	f7fe f905 	bl	8001efc <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e176      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x23a>
 8003d0c:	e01a      	b.n	8003d44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe f8ef 	bl	8001efc <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d22:	f7fe f8eb 	bl	8001efc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d903      	bls.n	8003d38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e15c      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
 8003d34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	4b91      	ldr	r3, [pc, #580]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ee      	bne.n	8003d22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a4 	beq.w	8003e9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d52:	4b8b      	ldr	r3, [pc, #556]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	4b88      	ldr	r3, [pc, #544]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a87      	ldr	r2, [pc, #540]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b85      	ldr	r3, [pc, #532]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7a:	4b82      	ldr	r3, [pc, #520]	; (8003f84 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d86:	4b7f      	ldr	r3, [pc, #508]	; (8003f84 <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7e      	ldr	r2, [pc, #504]	; (8003f84 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fe f8b3 	bl	8001efc <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fe f8af 	bl	8001efc <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b64      	cmp	r3, #100	; 0x64
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e120      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dac:	4b75      	ldr	r3, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x31a>
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a6e      	ldr	r2, [pc, #440]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	e02d      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x33c>
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a69      	ldr	r2, [pc, #420]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	4b67      	ldr	r3, [pc, #412]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
 8003dee:	e01c      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d10c      	bne.n	8003e12 <HAL_RCC_OscConfig+0x35e>
 8003df8:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a60      	ldr	r2, [pc, #384]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	4b5e      	ldr	r3, [pc, #376]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a5d      	ldr	r2, [pc, #372]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	e00b      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
 8003e12:	4b5b      	ldr	r3, [pc, #364]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a5a      	ldr	r2, [pc, #360]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b58      	ldr	r3, [pc, #352]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a57      	ldr	r2, [pc, #348]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d015      	beq.n	8003e5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe f863 	bl	8001efc <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe f85f 	bl	8001efc <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0ce      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ee      	beq.n	8003e3a <HAL_RCC_OscConfig+0x386>
 8003e5c:	e014      	b.n	8003e88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f84d 	bl	8001efc <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe f849 	bl	8001efc <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0b8      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ee      	bne.n	8003e66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a3b      	ldr	r2, [pc, #236]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80a4 	beq.w	8003fec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d06b      	beq.n	8003f88 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d149      	bne.n	8003f4c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f81a 	bl	8001efc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe f816 	bl	8001efc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e087      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	3b01      	subs	r3, #1
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f16:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd ffea 	bl	8001efc <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fd ffe6 	bl	8001efc <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e057      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x478>
 8003f4a:	e04f      	b.n	8003fec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd ffd0 	bl	8001efc <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fd ffcc 	bl	8001efc <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e03d      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4ac>
 8003f7e:	e035      	b.n	8003fec <HAL_RCC_OscConfig+0x538>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f88:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x544>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d028      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d121      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d11a      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d111      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0d0      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d910      	bls.n	8004044 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b67      	ldr	r3, [pc, #412]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 020f 	bic.w	r2, r3, #15
 800402a:	4965      	ldr	r1, [pc, #404]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b63      	ldr	r3, [pc, #396]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0b8      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800405c:	4b59      	ldr	r3, [pc, #356]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800407e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	494d      	ldr	r1, [pc, #308]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d040      	beq.n	8004120 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d115      	bne.n	80040de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e07f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e073      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06b      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4936      	ldr	r1, [pc, #216]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f0:	f7fd ff04 	bl	8001efc <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fd ff00 	bl	8001efc <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e053      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d210      	bcs.n	8004150 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 020f 	bic.w	r2, r3, #15
 8004136:	4922      	ldr	r1, [pc, #136]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e032      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4916      	ldr	r1, [pc, #88]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	490e      	ldr	r1, [pc, #56]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800418e:	f000 f821 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004192:	4601      	mov	r1, r0
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_RCC_ClockConfig+0x1cc>)
 80041a0:	5cd3      	ldrb	r3, [r2, r3]
 80041a2:	fa21 f303 	lsr.w	r3, r1, r3
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <HAL_RCC_ClockConfig+0x1d0>)
 80041a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1d4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fe60 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023c00 	.word	0x40023c00
 80041c4:	40023800 	.word	0x40023800
 80041c8:	08008494 	.word	0x08008494
 80041cc:	20000018 	.word	0x20000018
 80041d0:	2000001c 	.word	0x2000001c

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	2300      	movs	r3, #0
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d007      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x32>
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d008      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x38>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f040 80b4 	bne.w	8004368 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b5e      	ldr	r3, [pc, #376]	; (800437c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004202:	60bb      	str	r3, [r7, #8]
      break;
 8004204:	e0b3      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004206:	4b5e      	ldr	r3, [pc, #376]	; (8004380 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004208:	60bb      	str	r3, [r7, #8]
      break;
 800420a:	e0b0      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420c:	4b5a      	ldr	r3, [pc, #360]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004214:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004216:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04a      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	f04f 0400 	mov.w	r4, #0
 800422c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	ea03 0501 	and.w	r5, r3, r1
 8004238:	ea04 0602 	and.w	r6, r4, r2
 800423c:	4629      	mov	r1, r5
 800423e:	4632      	mov	r2, r6
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	f04f 0400 	mov.w	r4, #0
 8004248:	0154      	lsls	r4, r2, #5
 800424a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800424e:	014b      	lsls	r3, r1, #5
 8004250:	4619      	mov	r1, r3
 8004252:	4622      	mov	r2, r4
 8004254:	1b49      	subs	r1, r1, r5
 8004256:	eb62 0206 	sbc.w	r2, r2, r6
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	f04f 0400 	mov.w	r4, #0
 8004262:	0194      	lsls	r4, r2, #6
 8004264:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004268:	018b      	lsls	r3, r1, #6
 800426a:	1a5b      	subs	r3, r3, r1
 800426c:	eb64 0402 	sbc.w	r4, r4, r2
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	00e2      	lsls	r2, r4, #3
 800427a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800427e:	00d9      	lsls	r1, r3, #3
 8004280:	460b      	mov	r3, r1
 8004282:	4614      	mov	r4, r2
 8004284:	195b      	adds	r3, r3, r5
 8004286:	eb44 0406 	adc.w	r4, r4, r6
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	0262      	lsls	r2, r4, #9
 8004294:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004298:	0259      	lsls	r1, r3, #9
 800429a:	460b      	mov	r3, r1
 800429c:	4614      	mov	r4, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	4621      	mov	r1, r4
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4623      	mov	r3, r4
 80042ac:	f7fc fc36 	bl	8000b1c <__aeabi_uldivmod>
 80042b0:	4603      	mov	r3, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e049      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b8:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	099b      	lsrs	r3, r3, #6
 80042be:	f04f 0400 	mov.w	r4, #0
 80042c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	ea03 0501 	and.w	r5, r3, r1
 80042ce:	ea04 0602 	and.w	r6, r4, r2
 80042d2:	4629      	mov	r1, r5
 80042d4:	4632      	mov	r2, r6
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	f04f 0400 	mov.w	r4, #0
 80042de:	0154      	lsls	r4, r2, #5
 80042e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042e4:	014b      	lsls	r3, r1, #5
 80042e6:	4619      	mov	r1, r3
 80042e8:	4622      	mov	r2, r4
 80042ea:	1b49      	subs	r1, r1, r5
 80042ec:	eb62 0206 	sbc.w	r2, r2, r6
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	0194      	lsls	r4, r2, #6
 80042fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042fe:	018b      	lsls	r3, r1, #6
 8004300:	1a5b      	subs	r3, r3, r1
 8004302:	eb64 0402 	sbc.w	r4, r4, r2
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	00e2      	lsls	r2, r4, #3
 8004310:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004314:	00d9      	lsls	r1, r3, #3
 8004316:	460b      	mov	r3, r1
 8004318:	4614      	mov	r4, r2
 800431a:	195b      	adds	r3, r3, r5
 800431c:	eb44 0406 	adc.w	r4, r4, r6
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	02a2      	lsls	r2, r4, #10
 800432a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800432e:	0299      	lsls	r1, r3, #10
 8004330:	460b      	mov	r3, r1
 8004332:	4614      	mov	r4, r2
 8004334:	4618      	mov	r0, r3
 8004336:	4621      	mov	r1, r4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f04f 0400 	mov.w	r4, #0
 800433e:	461a      	mov	r2, r3
 8004340:	4623      	mov	r3, r4
 8004342:	f7fc fbeb 	bl	8000b1c <__aeabi_uldivmod>
 8004346:	4603      	mov	r3, r0
 8004348:	460c      	mov	r4, r1
 800434a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	60bb      	str	r3, [r7, #8]
      break;
 8004366:	e002      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800436a:	60bb      	str	r3, [r7, #8]
      break;
 800436c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436e:	68bb      	ldr	r3, [r7, #8]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000018 	.word	0x20000018

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4601      	mov	r1, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4a03      	ldr	r2, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	080084a4 	.word	0x080084a4

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4601      	mov	r1, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	080084a4 	.word	0x080084a4

080043ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d012      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004414:	4b69      	ldr	r3, [pc, #420]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a68      	ldr	r2, [pc, #416]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800441e:	6093      	str	r3, [r2, #8]
 8004420:	4b66      	ldr	r3, [pc, #408]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	4964      	ldr	r1, [pc, #400]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004446:	4b5d      	ldr	r3, [pc, #372]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800444c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	4959      	ldr	r1, [pc, #356]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d017      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004482:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	494a      	ldr	r1, [pc, #296]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 808b 	beq.w	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d0:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	4a39      	ldr	r2, [pc, #228]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044da:	6413      	str	r3, [r2, #64]	; 0x40
 80044dc:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044e8:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd fd02 	bl	8001efc <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fc:	f7fd fcfe 	bl	8001efc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e355      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800450e:	4b2c      	ldr	r3, [pc, #176]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d035      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d02e      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004540:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004542:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004558:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800455a:	4a18      	ldr	r2, [pc, #96]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d114      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fd fcc6 	bl	8001efc <HAL_GetTick>
 8004570:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004572:	e00a      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f7fd fcc2 	bl	8001efc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e317      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ee      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a2:	d111      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045b2:	400b      	ands	r3, r1
 80045b4:	4901      	ldr	r1, [pc, #4]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
 80045ba:	e00b      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40007000 	.word	0x40007000
 80045c4:	0ffffcff 	.word	0x0ffffcff
 80045c8:	4bb0      	ldr	r3, [pc, #704]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4aaf      	ldr	r2, [pc, #700]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045d2:	6093      	str	r3, [r2, #8]
 80045d4:	4bad      	ldr	r3, [pc, #692]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e0:	49aa      	ldr	r1, [pc, #680]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045f2:	4ba6      	ldr	r3, [pc, #664]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f8:	4aa4      	ldr	r2, [pc, #656]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004602:	4ba2      	ldr	r3, [pc, #648]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004604:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	499f      	ldr	r1, [pc, #636]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004620:	4b9a      	ldr	r3, [pc, #616]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462e:	4997      	ldr	r1, [pc, #604]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004642:	4b92      	ldr	r3, [pc, #584]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004650:	498e      	ldr	r1, [pc, #568]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004664:	4b89      	ldr	r3, [pc, #548]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004672:	4986      	ldr	r1, [pc, #536]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004686:	4b81      	ldr	r3, [pc, #516]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	497d      	ldr	r1, [pc, #500]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a8:	4b78      	ldr	r3, [pc, #480]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	4975      	ldr	r1, [pc, #468]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f023 020c 	bic.w	r2, r3, #12
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d8:	496c      	ldr	r1, [pc, #432]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ec:	4b67      	ldr	r3, [pc, #412]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fa:	4964      	ldr	r1, [pc, #400]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800470e:	4b5f      	ldr	r3, [pc, #380]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	495b      	ldr	r1, [pc, #364]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004730:	4b56      	ldr	r3, [pc, #344]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	4953      	ldr	r1, [pc, #332]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004752:	4b4e      	ldr	r3, [pc, #312]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	494a      	ldr	r1, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004774:	4b45      	ldr	r3, [pc, #276]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	4942      	ldr	r1, [pc, #264]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004796:	4b3d      	ldr	r3, [pc, #244]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	4939      	ldr	r1, [pc, #228]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047b8:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c6:	4931      	ldr	r1, [pc, #196]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d011      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047da:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e8:	4928      	ldr	r1, [pc, #160]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f8:	d101      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004828:	4918      	ldr	r1, [pc, #96]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484c:	490f      	ldr	r1, [pc, #60]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d005      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004862:	f040 80d8 	bne.w	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800486c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fd fb43 	bl	8001efc <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800487a:	f7fd fb3f 	bl	8001efc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d903      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e196      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800488c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004890:	4b6c      	ldr	r3, [pc, #432]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ee      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d021      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11d      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048b0:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048be:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c4:	0e1b      	lsrs	r3, r3, #24
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	019a      	lsls	r2, r3, #6
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	061b      	lsls	r3, r3, #24
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	071b      	lsls	r3, r3, #28
 80048e4:	4957      	ldr	r1, [pc, #348]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02e      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004916:	d129      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004918:	4b4a      	ldr	r3, [pc, #296]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004926:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492c:	0f1b      	lsrs	r3, r3, #28
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	019a      	lsls	r2, r3, #6
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	431a      	orrs	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	071b      	lsls	r3, r3, #28
 800494c:	493d      	ldr	r1, [pc, #244]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004954:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495a:	f023 021f 	bic.w	r2, r3, #31
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	3b01      	subs	r3, #1
 8004964:	4937      	ldr	r1, [pc, #220]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01d      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004978:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497e:	0e1b      	lsrs	r3, r3, #24
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0f1b      	lsrs	r3, r3, #28
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	019a      	lsls	r2, r3, #6
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	071b      	lsls	r3, r3, #28
 80049ac:	4925      	ldr	r1, [pc, #148]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d011      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	019a      	lsls	r2, r3, #6
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	071b      	lsls	r3, r3, #28
 80049dc:	4919      	ldr	r1, [pc, #100]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049e4:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd fa84 	bl	8001efc <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f8:	f7fd fa80 	bl	8001efc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0d7      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 80cd 	bne.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2a:	f7fd fa67 	bl	8001efc <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a32:	f7fd fa63 	bl	8001efc <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b64      	cmp	r3, #100	; 0x64
 8004a3e:	d903      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e0ba      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004a44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a48:	4b5e      	ldr	r3, [pc, #376]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a54:	d0ed      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d02e      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d12a      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a7e:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a8c:	4b4d      	ldr	r3, [pc, #308]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	4944      	ldr	r1, [pc, #272]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	493d      	ldr	r1, [pc, #244]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d022      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae8:	d11d      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	0e1b      	lsrs	r3, r3, #24
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af8:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	0f1b      	lsrs	r3, r3, #28
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	019a      	lsls	r2, r3, #6
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	431a      	orrs	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	4929      	ldr	r1, [pc, #164]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d028      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	019a      	lsls	r2, r3, #6
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	4917      	ldr	r1, [pc, #92]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4911      	ldr	r1, [pc, #68]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b90:	f7fd f9b4 	bl	8001efc <HAL_GetTick>
 8004b94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b98:	f7fd f9b0 	bl	8001efc <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e007      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb6:	d1ef      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e01d      	b.n	8004c16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc ff4a 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 fb1e 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01d      	b.n	8004c6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f815 	bl	8004c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f000 faf3 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fe6c 	bl	8005978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <HAL_TIM_PWM_Start+0x7c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIM_PWM_Start+0x2c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <HAL_TIM_PWM_Start+0x80>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_PWM_Start+0x30>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_TIM_PWM_Start+0x32>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <HAL_TIM_PWM_Start+0x84>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d00b      	beq.n	8004cf8 <HAL_TIM_PWM_Start+0x70>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce6:	d007      	beq.n	8004cf8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	00010007 	.word	0x00010007

08004d10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e07b      	b.n	8004e1c <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fc fec5 	bl	8001ac8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6899      	ldr	r1, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <HAL_TIM_Encoder_Init+0x114>)
 8004d52:	400b      	ands	r3, r1
 8004d54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f000 fa71 	bl	8005248 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <HAL_TIM_Encoder_Init+0x118>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_TIM_Encoder_Init+0x11c>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_TIM_Encoder_Init+0x120>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	011a      	lsls	r2, r3, #4
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	031b      	lsls	r3, r3, #12
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4313      	orrs	r3, r2
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	fffebff8 	.word	0xfffebff8
 8004e28:	fffffcfc 	.word	0xfffffcfc
 8004e2c:	fffff3f3 	.word	0xfffff3f3
 8004e30:	ffff0f0f 	.word	0xffff0f0f

08004e34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_TIM_Encoder_Start+0x16>
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d008      	beq.n	8004e5a <HAL_TIM_Encoder_Start+0x26>
 8004e48:	e00f      	b.n	8004e6a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fd90 	bl	8005978 <TIM_CCxChannelCmd>
      break;
 8004e58:	e016      	b.n	8004e88 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2104      	movs	r1, #4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fd88 	bl	8005978 <TIM_CCxChannelCmd>
      break;
 8004e68:	e00e      	b.n	8004e88 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd80 	bl	8005978 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2104      	movs	r1, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fd79 	bl	8005978 <TIM_CCxChannelCmd>
      break;
 8004e86:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e105      	b.n	80050ca <HAL_TIM_PWM_ConfigChannel+0x226>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b14      	cmp	r3, #20
 8004ed2:	f200 80f0 	bhi.w	80050b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	080050b7 	.word	0x080050b7
 8004ee4:	080050b7 	.word	0x080050b7
 8004ee8:	080050b7 	.word	0x080050b7
 8004eec:	08004f71 	.word	0x08004f71
 8004ef0:	080050b7 	.word	0x080050b7
 8004ef4:	080050b7 	.word	0x080050b7
 8004ef8:	080050b7 	.word	0x080050b7
 8004efc:	08004fb3 	.word	0x08004fb3
 8004f00:	080050b7 	.word	0x080050b7
 8004f04:	080050b7 	.word	0x080050b7
 8004f08:	080050b7 	.word	0x080050b7
 8004f0c:	08004ff3 	.word	0x08004ff3
 8004f10:	080050b7 	.word	0x080050b7
 8004f14:	080050b7 	.word	0x080050b7
 8004f18:	080050b7 	.word	0x080050b7
 8004f1c:	08005035 	.word	0x08005035
 8004f20:	080050b7 	.word	0x080050b7
 8004f24:	080050b7 	.word	0x080050b7
 8004f28:	080050b7 	.word	0x080050b7
 8004f2c:	08005075 	.word	0x08005075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fa26 	bl	8005388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0208 	orr.w	r2, r2, #8
 8004f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0204 	bic.w	r2, r2, #4
 8004f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6999      	ldr	r1, [r3, #24]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	619a      	str	r2, [r3, #24]
      break;
 8004f6e:	e0a3      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fa78 	bl	800546c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6999      	ldr	r1, [r3, #24]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	619a      	str	r2, [r3, #24]
      break;
 8004fb0:	e082      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 facf 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0208 	orr.w	r2, r2, #8
 8004fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0204 	bic.w	r2, r2, #4
 8004fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69d9      	ldr	r1, [r3, #28]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	61da      	str	r2, [r3, #28]
      break;
 8004ff0:	e062      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fb25 	bl	8005648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69d9      	ldr	r1, [r3, #28]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	021a      	lsls	r2, r3, #8
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	61da      	str	r2, [r3, #28]
      break;
 8005032:	e041      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fb5c 	bl	80056f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0208 	orr.w	r2, r2, #8
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0204 	bic.w	r2, r2, #4
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005072:	e021      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fb8e 	bl	800579c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	021a      	lsls	r2, r3, #8
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80050b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop

080050d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_ConfigClockSource+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0a6      	b.n	800523a <HAL_TIM_ConfigClockSource+0x166>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <HAL_TIM_ConfigClockSource+0x170>)
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005112:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d067      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0x120>
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d80b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x6c>
 8005128:	2b10      	cmp	r3, #16
 800512a:	d073      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0x140>
 800512c:	2b10      	cmp	r3, #16
 800512e:	d802      	bhi.n	8005136 <HAL_TIM_ConfigClockSource+0x62>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d06f      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005134:	e078      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005136:	2b20      	cmp	r3, #32
 8005138:	d06c      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0x140>
 800513a:	2b30      	cmp	r3, #48	; 0x30
 800513c:	d06a      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800513e:	e073      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005140:	2b70      	cmp	r3, #112	; 0x70
 8005142:	d00d      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x8c>
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d804      	bhi.n	8005152 <HAL_TIM_ConfigClockSource+0x7e>
 8005148:	2b50      	cmp	r3, #80	; 0x50
 800514a:	d033      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xe0>
 800514c:	2b60      	cmp	r3, #96	; 0x60
 800514e:	d041      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005150:	e06a      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005156:	d066      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x152>
 8005158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515c:	d017      	beq.n	800518e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800515e:	e063      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6899      	ldr	r1, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f000 fbe2 	bl	8005938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005182:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]
      break;
 800518c:	e04c      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f000 fbcb 	bl	8005938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b0:	609a      	str	r2, [r3, #8]
      break;
 80051b2:	e039      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	461a      	mov	r2, r3
 80051c2:	f000 fb3f 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2150      	movs	r1, #80	; 0x50
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fb98 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80051d2:	e029      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	461a      	mov	r2, r3
 80051e2:	f000 fb5e 	bl	80058a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2160      	movs	r1, #96	; 0x60
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fb88 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80051f2:	e019      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	461a      	mov	r2, r3
 8005202:	f000 fb1f 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2140      	movs	r1, #64	; 0x40
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fb78 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8005212:	e009      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fb6f 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8005224:	e000      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	fffeff88 	.word	0xfffeff88

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a40      	ldr	r2, [pc, #256]	; (800535c <TIM_Base_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d00f      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <TIM_Base_SetConfig+0x118>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <TIM_Base_SetConfig+0x120>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3a      	ldr	r2, [pc, #232]	; (800536c <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2f      	ldr	r2, [pc, #188]	; (800535c <TIM_Base_SetConfig+0x114>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d027      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <TIM_Base_SetConfig+0x118>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d023      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <TIM_Base_SetConfig+0x120>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a29      	ldr	r2, [pc, #164]	; (800536c <TIM_Base_SetConfig+0x124>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d017      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a28      	ldr	r2, [pc, #160]	; (8005370 <TIM_Base_SetConfig+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <TIM_Base_SetConfig+0x12c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a26      	ldr	r2, [pc, #152]	; (8005378 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a25      	ldr	r2, [pc, #148]	; (800537c <TIM_Base_SetConfig+0x134>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a24      	ldr	r2, [pc, #144]	; (8005380 <TIM_Base_SetConfig+0x138>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a23      	ldr	r2, [pc, #140]	; (8005384 <TIM_Base_SetConfig+0x13c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <TIM_Base_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TIM_Base_SetConfig+0x124>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	40001800 	.word	0x40001800
 8005380:	40001c00 	.word	0x40001c00
 8005384:	40002000 	.word	0x40002000

08005388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <TIM_OC1_SetConfig+0xd8>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a21      	ldr	r2, [pc, #132]	; (8005464 <TIM_OC1_SetConfig+0xdc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC1_SetConfig+0x64>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a20      	ldr	r2, [pc, #128]	; (8005468 <TIM_OC1_SetConfig+0xe0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a16      	ldr	r2, [pc, #88]	; (8005464 <TIM_OC1_SetConfig+0xdc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC1_SetConfig+0x8e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC1_SetConfig+0xe0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d111      	bne.n	800543a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	fffeff8f 	.word	0xfffeff8f
 8005464:	40010000 	.word	0x40010000
 8005468:	40010400 	.word	0x40010400

0800546c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f023 0210 	bic.w	r2, r3, #16
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <TIM_OC2_SetConfig+0xe4>)
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a23      	ldr	r2, [pc, #140]	; (8005554 <TIM_OC2_SetConfig+0xe8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC2_SetConfig+0x68>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a22      	ldr	r2, [pc, #136]	; (8005558 <TIM_OC2_SetConfig+0xec>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10d      	bne.n	80054f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a18      	ldr	r2, [pc, #96]	; (8005554 <TIM_OC2_SetConfig+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC2_SetConfig+0x94>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <TIM_OC2_SetConfig+0xec>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d113      	bne.n	8005528 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	feff8fff 	.word	0xfeff8fff
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <TIM_OC3_SetConfig+0xe0>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0x66>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <TIM_OC3_SetConfig+0xe8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a17      	ldr	r2, [pc, #92]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC3_SetConfig+0x92>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a16      	ldr	r2, [pc, #88]	; (8005644 <TIM_OC3_SetConfig+0xe8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d113      	bne.n	8005616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	621a      	str	r2, [r3, #32]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	fffeff8f 	.word	0xfffeff8f
 8005640:	40010000 	.word	0x40010000
 8005644:	40010400 	.word	0x40010400

08005648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <TIM_OC4_SetConfig+0xa4>)
 8005674:	4013      	ands	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <TIM_OC4_SetConfig+0xa8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC4_SetConfig+0x68>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <TIM_OC4_SetConfig+0xac>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d109      	bne.n	80056c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	feff8fff 	.word	0xfeff8fff
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400

080056f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <TIM_OC5_SetConfig+0x98>)
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a12      	ldr	r2, [pc, #72]	; (8005794 <TIM_OC5_SetConfig+0x9c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC5_SetConfig+0x5e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a11      	ldr	r2, [pc, #68]	; (8005798 <TIM_OC5_SetConfig+0xa0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d109      	bne.n	800576a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	fffeff8f 	.word	0xfffeff8f
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400

0800579c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <TIM_OC6_SetConfig+0x9c>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <TIM_OC6_SetConfig+0xa0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_OC6_SetConfig+0x60>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a12      	ldr	r2, [pc, #72]	; (8005840 <TIM_OC6_SetConfig+0xa4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d109      	bne.n	8005810 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	029b      	lsls	r3, r3, #10
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	feff8fff 	.word	0xfeff8fff
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0201 	bic.w	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 030a 	bic.w	r3, r3, #10
 8005880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f023 0210 	bic.w	r2, r3, #16
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	f043 0307 	orr.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	431a      	orrs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2201      	movs	r2, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	43db      	mvns	r3, r3
 800599a:	401a      	ands	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e06d      	b.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a30      	ldr	r2, [pc, #192]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d022      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4e:	d01d      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40001800 	.word	0x40001800

08005ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e040      	b.n	8005b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc f8aa 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb02 	bl	8006128 <UART_SetConfig>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e022      	b.n	8005b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fda0 	bl	800667c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fe27 	bl	80067c0 <UART_CheckIdleState>
 8005b72:	4603      	mov	r3, r0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d17f      	bne.n	8005c94 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Transmit+0x24>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e078      	b.n	8005c96 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Transmit+0x36>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e071      	b.n	8005c96 <HAL_UART_Transmit+0x11a>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2221      	movs	r2, #33	; 0x21
 8005bc4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005bc6:	f7fc f999 	bl	8001efc <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be4:	d108      	bne.n	8005bf8 <HAL_UART_Transmit+0x7c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e003      	b.n	8005c00 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c08:	e02c      	b.n	8005c64 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fe02 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e038      	b.n	8005c96 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e007      	b.n	8005c52 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1cc      	bne.n	8005c0a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2140      	movs	r1, #64	; 0x40
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fdcf 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e005      	b.n	8005c96 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d144      	bne.n	8005d40 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_UART_Transmit_IT+0x22>
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e03d      	b.n	8005d42 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Transmit_IT+0x34>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e036      	b.n	8005d42 <HAL_UART_Transmit_IT+0xa2>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	88fa      	ldrh	r2, [r7, #6]
 8005cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2221      	movs	r2, #33	; 0x21
 8005d02:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0c:	d107      	bne.n	8005d1e <HAL_UART_Transmit_IT+0x7e>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a0d      	ldr	r2, [pc, #52]	; (8005d50 <HAL_UART_Transmit_IT+0xb0>)
 8005d1a:	665a      	str	r2, [r3, #100]	; 0x64
 8005d1c:	e002      	b.n	8005d24 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <HAL_UART_Transmit_IT+0xb4>)
 8005d22:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d3a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	080069f3 	.word	0x080069f3
 8005d54:	08006981 	.word	0x08006981

08005d58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	f040 808a 	bne.w	8005e84 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_UART_Receive_IT+0x24>
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e082      	b.n	8005e86 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Receive_IT+0x36>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e07b      	b.n	8005e86 <HAL_UART_Receive_IT+0x12e>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dba:	d10e      	bne.n	8005dda <HAL_UART_Receive_IT+0x82>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_UART_Receive_IT+0x78>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005dca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dce:	e02d      	b.n	8005e2c <HAL_UART_Receive_IT+0xd4>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	22ff      	movs	r2, #255	; 0xff
 8005dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd8:	e028      	b.n	8005e2c <HAL_UART_Receive_IT+0xd4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <HAL_UART_Receive_IT+0xa6>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <HAL_UART_Receive_IT+0x9c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	22ff      	movs	r2, #255	; 0xff
 8005dee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005df2:	e01b      	b.n	8005e2c <HAL_UART_Receive_IT+0xd4>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	227f      	movs	r2, #127	; 0x7f
 8005df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dfc:	e016      	b.n	8005e2c <HAL_UART_Receive_IT+0xd4>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e06:	d10d      	bne.n	8005e24 <HAL_UART_Receive_IT+0xcc>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <HAL_UART_Receive_IT+0xc2>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	227f      	movs	r2, #127	; 0x7f
 8005e14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e18:	e008      	b.n	8005e2c <HAL_UART_Receive_IT+0xd4>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	223f      	movs	r2, #63	; 0x3f
 8005e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e22:	e003      	b.n	8005e2c <HAL_UART_Receive_IT+0xd4>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2222      	movs	r2, #34	; 0x22
 8005e36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d107      	bne.n	8005e62 <HAL_UART_Receive_IT+0x10a>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <HAL_UART_Receive_IT+0x13c>)
 8005e5e:	661a      	str	r2, [r3, #96]	; 0x60
 8005e60:	e002      	b.n	8005e68 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <HAL_UART_Receive_IT+0x140>)
 8005e66:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005e7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e000      	b.n	8005e86 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005e84:	2302      	movs	r3, #2
  }
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	08006b47 	.word	0x08006b47
 8005e98:	08006aa1 	.word	0x08006aa1

08005e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d113      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8100 	beq.w	80060ea <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
      }
      return;
 8005ef2:	e0fa      	b.n	80060ea <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80d5 	beq.w	80060a6 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80ca 	beq.w	80060a6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <HAL_UART_IRQHandler+0x9e>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <HAL_UART_IRQHandler+0xc6>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2202      	movs	r2, #2
 8005f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5a:	f043 0204 	orr.w	r2, r3, #4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <HAL_UART_IRQHandler+0xee>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f82:	f043 0202 	orr.w	r2, r3, #2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d013      	beq.n	8005fbc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb4:	f043 0208 	orr.w	r2, r3, #8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00f      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x14a>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d07f      	beq.n	80060ee <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00c      	beq.n	8006012 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006016:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d004      	beq.n	8006030 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602c:	2b00      	cmp	r3, #0
 800602e:	d031      	beq.n	8006094 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fc6f 	bl	8006914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d123      	bne.n	800608c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006052:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d013      	beq.n	8006084 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006060:	4a26      	ldr	r2, [pc, #152]	; (80060fc <HAL_UART_IRQHandler+0x260>)
 8006062:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006068:	4618      	mov	r0, r3
 800606a:	f7fc f886 	bl	800217a <HAL_DMA_Abort_IT>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d016      	beq.n	80060a2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	e00e      	b.n	80060a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f845 	bl	8006114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608a:	e00a      	b.n	80060a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f841 	bl	8006114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	e006      	b.n	80060a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f83d 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80060a0:	e025      	b.n	80060ee <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a2:	bf00      	nop
    return;
 80060a4:	e023      	b.n	80060ee <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00d      	beq.n	80060cc <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
    }
    return;
 80060ca:	e012      	b.n	80060f2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <HAL_UART_IRQHandler+0x258>
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d009      	beq.n	80060f4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fcc4 	bl	8006a6e <UART_EndTransmit_IT>
    return;
 80060e6:	bf00      	nop
 80060e8:	e004      	b.n	80060f4 <HAL_UART_IRQHandler+0x258>
      return;
 80060ea:	bf00      	nop
 80060ec:	e002      	b.n	80060f4 <HAL_UART_IRQHandler+0x258>
    return;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <HAL_UART_IRQHandler+0x258>
    return;
 80060f2:	bf00      	nop
  }

}
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	08006955 	.word	0x08006955

08006100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006130:	2300      	movs	r3, #0
 8006132:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4bb1      	ldr	r3, [pc, #708]	; (800641c <UART_SetConfig+0x2f4>)
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	6939      	ldr	r1, [r7, #16]
 8006160:	430b      	orrs	r3, r1
 8006162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a9f      	ldr	r2, [pc, #636]	; (8006420 <UART_SetConfig+0x2f8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d121      	bne.n	80061ec <UART_SetConfig+0xc4>
 80061a8:	4b9e      	ldr	r3, [pc, #632]	; (8006424 <UART_SetConfig+0x2fc>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d816      	bhi.n	80061e4 <UART_SetConfig+0xbc>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x94>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061d3 	.word	0x080061d3
 80061c8:	080061df 	.word	0x080061df
 80061cc:	2301      	movs	r3, #1
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e151      	b.n	8006476 <UART_SetConfig+0x34e>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e14e      	b.n	8006476 <UART_SetConfig+0x34e>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e14b      	b.n	8006476 <UART_SetConfig+0x34e>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e148      	b.n	8006476 <UART_SetConfig+0x34e>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	bf00      	nop
 80061ea:	e144      	b.n	8006476 <UART_SetConfig+0x34e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a8d      	ldr	r2, [pc, #564]	; (8006428 <UART_SetConfig+0x300>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d134      	bne.n	8006260 <UART_SetConfig+0x138>
 80061f6:	4b8b      	ldr	r3, [pc, #556]	; (8006424 <UART_SetConfig+0x2fc>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f003 030c 	and.w	r3, r3, #12
 8006200:	2b0c      	cmp	r3, #12
 8006202:	d829      	bhi.n	8006258 <UART_SetConfig+0x130>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0xe4>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006241 	.word	0x08006241
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	0800624d 	.word	0x0800624d
 8006220:	08006259 	.word	0x08006259
 8006224:	08006259 	.word	0x08006259
 8006228:	08006259 	.word	0x08006259
 800622c:	08006247 	.word	0x08006247
 8006230:	08006259 	.word	0x08006259
 8006234:	08006259 	.word	0x08006259
 8006238:	08006259 	.word	0x08006259
 800623c:	08006253 	.word	0x08006253
 8006240:	2300      	movs	r3, #0
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e117      	b.n	8006476 <UART_SetConfig+0x34e>
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e114      	b.n	8006476 <UART_SetConfig+0x34e>
 800624c:	2304      	movs	r3, #4
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e111      	b.n	8006476 <UART_SetConfig+0x34e>
 8006252:	2308      	movs	r3, #8
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e10e      	b.n	8006476 <UART_SetConfig+0x34e>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	bf00      	nop
 800625e:	e10a      	b.n	8006476 <UART_SetConfig+0x34e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a71      	ldr	r2, [pc, #452]	; (800642c <UART_SetConfig+0x304>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d120      	bne.n	80062ac <UART_SetConfig+0x184>
 800626a:	4b6e      	ldr	r3, [pc, #440]	; (8006424 <UART_SetConfig+0x2fc>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006274:	2b10      	cmp	r3, #16
 8006276:	d00f      	beq.n	8006298 <UART_SetConfig+0x170>
 8006278:	2b10      	cmp	r3, #16
 800627a:	d802      	bhi.n	8006282 <UART_SetConfig+0x15a>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <UART_SetConfig+0x164>
 8006280:	e010      	b.n	80062a4 <UART_SetConfig+0x17c>
 8006282:	2b20      	cmp	r3, #32
 8006284:	d005      	beq.n	8006292 <UART_SetConfig+0x16a>
 8006286:	2b30      	cmp	r3, #48	; 0x30
 8006288:	d009      	beq.n	800629e <UART_SetConfig+0x176>
 800628a:	e00b      	b.n	80062a4 <UART_SetConfig+0x17c>
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e0f1      	b.n	8006476 <UART_SetConfig+0x34e>
 8006292:	2302      	movs	r3, #2
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0ee      	b.n	8006476 <UART_SetConfig+0x34e>
 8006298:	2304      	movs	r3, #4
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e0eb      	b.n	8006476 <UART_SetConfig+0x34e>
 800629e:	2308      	movs	r3, #8
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e0e8      	b.n	8006476 <UART_SetConfig+0x34e>
 80062a4:	2310      	movs	r3, #16
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	bf00      	nop
 80062aa:	e0e4      	b.n	8006476 <UART_SetConfig+0x34e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a5f      	ldr	r2, [pc, #380]	; (8006430 <UART_SetConfig+0x308>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d120      	bne.n	80062f8 <UART_SetConfig+0x1d0>
 80062b6:	4b5b      	ldr	r3, [pc, #364]	; (8006424 <UART_SetConfig+0x2fc>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d00f      	beq.n	80062e4 <UART_SetConfig+0x1bc>
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d802      	bhi.n	80062ce <UART_SetConfig+0x1a6>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <UART_SetConfig+0x1b0>
 80062cc:	e010      	b.n	80062f0 <UART_SetConfig+0x1c8>
 80062ce:	2b80      	cmp	r3, #128	; 0x80
 80062d0:	d005      	beq.n	80062de <UART_SetConfig+0x1b6>
 80062d2:	2bc0      	cmp	r3, #192	; 0xc0
 80062d4:	d009      	beq.n	80062ea <UART_SetConfig+0x1c2>
 80062d6:	e00b      	b.n	80062f0 <UART_SetConfig+0x1c8>
 80062d8:	2300      	movs	r3, #0
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e0cb      	b.n	8006476 <UART_SetConfig+0x34e>
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e0c8      	b.n	8006476 <UART_SetConfig+0x34e>
 80062e4:	2304      	movs	r3, #4
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e0c5      	b.n	8006476 <UART_SetConfig+0x34e>
 80062ea:	2308      	movs	r3, #8
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e0c2      	b.n	8006476 <UART_SetConfig+0x34e>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	bf00      	nop
 80062f6:	e0be      	b.n	8006476 <UART_SetConfig+0x34e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a4d      	ldr	r2, [pc, #308]	; (8006434 <UART_SetConfig+0x30c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d124      	bne.n	800634c <UART_SetConfig+0x224>
 8006302:	4b48      	ldr	r3, [pc, #288]	; (8006424 <UART_SetConfig+0x2fc>)
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006310:	d012      	beq.n	8006338 <UART_SetConfig+0x210>
 8006312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006316:	d802      	bhi.n	800631e <UART_SetConfig+0x1f6>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <UART_SetConfig+0x204>
 800631c:	e012      	b.n	8006344 <UART_SetConfig+0x21c>
 800631e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006322:	d006      	beq.n	8006332 <UART_SetConfig+0x20a>
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d009      	beq.n	800633e <UART_SetConfig+0x216>
 800632a:	e00b      	b.n	8006344 <UART_SetConfig+0x21c>
 800632c:	2300      	movs	r3, #0
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e0a1      	b.n	8006476 <UART_SetConfig+0x34e>
 8006332:	2302      	movs	r3, #2
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e09e      	b.n	8006476 <UART_SetConfig+0x34e>
 8006338:	2304      	movs	r3, #4
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e09b      	b.n	8006476 <UART_SetConfig+0x34e>
 800633e:	2308      	movs	r3, #8
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e098      	b.n	8006476 <UART_SetConfig+0x34e>
 8006344:	2310      	movs	r3, #16
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	bf00      	nop
 800634a:	e094      	b.n	8006476 <UART_SetConfig+0x34e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a39      	ldr	r2, [pc, #228]	; (8006438 <UART_SetConfig+0x310>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d124      	bne.n	80063a0 <UART_SetConfig+0x278>
 8006356:	4b33      	ldr	r3, [pc, #204]	; (8006424 <UART_SetConfig+0x2fc>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006364:	d012      	beq.n	800638c <UART_SetConfig+0x264>
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d802      	bhi.n	8006372 <UART_SetConfig+0x24a>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <UART_SetConfig+0x258>
 8006370:	e012      	b.n	8006398 <UART_SetConfig+0x270>
 8006372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006376:	d006      	beq.n	8006386 <UART_SetConfig+0x25e>
 8006378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800637c:	d009      	beq.n	8006392 <UART_SetConfig+0x26a>
 800637e:	e00b      	b.n	8006398 <UART_SetConfig+0x270>
 8006380:	2301      	movs	r3, #1
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e077      	b.n	8006476 <UART_SetConfig+0x34e>
 8006386:	2302      	movs	r3, #2
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e074      	b.n	8006476 <UART_SetConfig+0x34e>
 800638c:	2304      	movs	r3, #4
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e071      	b.n	8006476 <UART_SetConfig+0x34e>
 8006392:	2308      	movs	r3, #8
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e06e      	b.n	8006476 <UART_SetConfig+0x34e>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	bf00      	nop
 800639e:	e06a      	b.n	8006476 <UART_SetConfig+0x34e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a25      	ldr	r2, [pc, #148]	; (800643c <UART_SetConfig+0x314>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d124      	bne.n	80063f4 <UART_SetConfig+0x2cc>
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <UART_SetConfig+0x2fc>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b8:	d012      	beq.n	80063e0 <UART_SetConfig+0x2b8>
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063be:	d802      	bhi.n	80063c6 <UART_SetConfig+0x29e>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <UART_SetConfig+0x2ac>
 80063c4:	e012      	b.n	80063ec <UART_SetConfig+0x2c4>
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ca:	d006      	beq.n	80063da <UART_SetConfig+0x2b2>
 80063cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063d0:	d009      	beq.n	80063e6 <UART_SetConfig+0x2be>
 80063d2:	e00b      	b.n	80063ec <UART_SetConfig+0x2c4>
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e04d      	b.n	8006476 <UART_SetConfig+0x34e>
 80063da:	2302      	movs	r3, #2
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e04a      	b.n	8006476 <UART_SetConfig+0x34e>
 80063e0:	2304      	movs	r3, #4
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e047      	b.n	8006476 <UART_SetConfig+0x34e>
 80063e6:	2308      	movs	r3, #8
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e044      	b.n	8006476 <UART_SetConfig+0x34e>
 80063ec:	2310      	movs	r3, #16
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	bf00      	nop
 80063f2:	e040      	b.n	8006476 <UART_SetConfig+0x34e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a11      	ldr	r2, [pc, #68]	; (8006440 <UART_SetConfig+0x318>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d139      	bne.n	8006472 <UART_SetConfig+0x34a>
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <UART_SetConfig+0x2fc>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640c:	d027      	beq.n	800645e <UART_SetConfig+0x336>
 800640e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006412:	d817      	bhi.n	8006444 <UART_SetConfig+0x31c>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01c      	beq.n	8006452 <UART_SetConfig+0x32a>
 8006418:	e027      	b.n	800646a <UART_SetConfig+0x342>
 800641a:	bf00      	nop
 800641c:	efff69f3 	.word	0xefff69f3
 8006420:	40011000 	.word	0x40011000
 8006424:	40023800 	.word	0x40023800
 8006428:	40004400 	.word	0x40004400
 800642c:	40004800 	.word	0x40004800
 8006430:	40004c00 	.word	0x40004c00
 8006434:	40005000 	.word	0x40005000
 8006438:	40011400 	.word	0x40011400
 800643c:	40007800 	.word	0x40007800
 8006440:	40007c00 	.word	0x40007c00
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006448:	d006      	beq.n	8006458 <UART_SetConfig+0x330>
 800644a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800644e:	d009      	beq.n	8006464 <UART_SetConfig+0x33c>
 8006450:	e00b      	b.n	800646a <UART_SetConfig+0x342>
 8006452:	2300      	movs	r3, #0
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e00e      	b.n	8006476 <UART_SetConfig+0x34e>
 8006458:	2302      	movs	r3, #2
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e00b      	b.n	8006476 <UART_SetConfig+0x34e>
 800645e:	2304      	movs	r3, #4
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e008      	b.n	8006476 <UART_SetConfig+0x34e>
 8006464:	2308      	movs	r3, #8
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e005      	b.n	8006476 <UART_SetConfig+0x34e>
 800646a:	2310      	movs	r3, #16
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	bf00      	nop
 8006470:	e001      	b.n	8006476 <UART_SetConfig+0x34e>
 8006472:	2310      	movs	r3, #16
 8006474:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647e:	d17f      	bne.n	8006580 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006480:	7ffb      	ldrb	r3, [r7, #31]
 8006482:	2b08      	cmp	r3, #8
 8006484:	d85c      	bhi.n	8006540 <UART_SetConfig+0x418>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x364>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064d1 	.word	0x080064d1
 8006494:	080064f1 	.word	0x080064f1
 8006498:	08006541 	.word	0x08006541
 800649c:	08006509 	.word	0x08006509
 80064a0:	08006541 	.word	0x08006541
 80064a4:	08006541 	.word	0x08006541
 80064a8:	08006541 	.word	0x08006541
 80064ac:	08006529 	.word	0x08006529
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fd ff74 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80064b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	005a      	lsls	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	085b      	lsrs	r3, r3, #1
 80064c0:	441a      	add	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	61bb      	str	r3, [r7, #24]
        break;
 80064ce:	e03a      	b.n	8006546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d0:	f7fd ff78 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 80064d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	005a      	lsls	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	61bb      	str	r3, [r7, #24]
        break;
 80064ee:	e02a      	b.n	8006546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	085a      	lsrs	r2, r3, #1
 80064f6:	4b5f      	ldr	r3, [pc, #380]	; (8006674 <UART_SetConfig+0x54c>)
 80064f8:	4413      	add	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6852      	ldr	r2, [r2, #4]
 80064fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	61bb      	str	r3, [r7, #24]
        break;
 8006506:	e01e      	b.n	8006546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006508:	f7fd fe64 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 800650c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	005a      	lsls	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	441a      	add	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	b29b      	uxth	r3, r3
 8006524:	61bb      	str	r3, [r7, #24]
        break;
 8006526:	e00e      	b.n	8006546 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	b29b      	uxth	r3, r3
 800653c:	61bb      	str	r3, [r7, #24]
        break;
 800653e:	e002      	b.n	8006546 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
        break;
 8006544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b0f      	cmp	r3, #15
 800654a:	d916      	bls.n	800657a <UART_SetConfig+0x452>
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006552:	d212      	bcs.n	800657a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f023 030f 	bic.w	r3, r3, #15
 800655c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	b29a      	uxth	r2, r3
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	4313      	orrs	r3, r2
 800656e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	897a      	ldrh	r2, [r7, #10]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	e070      	b.n	800665c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
 800657e:	e06d      	b.n	800665c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006580:	7ffb      	ldrb	r3, [r7, #31]
 8006582:	2b08      	cmp	r3, #8
 8006584:	d859      	bhi.n	800663a <UART_SetConfig+0x512>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <UART_SetConfig+0x464>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065cf 	.word	0x080065cf
 8006594:	080065ed 	.word	0x080065ed
 8006598:	0800663b 	.word	0x0800663b
 800659c:	08006605 	.word	0x08006605
 80065a0:	0800663b 	.word	0x0800663b
 80065a4:	0800663b 	.word	0x0800663b
 80065a8:	0800663b 	.word	0x0800663b
 80065ac:	08006623 	.word	0x08006623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7fd fef4 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80065b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	085a      	lsrs	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	441a      	add	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	61bb      	str	r3, [r7, #24]
        break;
 80065cc:	e038      	b.n	8006640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ce:	f7fd fef9 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 80065d2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	085a      	lsrs	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	441a      	add	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	61bb      	str	r3, [r7, #24]
        break;
 80065ea:	e029      	b.n	8006640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	085a      	lsrs	r2, r3, #1
 80065f2:	4b21      	ldr	r3, [pc, #132]	; (8006678 <UART_SetConfig+0x550>)
 80065f4:	4413      	add	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6852      	ldr	r2, [r2, #4]
 80065fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	61bb      	str	r3, [r7, #24]
        break;
 8006602:	e01d      	b.n	8006640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006604:	f7fd fde6 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8006608:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	085a      	lsrs	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	441a      	add	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	b29b      	uxth	r3, r3
 800661e:	61bb      	str	r3, [r7, #24]
        break;
 8006620:	e00e      	b.n	8006640 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	b29b      	uxth	r3, r3
 8006636:	61bb      	str	r3, [r7, #24]
        break;
 8006638:	e002      	b.n	8006640 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	75fb      	strb	r3, [r7, #23]
        break;
 800663e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	d908      	bls.n	8006658 <UART_SetConfig+0x530>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664c:	d204      	bcs.n	8006658 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	60da      	str	r2, [r3, #12]
 8006656:	e001      	b.n	800665c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	01e84800 	.word	0x01e84800
 8006678:	00f42400 	.word	0x00f42400

0800667c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01a      	beq.n	8006792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d10a      	bne.n	8006792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
  }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80067ce:	f7fb fb95 	bl	8001efc <HAL_GetTick>
 80067d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d10e      	bne.n	8006800 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f814 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e00a      	b.n	8006816 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682e:	e05d      	b.n	80068ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d059      	beq.n	80068ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006838:	f7fb fb60 	bl	8001efc <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <UART_WaitOnFlagUntilTimeout+0x30>
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11b      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800685c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e042      	b.n	800690c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d02b      	beq.n	80068ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a2:	d123      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068ac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e00f      	b.n	800690c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4013      	ands	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	429a      	cmp	r2, r3
 8006908:	d092      	beq.n	8006830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800692a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fbce 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698c:	2b21      	cmp	r3, #33	; 0x21
 800698e:	d12a      	bne.n	80069e6 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d110      	bne.n	80069be <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069aa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80069bc:	e013      	b.n	80069e6 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fe:	2b21      	cmp	r3, #33	; 0x21
 8006a00:	d12f      	bne.n	8006a62 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d110      	bne.n	8006a30 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a1c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a2c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006a2e:	e018      	b.n	8006a62 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a84:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff fb34 	bl	8006100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab4:	2b22      	cmp	r3, #34	; 0x22
 8006ab6:	d13a      	bne.n	8006b2e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ac0:	89bb      	ldrh	r3, [r7, #12]
 8006ac2:	b2d9      	uxtb	r1, r3
 8006ac4:	89fb      	ldrh	r3, [r7, #14]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006acc:	400a      	ands	r2, r1
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d121      	bne.n	8006b3e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b08:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0201 	bic.w	r2, r2, #1
 8006b18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fa fbee 	bl	8001308 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b2c:	e007      	b.n	8006b3e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0208 	orr.w	r2, r2, #8
 8006b3c:	619a      	str	r2, [r3, #24]
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b54:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5a:	2b22      	cmp	r3, #34	; 0x22
 8006b5c:	d13a      	bne.n	8006bd4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b6c:	89ba      	ldrh	r2, [r7, #12]
 8006b6e:	89fb      	ldrh	r3, [r7, #14]
 8006b70:	4013      	ands	r3, r2
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	1c9a      	adds	r2, r3, #2
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d121      	bne.n	8006be4 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fa fb9b 	bl	8001308 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bd2:	e007      	b.n	8006be4 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0208 	orr.w	r2, r2, #8
 8006be2:	619a      	str	r2, [r3, #24]
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d120      	bne.n	8006c46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <USB_CoreInit+0xac>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d105      	bne.n	8006c3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa52 	bl	80070e4 <USB_CoreReset>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	e010      	b.n	8006c68 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa46 	bl	80070e4 <USB_CoreReset>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10b      	bne.n	8006c86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f043 0206 	orr.w	r2, r3, #6
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f043 0220 	orr.w	r2, r3, #32
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c92:	b004      	add	sp, #16
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	ffbdffbf 	.word	0xffbdffbf

08006c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 0201 	bic.w	r2, r3, #1
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d106      	bne.n	8006cea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	e00b      	b.n	8006d02 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d106      	bne.n	8006cfe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	e001      	b.n	8006d02 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e003      	b.n	8006d0a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d02:	2032      	movs	r0, #50	; 0x32
 8006d04:	f7fb f906 	bl	8001f14 <HAL_Delay>

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d14:	b084      	sub	sp, #16
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e009      	b.n	8006d48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	3340      	adds	r3, #64	; 0x40
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3301      	adds	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b0e      	cmp	r3, #14
 8006d4c:	d9f2      	bls.n	8006d34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d11c      	bne.n	8006d8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d62:	f043 0302 	orr.w	r3, r3, #2
 8006d66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e005      	b.n	8006d9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dac:	4619      	mov	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	461a      	mov	r2, r3
 8006db6:	680b      	ldr	r3, [r1, #0]
 8006db8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10c      	bne.n	8006dda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f959 	bl	8007080 <USB_SetDevSpeed>
 8006dce:	e018      	b.n	8006e02 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f954 	bl	8007080 <USB_SetDevSpeed>
 8006dd8:	e013      	b.n	8006e02 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d10c      	bne.n	8006dfa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006de6:	2100      	movs	r1, #0
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f949 	bl	8007080 <USB_SetDevSpeed>
 8006dee:	e008      	b.n	8006e02 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006df0:	2101      	movs	r1, #1
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f944 	bl	8007080 <USB_SetDevSpeed>
 8006df8:	e003      	b.n	8006e02 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dfa:	2103      	movs	r1, #3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f93f 	bl	8007080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e02:	2110      	movs	r1, #16
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f8f3 	bl	8006ff0 <USB_FlushTxFifo>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f911 	bl	800703c <USB_FlushRxFifo>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	461a      	mov	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	e043      	b.n	8006ed6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e64:	d118      	bne.n	8006e98 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	e013      	b.n	8006eaa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	e008      	b.n	8006eaa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2300      	movs	r3, #0
 8006eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d3b7      	bcc.n	8006e4e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	e043      	b.n	8006f6c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efa:	d118      	bne.n	8006f2e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e013      	b.n	8006f40 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	461a      	mov	r2, r3
 8006f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e008      	b.n	8006f40 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d3b7      	bcc.n	8006ee4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f043 0210 	orr.w	r2, r3, #16
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <USB_DevInit+0x2d4>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f043 0208 	orr.w	r2, r3, #8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d105      	bne.n	8006fd8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <USB_DevInit+0x2d8>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe4:	b004      	add	sp, #16
 8006fe6:	4770      	bx	lr
 8006fe8:	803c3800 	.word	0x803c3800
 8006fec:	40000004 	.word	0x40000004

08006ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	019b      	lsls	r3, r3, #6
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a09      	ldr	r2, [pc, #36]	; (8007038 <USB_FlushTxFifo+0x48>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d901      	bls.n	800701c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e006      	b.n	800702a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b20      	cmp	r3, #32
 8007026:	d0f0      	beq.n	800700a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	00030d40 	.word	0x00030d40

0800703c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2210      	movs	r2, #16
 800704c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4a09      	ldr	r2, [pc, #36]	; (800707c <USB_FlushRxFifo+0x40>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d901      	bls.n	8007060 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e006      	b.n	800706e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b10      	cmp	r3, #16
 800706a:	d0f0      	beq.n	800704e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	00030d40 	.word	0x00030d40

08007080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a0:	4313      	orrs	r3, r2
 80070a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070cc:	f043 0302 	orr.w	r3, r3, #2
 80070d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80070d2:	2003      	movs	r0, #3
 80070d4:	f7fa ff1e 	bl	8001f14 <HAL_Delay>

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a13      	ldr	r2, [pc, #76]	; (8007148 <USB_CoreReset+0x64>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e01b      	b.n	800713a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	daf2      	bge.n	80070f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f043 0201 	orr.w	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <USB_CoreReset+0x64>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d901      	bls.n	800712c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e006      	b.n	800713a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d0f0      	beq.n	800711a <USB_CoreReset+0x36>

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	00030d40 	.word	0x00030d40

0800714c <__errno>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <__errno+0x8>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000024 	.word	0x20000024

08007158 <__libc_init_array>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4e0d      	ldr	r6, [pc, #52]	; (8007190 <__libc_init_array+0x38>)
 800715c:	4c0d      	ldr	r4, [pc, #52]	; (8007194 <__libc_init_array+0x3c>)
 800715e:	1ba4      	subs	r4, r4, r6
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	2500      	movs	r5, #0
 8007164:	42a5      	cmp	r5, r4
 8007166:	d109      	bne.n	800717c <__libc_init_array+0x24>
 8007168:	4e0b      	ldr	r6, [pc, #44]	; (8007198 <__libc_init_array+0x40>)
 800716a:	4c0c      	ldr	r4, [pc, #48]	; (800719c <__libc_init_array+0x44>)
 800716c:	f001 f968 	bl	8008440 <_init>
 8007170:	1ba4      	subs	r4, r4, r6
 8007172:	10a4      	asrs	r4, r4, #2
 8007174:	2500      	movs	r5, #0
 8007176:	42a5      	cmp	r5, r4
 8007178:	d105      	bne.n	8007186 <__libc_init_array+0x2e>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007180:	4798      	blx	r3
 8007182:	3501      	adds	r5, #1
 8007184:	e7ee      	b.n	8007164 <__libc_init_array+0xc>
 8007186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800718a:	4798      	blx	r3
 800718c:	3501      	adds	r5, #1
 800718e:	e7f2      	b.n	8007176 <__libc_init_array+0x1e>
 8007190:	08008670 	.word	0x08008670
 8007194:	08008670 	.word	0x08008670
 8007198:	08008670 	.word	0x08008670
 800719c:	08008674 	.word	0x08008674

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <siprintf>:
 80071b0:	b40e      	push	{r1, r2, r3}
 80071b2:	b500      	push	{lr}
 80071b4:	b09c      	sub	sp, #112	; 0x70
 80071b6:	ab1d      	add	r3, sp, #116	; 0x74
 80071b8:	9002      	str	r0, [sp, #8]
 80071ba:	9006      	str	r0, [sp, #24]
 80071bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071c0:	4809      	ldr	r0, [pc, #36]	; (80071e8 <siprintf+0x38>)
 80071c2:	9107      	str	r1, [sp, #28]
 80071c4:	9104      	str	r1, [sp, #16]
 80071c6:	4909      	ldr	r1, [pc, #36]	; (80071ec <siprintf+0x3c>)
 80071c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071cc:	9105      	str	r1, [sp, #20]
 80071ce:	6800      	ldr	r0, [r0, #0]
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	a902      	add	r1, sp, #8
 80071d4:	f000 f996 	bl	8007504 <_svfiprintf_r>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	b01c      	add	sp, #112	; 0x70
 80071e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071e4:	b003      	add	sp, #12
 80071e6:	4770      	bx	lr
 80071e8:	20000024 	.word	0x20000024
 80071ec:	ffff0208 	.word	0xffff0208

080071f0 <siscanf>:
 80071f0:	b40e      	push	{r1, r2, r3}
 80071f2:	b530      	push	{r4, r5, lr}
 80071f4:	b09c      	sub	sp, #112	; 0x70
 80071f6:	ac1f      	add	r4, sp, #124	; 0x7c
 80071f8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80071fc:	f854 5b04 	ldr.w	r5, [r4], #4
 8007200:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007204:	9002      	str	r0, [sp, #8]
 8007206:	9006      	str	r0, [sp, #24]
 8007208:	f7f9 f80c 	bl	8000224 <strlen>
 800720c:	4b0b      	ldr	r3, [pc, #44]	; (800723c <siscanf+0x4c>)
 800720e:	9003      	str	r0, [sp, #12]
 8007210:	9007      	str	r0, [sp, #28]
 8007212:	930b      	str	r3, [sp, #44]	; 0x2c
 8007214:	480a      	ldr	r0, [pc, #40]	; (8007240 <siscanf+0x50>)
 8007216:	9401      	str	r4, [sp, #4]
 8007218:	2300      	movs	r3, #0
 800721a:	930f      	str	r3, [sp, #60]	; 0x3c
 800721c:	9314      	str	r3, [sp, #80]	; 0x50
 800721e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007222:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007226:	462a      	mov	r2, r5
 8007228:	4623      	mov	r3, r4
 800722a:	a902      	add	r1, sp, #8
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f000 fabb 	bl	80077a8 <__ssvfiscanf_r>
 8007232:	b01c      	add	sp, #112	; 0x70
 8007234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007238:	b003      	add	sp, #12
 800723a:	4770      	bx	lr
 800723c:	08007245 	.word	0x08007245
 8007240:	20000024 	.word	0x20000024

08007244 <__seofread>:
 8007244:	2000      	movs	r0, #0
 8007246:	4770      	bx	lr

08007248 <strtok>:
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <strtok+0x50>)
 800724a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724e:	681d      	ldr	r5, [r3, #0]
 8007250:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8007252:	4606      	mov	r6, r0
 8007254:	460f      	mov	r7, r1
 8007256:	b9b4      	cbnz	r4, 8007286 <strtok+0x3e>
 8007258:	2050      	movs	r0, #80	; 0x50
 800725a:	f000 f849 	bl	80072f0 <malloc>
 800725e:	65a8      	str	r0, [r5, #88]	; 0x58
 8007260:	e9c0 4400 	strd	r4, r4, [r0]
 8007264:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007268:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800726c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007270:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007274:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007278:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800727c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007280:	6184      	str	r4, [r0, #24]
 8007282:	7704      	strb	r4, [r0, #28]
 8007284:	6244      	str	r4, [r0, #36]	; 0x24
 8007286:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8007288:	4639      	mov	r1, r7
 800728a:	4630      	mov	r0, r6
 800728c:	2301      	movs	r3, #1
 800728e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	f000 b803 	b.w	800729c <__strtok_r>
 8007296:	bf00      	nop
 8007298:	20000024 	.word	0x20000024

0800729c <__strtok_r>:
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	b918      	cbnz	r0, 80072a8 <__strtok_r+0xc>
 80072a0:	6810      	ldr	r0, [r2, #0]
 80072a2:	b908      	cbnz	r0, 80072a8 <__strtok_r+0xc>
 80072a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a6:	4620      	mov	r0, r4
 80072a8:	4604      	mov	r4, r0
 80072aa:	460f      	mov	r7, r1
 80072ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80072b0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80072b4:	b91e      	cbnz	r6, 80072be <__strtok_r+0x22>
 80072b6:	b96d      	cbnz	r5, 80072d4 <__strtok_r+0x38>
 80072b8:	6015      	str	r5, [r2, #0]
 80072ba:	4628      	mov	r0, r5
 80072bc:	e7f2      	b.n	80072a4 <__strtok_r+0x8>
 80072be:	42b5      	cmp	r5, r6
 80072c0:	d1f6      	bne.n	80072b0 <__strtok_r+0x14>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1ef      	bne.n	80072a6 <__strtok_r+0xa>
 80072c6:	6014      	str	r4, [r2, #0]
 80072c8:	7003      	strb	r3, [r0, #0]
 80072ca:	e7eb      	b.n	80072a4 <__strtok_r+0x8>
 80072cc:	462b      	mov	r3, r5
 80072ce:	e00d      	b.n	80072ec <__strtok_r+0x50>
 80072d0:	b926      	cbnz	r6, 80072dc <__strtok_r+0x40>
 80072d2:	461c      	mov	r4, r3
 80072d4:	4623      	mov	r3, r4
 80072d6:	460f      	mov	r7, r1
 80072d8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80072dc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80072e0:	42b5      	cmp	r5, r6
 80072e2:	d1f5      	bne.n	80072d0 <__strtok_r+0x34>
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	d0f1      	beq.n	80072cc <__strtok_r+0x30>
 80072e8:	2100      	movs	r1, #0
 80072ea:	7021      	strb	r1, [r4, #0]
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e7d9      	b.n	80072a4 <__strtok_r+0x8>

080072f0 <malloc>:
 80072f0:	4b02      	ldr	r3, [pc, #8]	; (80072fc <malloc+0xc>)
 80072f2:	4601      	mov	r1, r0
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	f000 b851 	b.w	800739c <_malloc_r>
 80072fa:	bf00      	nop
 80072fc:	20000024 	.word	0x20000024

08007300 <_free_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4605      	mov	r5, r0
 8007304:	2900      	cmp	r1, #0
 8007306:	d045      	beq.n	8007394 <_free_r+0x94>
 8007308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730c:	1f0c      	subs	r4, r1, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	18e4      	addlt	r4, r4, r3
 8007314:	f001 f856 	bl	80083c4 <__malloc_lock>
 8007318:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <_free_r+0x98>)
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	4610      	mov	r0, r2
 800731e:	b933      	cbnz	r3, 800732e <_free_r+0x2e>
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	6014      	str	r4, [r2, #0]
 8007324:	4628      	mov	r0, r5
 8007326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800732a:	f001 b84c 	b.w	80083c6 <__malloc_unlock>
 800732e:	42a3      	cmp	r3, r4
 8007330:	d90c      	bls.n	800734c <_free_r+0x4c>
 8007332:	6821      	ldr	r1, [r4, #0]
 8007334:	1862      	adds	r2, r4, r1
 8007336:	4293      	cmp	r3, r2
 8007338:	bf04      	itt	eq
 800733a:	681a      	ldreq	r2, [r3, #0]
 800733c:	685b      	ldreq	r3, [r3, #4]
 800733e:	6063      	str	r3, [r4, #4]
 8007340:	bf04      	itt	eq
 8007342:	1852      	addeq	r2, r2, r1
 8007344:	6022      	streq	r2, [r4, #0]
 8007346:	6004      	str	r4, [r0, #0]
 8007348:	e7ec      	b.n	8007324 <_free_r+0x24>
 800734a:	4613      	mov	r3, r2
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	b10a      	cbz	r2, 8007354 <_free_r+0x54>
 8007350:	42a2      	cmp	r2, r4
 8007352:	d9fa      	bls.n	800734a <_free_r+0x4a>
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	1858      	adds	r0, r3, r1
 8007358:	42a0      	cmp	r0, r4
 800735a:	d10b      	bne.n	8007374 <_free_r+0x74>
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	4401      	add	r1, r0
 8007360:	1858      	adds	r0, r3, r1
 8007362:	4282      	cmp	r2, r0
 8007364:	6019      	str	r1, [r3, #0]
 8007366:	d1dd      	bne.n	8007324 <_free_r+0x24>
 8007368:	6810      	ldr	r0, [r2, #0]
 800736a:	6852      	ldr	r2, [r2, #4]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	4401      	add	r1, r0
 8007370:	6019      	str	r1, [r3, #0]
 8007372:	e7d7      	b.n	8007324 <_free_r+0x24>
 8007374:	d902      	bls.n	800737c <_free_r+0x7c>
 8007376:	230c      	movs	r3, #12
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	e7d3      	b.n	8007324 <_free_r+0x24>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	1821      	adds	r1, r4, r0
 8007380:	428a      	cmp	r2, r1
 8007382:	bf04      	itt	eq
 8007384:	6811      	ldreq	r1, [r2, #0]
 8007386:	6852      	ldreq	r2, [r2, #4]
 8007388:	6062      	str	r2, [r4, #4]
 800738a:	bf04      	itt	eq
 800738c:	1809      	addeq	r1, r1, r0
 800738e:	6021      	streq	r1, [r4, #0]
 8007390:	605c      	str	r4, [r3, #4]
 8007392:	e7c7      	b.n	8007324 <_free_r+0x24>
 8007394:	bd38      	pop	{r3, r4, r5, pc}
 8007396:	bf00      	nop
 8007398:	20000224 	.word	0x20000224

0800739c <_malloc_r>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	1ccd      	adds	r5, r1, #3
 80073a0:	f025 0503 	bic.w	r5, r5, #3
 80073a4:	3508      	adds	r5, #8
 80073a6:	2d0c      	cmp	r5, #12
 80073a8:	bf38      	it	cc
 80073aa:	250c      	movcc	r5, #12
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	4606      	mov	r6, r0
 80073b0:	db01      	blt.n	80073b6 <_malloc_r+0x1a>
 80073b2:	42a9      	cmp	r1, r5
 80073b4:	d903      	bls.n	80073be <_malloc_r+0x22>
 80073b6:	230c      	movs	r3, #12
 80073b8:	6033      	str	r3, [r6, #0]
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	f001 f801 	bl	80083c4 <__malloc_lock>
 80073c2:	4a21      	ldr	r2, [pc, #132]	; (8007448 <_malloc_r+0xac>)
 80073c4:	6814      	ldr	r4, [r2, #0]
 80073c6:	4621      	mov	r1, r4
 80073c8:	b991      	cbnz	r1, 80073f0 <_malloc_r+0x54>
 80073ca:	4c20      	ldr	r4, [pc, #128]	; (800744c <_malloc_r+0xb0>)
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	b91b      	cbnz	r3, 80073d8 <_malloc_r+0x3c>
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 fe19 	bl	8008008 <_sbrk_r>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 fe14 	bl	8008008 <_sbrk_r>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d124      	bne.n	800742e <_malloc_r+0x92>
 80073e4:	230c      	movs	r3, #12
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 ffec 	bl	80083c6 <__malloc_unlock>
 80073ee:	e7e4      	b.n	80073ba <_malloc_r+0x1e>
 80073f0:	680b      	ldr	r3, [r1, #0]
 80073f2:	1b5b      	subs	r3, r3, r5
 80073f4:	d418      	bmi.n	8007428 <_malloc_r+0x8c>
 80073f6:	2b0b      	cmp	r3, #11
 80073f8:	d90f      	bls.n	800741a <_malloc_r+0x7e>
 80073fa:	600b      	str	r3, [r1, #0]
 80073fc:	50cd      	str	r5, [r1, r3]
 80073fe:	18cc      	adds	r4, r1, r3
 8007400:	4630      	mov	r0, r6
 8007402:	f000 ffe0 	bl	80083c6 <__malloc_unlock>
 8007406:	f104 000b 	add.w	r0, r4, #11
 800740a:	1d23      	adds	r3, r4, #4
 800740c:	f020 0007 	bic.w	r0, r0, #7
 8007410:	1ac3      	subs	r3, r0, r3
 8007412:	d0d3      	beq.n	80073bc <_malloc_r+0x20>
 8007414:	425a      	negs	r2, r3
 8007416:	50e2      	str	r2, [r4, r3]
 8007418:	e7d0      	b.n	80073bc <_malloc_r+0x20>
 800741a:	428c      	cmp	r4, r1
 800741c:	684b      	ldr	r3, [r1, #4]
 800741e:	bf16      	itet	ne
 8007420:	6063      	strne	r3, [r4, #4]
 8007422:	6013      	streq	r3, [r2, #0]
 8007424:	460c      	movne	r4, r1
 8007426:	e7eb      	b.n	8007400 <_malloc_r+0x64>
 8007428:	460c      	mov	r4, r1
 800742a:	6849      	ldr	r1, [r1, #4]
 800742c:	e7cc      	b.n	80073c8 <_malloc_r+0x2c>
 800742e:	1cc4      	adds	r4, r0, #3
 8007430:	f024 0403 	bic.w	r4, r4, #3
 8007434:	42a0      	cmp	r0, r4
 8007436:	d005      	beq.n	8007444 <_malloc_r+0xa8>
 8007438:	1a21      	subs	r1, r4, r0
 800743a:	4630      	mov	r0, r6
 800743c:	f000 fde4 	bl	8008008 <_sbrk_r>
 8007440:	3001      	adds	r0, #1
 8007442:	d0cf      	beq.n	80073e4 <_malloc_r+0x48>
 8007444:	6025      	str	r5, [r4, #0]
 8007446:	e7db      	b.n	8007400 <_malloc_r+0x64>
 8007448:	20000224 	.word	0x20000224
 800744c:	20000228 	.word	0x20000228

08007450 <__ssputs_r>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	688e      	ldr	r6, [r1, #8]
 8007456:	429e      	cmp	r6, r3
 8007458:	4682      	mov	sl, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4690      	mov	r8, r2
 800745e:	4699      	mov	r9, r3
 8007460:	d837      	bhi.n	80074d2 <__ssputs_r+0x82>
 8007462:	898a      	ldrh	r2, [r1, #12]
 8007464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007468:	d031      	beq.n	80074ce <__ssputs_r+0x7e>
 800746a:	6825      	ldr	r5, [r4, #0]
 800746c:	6909      	ldr	r1, [r1, #16]
 800746e:	1a6f      	subs	r7, r5, r1
 8007470:	6965      	ldr	r5, [r4, #20]
 8007472:	2302      	movs	r3, #2
 8007474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007478:	fb95 f5f3 	sdiv	r5, r5, r3
 800747c:	f109 0301 	add.w	r3, r9, #1
 8007480:	443b      	add	r3, r7
 8007482:	429d      	cmp	r5, r3
 8007484:	bf38      	it	cc
 8007486:	461d      	movcc	r5, r3
 8007488:	0553      	lsls	r3, r2, #21
 800748a:	d530      	bpl.n	80074ee <__ssputs_r+0x9e>
 800748c:	4629      	mov	r1, r5
 800748e:	f7ff ff85 	bl	800739c <_malloc_r>
 8007492:	4606      	mov	r6, r0
 8007494:	b950      	cbnz	r0, 80074ac <__ssputs_r+0x5c>
 8007496:	230c      	movs	r3, #12
 8007498:	f8ca 3000 	str.w	r3, [sl]
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ac:	463a      	mov	r2, r7
 80074ae:	6921      	ldr	r1, [r4, #16]
 80074b0:	f000 ff64 	bl	800837c <memcpy>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	6126      	str	r6, [r4, #16]
 80074c2:	6165      	str	r5, [r4, #20]
 80074c4:	443e      	add	r6, r7
 80074c6:	1bed      	subs	r5, r5, r7
 80074c8:	6026      	str	r6, [r4, #0]
 80074ca:	60a5      	str	r5, [r4, #8]
 80074cc:	464e      	mov	r6, r9
 80074ce:	454e      	cmp	r6, r9
 80074d0:	d900      	bls.n	80074d4 <__ssputs_r+0x84>
 80074d2:	464e      	mov	r6, r9
 80074d4:	4632      	mov	r2, r6
 80074d6:	4641      	mov	r1, r8
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	f000 ff5a 	bl	8008392 <memmove>
 80074de:	68a3      	ldr	r3, [r4, #8]
 80074e0:	1b9b      	subs	r3, r3, r6
 80074e2:	60a3      	str	r3, [r4, #8]
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	441e      	add	r6, r3
 80074e8:	6026      	str	r6, [r4, #0]
 80074ea:	2000      	movs	r0, #0
 80074ec:	e7dc      	b.n	80074a8 <__ssputs_r+0x58>
 80074ee:	462a      	mov	r2, r5
 80074f0:	f000 ff6a 	bl	80083c8 <_realloc_r>
 80074f4:	4606      	mov	r6, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d1e2      	bne.n	80074c0 <__ssputs_r+0x70>
 80074fa:	6921      	ldr	r1, [r4, #16]
 80074fc:	4650      	mov	r0, sl
 80074fe:	f7ff feff 	bl	8007300 <_free_r>
 8007502:	e7c8      	b.n	8007496 <__ssputs_r+0x46>

08007504 <_svfiprintf_r>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	461d      	mov	r5, r3
 800750a:	898b      	ldrh	r3, [r1, #12]
 800750c:	061f      	lsls	r7, r3, #24
 800750e:	b09d      	sub	sp, #116	; 0x74
 8007510:	4680      	mov	r8, r0
 8007512:	460c      	mov	r4, r1
 8007514:	4616      	mov	r6, r2
 8007516:	d50f      	bpl.n	8007538 <_svfiprintf_r+0x34>
 8007518:	690b      	ldr	r3, [r1, #16]
 800751a:	b96b      	cbnz	r3, 8007538 <_svfiprintf_r+0x34>
 800751c:	2140      	movs	r1, #64	; 0x40
 800751e:	f7ff ff3d 	bl	800739c <_malloc_r>
 8007522:	6020      	str	r0, [r4, #0]
 8007524:	6120      	str	r0, [r4, #16]
 8007526:	b928      	cbnz	r0, 8007534 <_svfiprintf_r+0x30>
 8007528:	230c      	movs	r3, #12
 800752a:	f8c8 3000 	str.w	r3, [r8]
 800752e:	f04f 30ff 	mov.w	r0, #4294967295
 8007532:	e0c8      	b.n	80076c6 <_svfiprintf_r+0x1c2>
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	6163      	str	r3, [r4, #20]
 8007538:	2300      	movs	r3, #0
 800753a:	9309      	str	r3, [sp, #36]	; 0x24
 800753c:	2320      	movs	r3, #32
 800753e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007542:	2330      	movs	r3, #48	; 0x30
 8007544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007548:	9503      	str	r5, [sp, #12]
 800754a:	f04f 0b01 	mov.w	fp, #1
 800754e:	4637      	mov	r7, r6
 8007550:	463d      	mov	r5, r7
 8007552:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007556:	b10b      	cbz	r3, 800755c <_svfiprintf_r+0x58>
 8007558:	2b25      	cmp	r3, #37	; 0x25
 800755a:	d13e      	bne.n	80075da <_svfiprintf_r+0xd6>
 800755c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007560:	d00b      	beq.n	800757a <_svfiprintf_r+0x76>
 8007562:	4653      	mov	r3, sl
 8007564:	4632      	mov	r2, r6
 8007566:	4621      	mov	r1, r4
 8007568:	4640      	mov	r0, r8
 800756a:	f7ff ff71 	bl	8007450 <__ssputs_r>
 800756e:	3001      	adds	r0, #1
 8007570:	f000 80a4 	beq.w	80076bc <_svfiprintf_r+0x1b8>
 8007574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007576:	4453      	add	r3, sl
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	783b      	ldrb	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 809d 	beq.w	80076bc <_svfiprintf_r+0x1b8>
 8007582:	2300      	movs	r3, #0
 8007584:	f04f 32ff 	mov.w	r2, #4294967295
 8007588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	9307      	str	r3, [sp, #28]
 8007590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007594:	931a      	str	r3, [sp, #104]	; 0x68
 8007596:	462f      	mov	r7, r5
 8007598:	2205      	movs	r2, #5
 800759a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800759e:	4850      	ldr	r0, [pc, #320]	; (80076e0 <_svfiprintf_r+0x1dc>)
 80075a0:	f7f8 fe4e 	bl	8000240 <memchr>
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	b9d0      	cbnz	r0, 80075de <_svfiprintf_r+0xda>
 80075a8:	06d9      	lsls	r1, r3, #27
 80075aa:	bf44      	itt	mi
 80075ac:	2220      	movmi	r2, #32
 80075ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075b2:	071a      	lsls	r2, r3, #28
 80075b4:	bf44      	itt	mi
 80075b6:	222b      	movmi	r2, #43	; 0x2b
 80075b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075bc:	782a      	ldrb	r2, [r5, #0]
 80075be:	2a2a      	cmp	r2, #42	; 0x2a
 80075c0:	d015      	beq.n	80075ee <_svfiprintf_r+0xea>
 80075c2:	9a07      	ldr	r2, [sp, #28]
 80075c4:	462f      	mov	r7, r5
 80075c6:	2000      	movs	r0, #0
 80075c8:	250a      	movs	r5, #10
 80075ca:	4639      	mov	r1, r7
 80075cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d0:	3b30      	subs	r3, #48	; 0x30
 80075d2:	2b09      	cmp	r3, #9
 80075d4:	d94d      	bls.n	8007672 <_svfiprintf_r+0x16e>
 80075d6:	b1b8      	cbz	r0, 8007608 <_svfiprintf_r+0x104>
 80075d8:	e00f      	b.n	80075fa <_svfiprintf_r+0xf6>
 80075da:	462f      	mov	r7, r5
 80075dc:	e7b8      	b.n	8007550 <_svfiprintf_r+0x4c>
 80075de:	4a40      	ldr	r2, [pc, #256]	; (80076e0 <_svfiprintf_r+0x1dc>)
 80075e0:	1a80      	subs	r0, r0, r2
 80075e2:	fa0b f000 	lsl.w	r0, fp, r0
 80075e6:	4318      	orrs	r0, r3
 80075e8:	9004      	str	r0, [sp, #16]
 80075ea:	463d      	mov	r5, r7
 80075ec:	e7d3      	b.n	8007596 <_svfiprintf_r+0x92>
 80075ee:	9a03      	ldr	r2, [sp, #12]
 80075f0:	1d11      	adds	r1, r2, #4
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	9103      	str	r1, [sp, #12]
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	db01      	blt.n	80075fe <_svfiprintf_r+0xfa>
 80075fa:	9207      	str	r2, [sp, #28]
 80075fc:	e004      	b.n	8007608 <_svfiprintf_r+0x104>
 80075fe:	4252      	negs	r2, r2
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	9207      	str	r2, [sp, #28]
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	783b      	ldrb	r3, [r7, #0]
 800760a:	2b2e      	cmp	r3, #46	; 0x2e
 800760c:	d10c      	bne.n	8007628 <_svfiprintf_r+0x124>
 800760e:	787b      	ldrb	r3, [r7, #1]
 8007610:	2b2a      	cmp	r3, #42	; 0x2a
 8007612:	d133      	bne.n	800767c <_svfiprintf_r+0x178>
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	1d1a      	adds	r2, r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	9203      	str	r2, [sp, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfb8      	it	lt
 8007620:	f04f 33ff 	movlt.w	r3, #4294967295
 8007624:	3702      	adds	r7, #2
 8007626:	9305      	str	r3, [sp, #20]
 8007628:	4d2e      	ldr	r5, [pc, #184]	; (80076e4 <_svfiprintf_r+0x1e0>)
 800762a:	7839      	ldrb	r1, [r7, #0]
 800762c:	2203      	movs	r2, #3
 800762e:	4628      	mov	r0, r5
 8007630:	f7f8 fe06 	bl	8000240 <memchr>
 8007634:	b138      	cbz	r0, 8007646 <_svfiprintf_r+0x142>
 8007636:	2340      	movs	r3, #64	; 0x40
 8007638:	1b40      	subs	r0, r0, r5
 800763a:	fa03 f000 	lsl.w	r0, r3, r0
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	4303      	orrs	r3, r0
 8007642:	3701      	adds	r7, #1
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	7839      	ldrb	r1, [r7, #0]
 8007648:	4827      	ldr	r0, [pc, #156]	; (80076e8 <_svfiprintf_r+0x1e4>)
 800764a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764e:	2206      	movs	r2, #6
 8007650:	1c7e      	adds	r6, r7, #1
 8007652:	f7f8 fdf5 	bl	8000240 <memchr>
 8007656:	2800      	cmp	r0, #0
 8007658:	d038      	beq.n	80076cc <_svfiprintf_r+0x1c8>
 800765a:	4b24      	ldr	r3, [pc, #144]	; (80076ec <_svfiprintf_r+0x1e8>)
 800765c:	bb13      	cbnz	r3, 80076a4 <_svfiprintf_r+0x1a0>
 800765e:	9b03      	ldr	r3, [sp, #12]
 8007660:	3307      	adds	r3, #7
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	3308      	adds	r3, #8
 8007668:	9303      	str	r3, [sp, #12]
 800766a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766c:	444b      	add	r3, r9
 800766e:	9309      	str	r3, [sp, #36]	; 0x24
 8007670:	e76d      	b.n	800754e <_svfiprintf_r+0x4a>
 8007672:	fb05 3202 	mla	r2, r5, r2, r3
 8007676:	2001      	movs	r0, #1
 8007678:	460f      	mov	r7, r1
 800767a:	e7a6      	b.n	80075ca <_svfiprintf_r+0xc6>
 800767c:	2300      	movs	r3, #0
 800767e:	3701      	adds	r7, #1
 8007680:	9305      	str	r3, [sp, #20]
 8007682:	4619      	mov	r1, r3
 8007684:	250a      	movs	r5, #10
 8007686:	4638      	mov	r0, r7
 8007688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800768c:	3a30      	subs	r2, #48	; 0x30
 800768e:	2a09      	cmp	r2, #9
 8007690:	d903      	bls.n	800769a <_svfiprintf_r+0x196>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c8      	beq.n	8007628 <_svfiprintf_r+0x124>
 8007696:	9105      	str	r1, [sp, #20]
 8007698:	e7c6      	b.n	8007628 <_svfiprintf_r+0x124>
 800769a:	fb05 2101 	mla	r1, r5, r1, r2
 800769e:	2301      	movs	r3, #1
 80076a0:	4607      	mov	r7, r0
 80076a2:	e7f0      	b.n	8007686 <_svfiprintf_r+0x182>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4622      	mov	r2, r4
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <_svfiprintf_r+0x1ec>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4640      	mov	r0, r8
 80076b0:	f3af 8000 	nop.w
 80076b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076b8:	4681      	mov	r9, r0
 80076ba:	d1d6      	bne.n	800766a <_svfiprintf_r+0x166>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	065b      	lsls	r3, r3, #25
 80076c0:	f53f af35 	bmi.w	800752e <_svfiprintf_r+0x2a>
 80076c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c6:	b01d      	add	sp, #116	; 0x74
 80076c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4622      	mov	r2, r4
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <_svfiprintf_r+0x1ec>)
 80076d4:	a904      	add	r1, sp, #16
 80076d6:	4640      	mov	r0, r8
 80076d8:	f000 fa2c 	bl	8007b34 <_printf_i>
 80076dc:	e7ea      	b.n	80076b4 <_svfiprintf_r+0x1b0>
 80076de:	bf00      	nop
 80076e0:	080084ac 	.word	0x080084ac
 80076e4:	080084b2 	.word	0x080084b2
 80076e8:	080084b6 	.word	0x080084b6
 80076ec:	00000000 	.word	0x00000000
 80076f0:	08007451 	.word	0x08007451

080076f4 <_sungetc_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	1c4b      	adds	r3, r1, #1
 80076f8:	4614      	mov	r4, r2
 80076fa:	d103      	bne.n	8007704 <_sungetc_r+0x10>
 80076fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007700:	4628      	mov	r0, r5
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	8993      	ldrh	r3, [r2, #12]
 8007706:	f023 0320 	bic.w	r3, r3, #32
 800770a:	8193      	strh	r3, [r2, #12]
 800770c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800770e:	6852      	ldr	r2, [r2, #4]
 8007710:	b2cd      	uxtb	r5, r1
 8007712:	b18b      	cbz	r3, 8007738 <_sungetc_r+0x44>
 8007714:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007716:	4293      	cmp	r3, r2
 8007718:	dd08      	ble.n	800772c <_sungetc_r+0x38>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	6022      	str	r2, [r4, #0]
 8007720:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	3301      	adds	r3, #1
 8007728:	6063      	str	r3, [r4, #4]
 800772a:	e7e9      	b.n	8007700 <_sungetc_r+0xc>
 800772c:	4621      	mov	r1, r4
 800772e:	f000 fdc7 	bl	80082c0 <__submore>
 8007732:	2800      	cmp	r0, #0
 8007734:	d0f1      	beq.n	800771a <_sungetc_r+0x26>
 8007736:	e7e1      	b.n	80076fc <_sungetc_r+0x8>
 8007738:	6921      	ldr	r1, [r4, #16]
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	b151      	cbz	r1, 8007754 <_sungetc_r+0x60>
 800773e:	4299      	cmp	r1, r3
 8007740:	d208      	bcs.n	8007754 <_sungetc_r+0x60>
 8007742:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007746:	42a9      	cmp	r1, r5
 8007748:	d104      	bne.n	8007754 <_sungetc_r+0x60>
 800774a:	3b01      	subs	r3, #1
 800774c:	3201      	adds	r2, #1
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	6062      	str	r2, [r4, #4]
 8007752:	e7d5      	b.n	8007700 <_sungetc_r+0xc>
 8007754:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775c:	6363      	str	r3, [r4, #52]	; 0x34
 800775e:	2303      	movs	r3, #3
 8007760:	63a3      	str	r3, [r4, #56]	; 0x38
 8007762:	4623      	mov	r3, r4
 8007764:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	e7dc      	b.n	8007728 <_sungetc_r+0x34>

0800776e <__ssrefill_r>:
 800776e:	b510      	push	{r4, lr}
 8007770:	460c      	mov	r4, r1
 8007772:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007774:	b169      	cbz	r1, 8007792 <__ssrefill_r+0x24>
 8007776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800777a:	4299      	cmp	r1, r3
 800777c:	d001      	beq.n	8007782 <__ssrefill_r+0x14>
 800777e:	f7ff fdbf 	bl	8007300 <_free_r>
 8007782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	2000      	movs	r0, #0
 8007788:	6360      	str	r0, [r4, #52]	; 0x34
 800778a:	b113      	cbz	r3, 8007792 <__ssrefill_r+0x24>
 800778c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	bd10      	pop	{r4, pc}
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	f043 0320 	orr.w	r3, r3, #32
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295
 80077a6:	e7f3      	b.n	8007790 <__ssrefill_r+0x22>

080077a8 <__ssvfiscanf_r>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80077b0:	460c      	mov	r4, r1
 80077b2:	2100      	movs	r1, #0
 80077b4:	9144      	str	r1, [sp, #272]	; 0x110
 80077b6:	9145      	str	r1, [sp, #276]	; 0x114
 80077b8:	499f      	ldr	r1, [pc, #636]	; (8007a38 <__ssvfiscanf_r+0x290>)
 80077ba:	91a0      	str	r1, [sp, #640]	; 0x280
 80077bc:	f10d 0804 	add.w	r8, sp, #4
 80077c0:	499e      	ldr	r1, [pc, #632]	; (8007a3c <__ssvfiscanf_r+0x294>)
 80077c2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8007a40 <__ssvfiscanf_r+0x298>
 80077c6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80077ca:	4606      	mov	r6, r0
 80077cc:	4692      	mov	sl, r2
 80077ce:	91a1      	str	r1, [sp, #644]	; 0x284
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	270a      	movs	r7, #10
 80077d4:	f89a 3000 	ldrb.w	r3, [sl]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 812a 	beq.w	8007a32 <__ssvfiscanf_r+0x28a>
 80077de:	4655      	mov	r5, sl
 80077e0:	f000 fdac 	bl	800833c <__locale_ctype_ptr>
 80077e4:	f815 bb01 	ldrb.w	fp, [r5], #1
 80077e8:	4458      	add	r0, fp
 80077ea:	7843      	ldrb	r3, [r0, #1]
 80077ec:	f013 0308 	ands.w	r3, r3, #8
 80077f0:	d01c      	beq.n	800782c <__ssvfiscanf_r+0x84>
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dd12      	ble.n	800781e <__ssvfiscanf_r+0x76>
 80077f8:	f000 fda0 	bl	800833c <__locale_ctype_ptr>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	4410      	add	r0, r2
 8007802:	7842      	ldrb	r2, [r0, #1]
 8007804:	0712      	lsls	r2, r2, #28
 8007806:	d401      	bmi.n	800780c <__ssvfiscanf_r+0x64>
 8007808:	46aa      	mov	sl, r5
 800780a:	e7e3      	b.n	80077d4 <__ssvfiscanf_r+0x2c>
 800780c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800780e:	3201      	adds	r2, #1
 8007810:	9245      	str	r2, [sp, #276]	; 0x114
 8007812:	6862      	ldr	r2, [r4, #4]
 8007814:	3301      	adds	r3, #1
 8007816:	3a01      	subs	r2, #1
 8007818:	6062      	str	r2, [r4, #4]
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	e7e9      	b.n	80077f2 <__ssvfiscanf_r+0x4a>
 800781e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007820:	4621      	mov	r1, r4
 8007822:	4630      	mov	r0, r6
 8007824:	4798      	blx	r3
 8007826:	2800      	cmp	r0, #0
 8007828:	d0e6      	beq.n	80077f8 <__ssvfiscanf_r+0x50>
 800782a:	e7ed      	b.n	8007808 <__ssvfiscanf_r+0x60>
 800782c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007830:	f040 8082 	bne.w	8007938 <__ssvfiscanf_r+0x190>
 8007834:	9343      	str	r3, [sp, #268]	; 0x10c
 8007836:	9341      	str	r3, [sp, #260]	; 0x104
 8007838:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800783c:	2b2a      	cmp	r3, #42	; 0x2a
 800783e:	d103      	bne.n	8007848 <__ssvfiscanf_r+0xa0>
 8007840:	2310      	movs	r3, #16
 8007842:	9341      	str	r3, [sp, #260]	; 0x104
 8007844:	f10a 0502 	add.w	r5, sl, #2
 8007848:	46aa      	mov	sl, r5
 800784a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800784e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007852:	2a09      	cmp	r2, #9
 8007854:	d922      	bls.n	800789c <__ssvfiscanf_r+0xf4>
 8007856:	2203      	movs	r2, #3
 8007858:	4879      	ldr	r0, [pc, #484]	; (8007a40 <__ssvfiscanf_r+0x298>)
 800785a:	f7f8 fcf1 	bl	8000240 <memchr>
 800785e:	b138      	cbz	r0, 8007870 <__ssvfiscanf_r+0xc8>
 8007860:	eba0 0309 	sub.w	r3, r0, r9
 8007864:	2001      	movs	r0, #1
 8007866:	4098      	lsls	r0, r3
 8007868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800786a:	4318      	orrs	r0, r3
 800786c:	9041      	str	r0, [sp, #260]	; 0x104
 800786e:	46aa      	mov	sl, r5
 8007870:	f89a 3000 	ldrb.w	r3, [sl]
 8007874:	2b67      	cmp	r3, #103	; 0x67
 8007876:	f10a 0501 	add.w	r5, sl, #1
 800787a:	d82b      	bhi.n	80078d4 <__ssvfiscanf_r+0x12c>
 800787c:	2b65      	cmp	r3, #101	; 0x65
 800787e:	f080 809f 	bcs.w	80079c0 <__ssvfiscanf_r+0x218>
 8007882:	2b47      	cmp	r3, #71	; 0x47
 8007884:	d810      	bhi.n	80078a8 <__ssvfiscanf_r+0x100>
 8007886:	2b45      	cmp	r3, #69	; 0x45
 8007888:	f080 809a 	bcs.w	80079c0 <__ssvfiscanf_r+0x218>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d06c      	beq.n	800796a <__ssvfiscanf_r+0x1c2>
 8007890:	2b25      	cmp	r3, #37	; 0x25
 8007892:	d051      	beq.n	8007938 <__ssvfiscanf_r+0x190>
 8007894:	2303      	movs	r3, #3
 8007896:	9347      	str	r3, [sp, #284]	; 0x11c
 8007898:	9742      	str	r7, [sp, #264]	; 0x108
 800789a:	e027      	b.n	80078ec <__ssvfiscanf_r+0x144>
 800789c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800789e:	fb07 1303 	mla	r3, r7, r3, r1
 80078a2:	3b30      	subs	r3, #48	; 0x30
 80078a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80078a6:	e7cf      	b.n	8007848 <__ssvfiscanf_r+0xa0>
 80078a8:	2b5b      	cmp	r3, #91	; 0x5b
 80078aa:	d06a      	beq.n	8007982 <__ssvfiscanf_r+0x1da>
 80078ac:	d80c      	bhi.n	80078c8 <__ssvfiscanf_r+0x120>
 80078ae:	2b58      	cmp	r3, #88	; 0x58
 80078b0:	d1f0      	bne.n	8007894 <__ssvfiscanf_r+0xec>
 80078b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80078b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b8:	9241      	str	r2, [sp, #260]	; 0x104
 80078ba:	2210      	movs	r2, #16
 80078bc:	9242      	str	r2, [sp, #264]	; 0x108
 80078be:	2b6e      	cmp	r3, #110	; 0x6e
 80078c0:	bf8c      	ite	hi
 80078c2:	2304      	movhi	r3, #4
 80078c4:	2303      	movls	r3, #3
 80078c6:	e010      	b.n	80078ea <__ssvfiscanf_r+0x142>
 80078c8:	2b63      	cmp	r3, #99	; 0x63
 80078ca:	d065      	beq.n	8007998 <__ssvfiscanf_r+0x1f0>
 80078cc:	2b64      	cmp	r3, #100	; 0x64
 80078ce:	d1e1      	bne.n	8007894 <__ssvfiscanf_r+0xec>
 80078d0:	9742      	str	r7, [sp, #264]	; 0x108
 80078d2:	e7f4      	b.n	80078be <__ssvfiscanf_r+0x116>
 80078d4:	2b70      	cmp	r3, #112	; 0x70
 80078d6:	d04b      	beq.n	8007970 <__ssvfiscanf_r+0x1c8>
 80078d8:	d826      	bhi.n	8007928 <__ssvfiscanf_r+0x180>
 80078da:	2b6e      	cmp	r3, #110	; 0x6e
 80078dc:	d062      	beq.n	80079a4 <__ssvfiscanf_r+0x1fc>
 80078de:	d84c      	bhi.n	800797a <__ssvfiscanf_r+0x1d2>
 80078e0:	2b69      	cmp	r3, #105	; 0x69
 80078e2:	d1d7      	bne.n	8007894 <__ssvfiscanf_r+0xec>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9342      	str	r3, [sp, #264]	; 0x108
 80078e8:	2303      	movs	r3, #3
 80078ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd68      	ble.n	80079c4 <__ssvfiscanf_r+0x21c>
 80078f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80078f4:	0659      	lsls	r1, r3, #25
 80078f6:	d407      	bmi.n	8007908 <__ssvfiscanf_r+0x160>
 80078f8:	f000 fd20 	bl	800833c <__locale_ctype_ptr>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	4410      	add	r0, r2
 8007902:	7842      	ldrb	r2, [r0, #1]
 8007904:	0712      	lsls	r2, r2, #28
 8007906:	d464      	bmi.n	80079d2 <__ssvfiscanf_r+0x22a>
 8007908:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800790a:	2b02      	cmp	r3, #2
 800790c:	dc73      	bgt.n	80079f6 <__ssvfiscanf_r+0x24e>
 800790e:	466b      	mov	r3, sp
 8007910:	4622      	mov	r2, r4
 8007912:	a941      	add	r1, sp, #260	; 0x104
 8007914:	4630      	mov	r0, r6
 8007916:	f000 fa1f 	bl	8007d58 <_scanf_chars>
 800791a:	2801      	cmp	r0, #1
 800791c:	f000 8089 	beq.w	8007a32 <__ssvfiscanf_r+0x28a>
 8007920:	2802      	cmp	r0, #2
 8007922:	f47f af71 	bne.w	8007808 <__ssvfiscanf_r+0x60>
 8007926:	e01d      	b.n	8007964 <__ssvfiscanf_r+0x1bc>
 8007928:	2b75      	cmp	r3, #117	; 0x75
 800792a:	d0d1      	beq.n	80078d0 <__ssvfiscanf_r+0x128>
 800792c:	2b78      	cmp	r3, #120	; 0x78
 800792e:	d0c0      	beq.n	80078b2 <__ssvfiscanf_r+0x10a>
 8007930:	2b73      	cmp	r3, #115	; 0x73
 8007932:	d1af      	bne.n	8007894 <__ssvfiscanf_r+0xec>
 8007934:	2302      	movs	r3, #2
 8007936:	e7d8      	b.n	80078ea <__ssvfiscanf_r+0x142>
 8007938:	6863      	ldr	r3, [r4, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dd0c      	ble.n	8007958 <__ssvfiscanf_r+0x1b0>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	455a      	cmp	r2, fp
 8007944:	d175      	bne.n	8007a32 <__ssvfiscanf_r+0x28a>
 8007946:	3301      	adds	r3, #1
 8007948:	6862      	ldr	r2, [r4, #4]
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800794e:	3a01      	subs	r2, #1
 8007950:	3301      	adds	r3, #1
 8007952:	6062      	str	r2, [r4, #4]
 8007954:	9345      	str	r3, [sp, #276]	; 0x114
 8007956:	e757      	b.n	8007808 <__ssvfiscanf_r+0x60>
 8007958:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800795a:	4621      	mov	r1, r4
 800795c:	4630      	mov	r0, r6
 800795e:	4798      	blx	r3
 8007960:	2800      	cmp	r0, #0
 8007962:	d0ec      	beq.n	800793e <__ssvfiscanf_r+0x196>
 8007964:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007966:	2800      	cmp	r0, #0
 8007968:	d159      	bne.n	8007a1e <__ssvfiscanf_r+0x276>
 800796a:	f04f 30ff 	mov.w	r0, #4294967295
 800796e:	e05c      	b.n	8007a2a <__ssvfiscanf_r+0x282>
 8007970:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007972:	f042 0220 	orr.w	r2, r2, #32
 8007976:	9241      	str	r2, [sp, #260]	; 0x104
 8007978:	e79b      	b.n	80078b2 <__ssvfiscanf_r+0x10a>
 800797a:	2308      	movs	r3, #8
 800797c:	9342      	str	r3, [sp, #264]	; 0x108
 800797e:	2304      	movs	r3, #4
 8007980:	e7b3      	b.n	80078ea <__ssvfiscanf_r+0x142>
 8007982:	4629      	mov	r1, r5
 8007984:	4640      	mov	r0, r8
 8007986:	f000 fb4f 	bl	8008028 <__sccl>
 800798a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800798c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007990:	9341      	str	r3, [sp, #260]	; 0x104
 8007992:	4605      	mov	r5, r0
 8007994:	2301      	movs	r3, #1
 8007996:	e7a8      	b.n	80078ea <__ssvfiscanf_r+0x142>
 8007998:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800799a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800799e:	9341      	str	r3, [sp, #260]	; 0x104
 80079a0:	2300      	movs	r3, #0
 80079a2:	e7a2      	b.n	80078ea <__ssvfiscanf_r+0x142>
 80079a4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80079a6:	06c3      	lsls	r3, r0, #27
 80079a8:	f53f af2e 	bmi.w	8007808 <__ssvfiscanf_r+0x60>
 80079ac:	9b00      	ldr	r3, [sp, #0]
 80079ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079b0:	1d19      	adds	r1, r3, #4
 80079b2:	9100      	str	r1, [sp, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	07c0      	lsls	r0, r0, #31
 80079b8:	bf4c      	ite	mi
 80079ba:	801a      	strhmi	r2, [r3, #0]
 80079bc:	601a      	strpl	r2, [r3, #0]
 80079be:	e723      	b.n	8007808 <__ssvfiscanf_r+0x60>
 80079c0:	2305      	movs	r3, #5
 80079c2:	e792      	b.n	80078ea <__ssvfiscanf_r+0x142>
 80079c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079c6:	4621      	mov	r1, r4
 80079c8:	4630      	mov	r0, r6
 80079ca:	4798      	blx	r3
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d090      	beq.n	80078f2 <__ssvfiscanf_r+0x14a>
 80079d0:	e7c8      	b.n	8007964 <__ssvfiscanf_r+0x1bc>
 80079d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079d4:	3201      	adds	r2, #1
 80079d6:	9245      	str	r2, [sp, #276]	; 0x114
 80079d8:	6862      	ldr	r2, [r4, #4]
 80079da:	3a01      	subs	r2, #1
 80079dc:	2a00      	cmp	r2, #0
 80079de:	6062      	str	r2, [r4, #4]
 80079e0:	dd02      	ble.n	80079e8 <__ssvfiscanf_r+0x240>
 80079e2:	3301      	adds	r3, #1
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	e787      	b.n	80078f8 <__ssvfiscanf_r+0x150>
 80079e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079ea:	4621      	mov	r1, r4
 80079ec:	4630      	mov	r0, r6
 80079ee:	4798      	blx	r3
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d081      	beq.n	80078f8 <__ssvfiscanf_r+0x150>
 80079f4:	e7b6      	b.n	8007964 <__ssvfiscanf_r+0x1bc>
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	dc06      	bgt.n	8007a08 <__ssvfiscanf_r+0x260>
 80079fa:	466b      	mov	r3, sp
 80079fc:	4622      	mov	r2, r4
 80079fe:	a941      	add	r1, sp, #260	; 0x104
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 fa0d 	bl	8007e20 <_scanf_i>
 8007a06:	e788      	b.n	800791a <__ssvfiscanf_r+0x172>
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <__ssvfiscanf_r+0x29c>)
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f43f aefc 	beq.w	8007808 <__ssvfiscanf_r+0x60>
 8007a10:	466b      	mov	r3, sp
 8007a12:	4622      	mov	r2, r4
 8007a14:	a941      	add	r1, sp, #260	; 0x104
 8007a16:	4630      	mov	r0, r6
 8007a18:	f3af 8000 	nop.w
 8007a1c:	e77d      	b.n	800791a <__ssvfiscanf_r+0x172>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a24:	bf18      	it	ne
 8007a26:	f04f 30ff 	movne.w	r0, #4294967295
 8007a2a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a34:	e7f9      	b.n	8007a2a <__ssvfiscanf_r+0x282>
 8007a36:	bf00      	nop
 8007a38:	080076f5 	.word	0x080076f5
 8007a3c:	0800776f 	.word	0x0800776f
 8007a40:	080084b2 	.word	0x080084b2
 8007a44:	00000000 	.word	0x00000000

08007a48 <_printf_common>:
 8007a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	4691      	mov	r9, r2
 8007a4e:	461f      	mov	r7, r3
 8007a50:	688a      	ldr	r2, [r1, #8]
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	bfb8      	it	lt
 8007a5c:	4613      	movlt	r3, r2
 8007a5e:	f8c9 3000 	str.w	r3, [r9]
 8007a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a66:	4606      	mov	r6, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	b112      	cbz	r2, 8007a72 <_printf_common+0x2a>
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	f8c9 3000 	str.w	r3, [r9]
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	0699      	lsls	r1, r3, #26
 8007a76:	bf42      	ittt	mi
 8007a78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a7c:	3302      	addmi	r3, #2
 8007a7e:	f8c9 3000 	strmi.w	r3, [r9]
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	f015 0506 	ands.w	r5, r5, #6
 8007a88:	d107      	bne.n	8007a9a <_printf_common+0x52>
 8007a8a:	f104 0a19 	add.w	sl, r4, #25
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	f8d9 2000 	ldr.w	r2, [r9]
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	42ab      	cmp	r3, r5
 8007a98:	dc28      	bgt.n	8007aec <_printf_common+0xa4>
 8007a9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	3300      	adds	r3, #0
 8007aa2:	bf18      	it	ne
 8007aa4:	2301      	movne	r3, #1
 8007aa6:	0692      	lsls	r2, r2, #26
 8007aa8:	d42d      	bmi.n	8007b06 <_printf_common+0xbe>
 8007aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aae:	4639      	mov	r1, r7
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	47c0      	blx	r8
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d020      	beq.n	8007afa <_printf_common+0xb2>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	68e5      	ldr	r5, [r4, #12]
 8007abc:	f8d9 2000 	ldr.w	r2, [r9]
 8007ac0:	f003 0306 	and.w	r3, r3, #6
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	bf08      	it	eq
 8007ac8:	1aad      	subeq	r5, r5, r2
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	bf0c      	ite	eq
 8007ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad4:	2500      	movne	r5, #0
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bfc4      	itt	gt
 8007ada:	1a9b      	subgt	r3, r3, r2
 8007adc:	18ed      	addgt	r5, r5, r3
 8007ade:	f04f 0900 	mov.w	r9, #0
 8007ae2:	341a      	adds	r4, #26
 8007ae4:	454d      	cmp	r5, r9
 8007ae6:	d11a      	bne.n	8007b1e <_printf_common+0xd6>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e008      	b.n	8007afe <_printf_common+0xb6>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4652      	mov	r2, sl
 8007af0:	4639      	mov	r1, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	47c0      	blx	r8
 8007af6:	3001      	adds	r0, #1
 8007af8:	d103      	bne.n	8007b02 <_printf_common+0xba>
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	3501      	adds	r5, #1
 8007b04:	e7c3      	b.n	8007a8e <_printf_common+0x46>
 8007b06:	18e1      	adds	r1, r4, r3
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	2030      	movs	r0, #48	; 0x30
 8007b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b10:	4422      	add	r2, r4
 8007b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	e7c5      	b.n	8007aaa <_printf_common+0x62>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4622      	mov	r2, r4
 8007b22:	4639      	mov	r1, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	47c0      	blx	r8
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d0e6      	beq.n	8007afa <_printf_common+0xb2>
 8007b2c:	f109 0901 	add.w	r9, r9, #1
 8007b30:	e7d8      	b.n	8007ae4 <_printf_common+0x9c>
	...

08007b34 <_printf_i>:
 8007b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	7e09      	ldrb	r1, [r1, #24]
 8007b40:	b085      	sub	sp, #20
 8007b42:	296e      	cmp	r1, #110	; 0x6e
 8007b44:	4617      	mov	r7, r2
 8007b46:	4606      	mov	r6, r0
 8007b48:	4698      	mov	r8, r3
 8007b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4c:	f000 80b3 	beq.w	8007cb6 <_printf_i+0x182>
 8007b50:	d822      	bhi.n	8007b98 <_printf_i+0x64>
 8007b52:	2963      	cmp	r1, #99	; 0x63
 8007b54:	d036      	beq.n	8007bc4 <_printf_i+0x90>
 8007b56:	d80a      	bhi.n	8007b6e <_printf_i+0x3a>
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	f000 80b9 	beq.w	8007cd0 <_printf_i+0x19c>
 8007b5e:	2958      	cmp	r1, #88	; 0x58
 8007b60:	f000 8083 	beq.w	8007c6a <_printf_i+0x136>
 8007b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b6c:	e032      	b.n	8007bd4 <_printf_i+0xa0>
 8007b6e:	2964      	cmp	r1, #100	; 0x64
 8007b70:	d001      	beq.n	8007b76 <_printf_i+0x42>
 8007b72:	2969      	cmp	r1, #105	; 0x69
 8007b74:	d1f6      	bne.n	8007b64 <_printf_i+0x30>
 8007b76:	6820      	ldr	r0, [r4, #0]
 8007b78:	6813      	ldr	r3, [r2, #0]
 8007b7a:	0605      	lsls	r5, r0, #24
 8007b7c:	f103 0104 	add.w	r1, r3, #4
 8007b80:	d52a      	bpl.n	8007bd8 <_printf_i+0xa4>
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6011      	str	r1, [r2, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da03      	bge.n	8007b92 <_printf_i+0x5e>
 8007b8a:	222d      	movs	r2, #45	; 0x2d
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b92:	486f      	ldr	r0, [pc, #444]	; (8007d50 <_printf_i+0x21c>)
 8007b94:	220a      	movs	r2, #10
 8007b96:	e039      	b.n	8007c0c <_printf_i+0xd8>
 8007b98:	2973      	cmp	r1, #115	; 0x73
 8007b9a:	f000 809d 	beq.w	8007cd8 <_printf_i+0x1a4>
 8007b9e:	d808      	bhi.n	8007bb2 <_printf_i+0x7e>
 8007ba0:	296f      	cmp	r1, #111	; 0x6f
 8007ba2:	d020      	beq.n	8007be6 <_printf_i+0xb2>
 8007ba4:	2970      	cmp	r1, #112	; 0x70
 8007ba6:	d1dd      	bne.n	8007b64 <_printf_i+0x30>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	f043 0320 	orr.w	r3, r3, #32
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	e003      	b.n	8007bba <_printf_i+0x86>
 8007bb2:	2975      	cmp	r1, #117	; 0x75
 8007bb4:	d017      	beq.n	8007be6 <_printf_i+0xb2>
 8007bb6:	2978      	cmp	r1, #120	; 0x78
 8007bb8:	d1d4      	bne.n	8007b64 <_printf_i+0x30>
 8007bba:	2378      	movs	r3, #120	; 0x78
 8007bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bc0:	4864      	ldr	r0, [pc, #400]	; (8007d54 <_printf_i+0x220>)
 8007bc2:	e055      	b.n	8007c70 <_printf_i+0x13c>
 8007bc4:	6813      	ldr	r3, [r2, #0]
 8007bc6:	1d19      	adds	r1, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6011      	str	r1, [r2, #0]
 8007bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e08c      	b.n	8007cf2 <_printf_i+0x1be>
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6011      	str	r1, [r2, #0]
 8007bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007be0:	bf18      	it	ne
 8007be2:	b21b      	sxthne	r3, r3
 8007be4:	e7cf      	b.n	8007b86 <_printf_i+0x52>
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	1d18      	adds	r0, r3, #4
 8007bec:	6010      	str	r0, [r2, #0]
 8007bee:	0628      	lsls	r0, r5, #24
 8007bf0:	d501      	bpl.n	8007bf6 <_printf_i+0xc2>
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	e002      	b.n	8007bfc <_printf_i+0xc8>
 8007bf6:	0668      	lsls	r0, r5, #25
 8007bf8:	d5fb      	bpl.n	8007bf2 <_printf_i+0xbe>
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	4854      	ldr	r0, [pc, #336]	; (8007d50 <_printf_i+0x21c>)
 8007bfe:	296f      	cmp	r1, #111	; 0x6f
 8007c00:	bf14      	ite	ne
 8007c02:	220a      	movne	r2, #10
 8007c04:	2208      	moveq	r2, #8
 8007c06:	2100      	movs	r1, #0
 8007c08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c0c:	6865      	ldr	r5, [r4, #4]
 8007c0e:	60a5      	str	r5, [r4, #8]
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	f2c0 8095 	blt.w	8007d40 <_printf_i+0x20c>
 8007c16:	6821      	ldr	r1, [r4, #0]
 8007c18:	f021 0104 	bic.w	r1, r1, #4
 8007c1c:	6021      	str	r1, [r4, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d13d      	bne.n	8007c9e <_printf_i+0x16a>
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	f040 808e 	bne.w	8007d44 <_printf_i+0x210>
 8007c28:	4665      	mov	r5, ip
 8007c2a:	2a08      	cmp	r2, #8
 8007c2c:	d10b      	bne.n	8007c46 <_printf_i+0x112>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	07db      	lsls	r3, r3, #31
 8007c32:	d508      	bpl.n	8007c46 <_printf_i+0x112>
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	6862      	ldr	r2, [r4, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	bfde      	ittt	le
 8007c3c:	2330      	movle	r3, #48	; 0x30
 8007c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c46:	ebac 0305 	sub.w	r3, ip, r5
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	f8cd 8000 	str.w	r8, [sp]
 8007c50:	463b      	mov	r3, r7
 8007c52:	aa03      	add	r2, sp, #12
 8007c54:	4621      	mov	r1, r4
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff fef6 	bl	8007a48 <_printf_common>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d14d      	bne.n	8007cfc <_printf_i+0x1c8>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b005      	add	sp, #20
 8007c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	4839      	ldr	r0, [pc, #228]	; (8007d50 <_printf_i+0x21c>)
 8007c6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c70:	6813      	ldr	r3, [r2, #0]
 8007c72:	6821      	ldr	r1, [r4, #0]
 8007c74:	1d1d      	adds	r5, r3, #4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6015      	str	r5, [r2, #0]
 8007c7a:	060a      	lsls	r2, r1, #24
 8007c7c:	d50b      	bpl.n	8007c96 <_printf_i+0x162>
 8007c7e:	07ca      	lsls	r2, r1, #31
 8007c80:	bf44      	itt	mi
 8007c82:	f041 0120 	orrmi.w	r1, r1, #32
 8007c86:	6021      	strmi	r1, [r4, #0]
 8007c88:	b91b      	cbnz	r3, 8007c92 <_printf_i+0x15e>
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	f022 0220 	bic.w	r2, r2, #32
 8007c90:	6022      	str	r2, [r4, #0]
 8007c92:	2210      	movs	r2, #16
 8007c94:	e7b7      	b.n	8007c06 <_printf_i+0xd2>
 8007c96:	064d      	lsls	r5, r1, #25
 8007c98:	bf48      	it	mi
 8007c9a:	b29b      	uxthmi	r3, r3
 8007c9c:	e7ef      	b.n	8007c7e <_printf_i+0x14a>
 8007c9e:	4665      	mov	r5, ip
 8007ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ca4:	fb02 3311 	mls	r3, r2, r1, r3
 8007ca8:	5cc3      	ldrb	r3, [r0, r3]
 8007caa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cae:	460b      	mov	r3, r1
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	d1f5      	bne.n	8007ca0 <_printf_i+0x16c>
 8007cb4:	e7b9      	b.n	8007c2a <_printf_i+0xf6>
 8007cb6:	6813      	ldr	r3, [r2, #0]
 8007cb8:	6825      	ldr	r5, [r4, #0]
 8007cba:	6961      	ldr	r1, [r4, #20]
 8007cbc:	1d18      	adds	r0, r3, #4
 8007cbe:	6010      	str	r0, [r2, #0]
 8007cc0:	0628      	lsls	r0, r5, #24
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	d501      	bpl.n	8007cca <_printf_i+0x196>
 8007cc6:	6019      	str	r1, [r3, #0]
 8007cc8:	e002      	b.n	8007cd0 <_printf_i+0x19c>
 8007cca:	066a      	lsls	r2, r5, #25
 8007ccc:	d5fb      	bpl.n	8007cc6 <_printf_i+0x192>
 8007cce:	8019      	strh	r1, [r3, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6123      	str	r3, [r4, #16]
 8007cd4:	4665      	mov	r5, ip
 8007cd6:	e7b9      	b.n	8007c4c <_printf_i+0x118>
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	1d19      	adds	r1, r3, #4
 8007cdc:	6011      	str	r1, [r2, #0]
 8007cde:	681d      	ldr	r5, [r3, #0]
 8007ce0:	6862      	ldr	r2, [r4, #4]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7f8 faab 	bl	8000240 <memchr>
 8007cea:	b108      	cbz	r0, 8007cf0 <_printf_i+0x1bc>
 8007cec:	1b40      	subs	r0, r0, r5
 8007cee:	6060      	str	r0, [r4, #4]
 8007cf0:	6863      	ldr	r3, [r4, #4]
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfa:	e7a7      	b.n	8007c4c <_printf_i+0x118>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4639      	mov	r1, r7
 8007d02:	4630      	mov	r0, r6
 8007d04:	47c0      	blx	r8
 8007d06:	3001      	adds	r0, #1
 8007d08:	d0aa      	beq.n	8007c60 <_printf_i+0x12c>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	079b      	lsls	r3, r3, #30
 8007d0e:	d413      	bmi.n	8007d38 <_printf_i+0x204>
 8007d10:	68e0      	ldr	r0, [r4, #12]
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	4298      	cmp	r0, r3
 8007d16:	bfb8      	it	lt
 8007d18:	4618      	movlt	r0, r3
 8007d1a:	e7a3      	b.n	8007c64 <_printf_i+0x130>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	464a      	mov	r2, r9
 8007d20:	4639      	mov	r1, r7
 8007d22:	4630      	mov	r0, r6
 8007d24:	47c0      	blx	r8
 8007d26:	3001      	adds	r0, #1
 8007d28:	d09a      	beq.n	8007c60 <_printf_i+0x12c>
 8007d2a:	3501      	adds	r5, #1
 8007d2c:	68e3      	ldr	r3, [r4, #12]
 8007d2e:	9a03      	ldr	r2, [sp, #12]
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	42ab      	cmp	r3, r5
 8007d34:	dcf2      	bgt.n	8007d1c <_printf_i+0x1e8>
 8007d36:	e7eb      	b.n	8007d10 <_printf_i+0x1dc>
 8007d38:	2500      	movs	r5, #0
 8007d3a:	f104 0919 	add.w	r9, r4, #25
 8007d3e:	e7f5      	b.n	8007d2c <_printf_i+0x1f8>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1ac      	bne.n	8007c9e <_printf_i+0x16a>
 8007d44:	7803      	ldrb	r3, [r0, #0]
 8007d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d4e:	e76c      	b.n	8007c2a <_printf_i+0xf6>
 8007d50:	080084bd 	.word	0x080084bd
 8007d54:	080084ce 	.word	0x080084ce

08007d58 <_scanf_chars>:
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	4615      	mov	r5, r2
 8007d5e:	688a      	ldr	r2, [r1, #8]
 8007d60:	4680      	mov	r8, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	b932      	cbnz	r2, 8007d74 <_scanf_chars+0x1c>
 8007d66:	698a      	ldr	r2, [r1, #24]
 8007d68:	2a00      	cmp	r2, #0
 8007d6a:	bf14      	ite	ne
 8007d6c:	f04f 32ff 	movne.w	r2, #4294967295
 8007d70:	2201      	moveq	r2, #1
 8007d72:	608a      	str	r2, [r1, #8]
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	06d1      	lsls	r1, r2, #27
 8007d78:	bf5f      	itttt	pl
 8007d7a:	681a      	ldrpl	r2, [r3, #0]
 8007d7c:	1d11      	addpl	r1, r2, #4
 8007d7e:	6019      	strpl	r1, [r3, #0]
 8007d80:	6817      	ldrpl	r7, [r2, #0]
 8007d82:	2600      	movs	r6, #0
 8007d84:	69a3      	ldr	r3, [r4, #24]
 8007d86:	b1db      	cbz	r3, 8007dc0 <_scanf_chars+0x68>
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <_scanf_chars+0x44>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	6962      	ldr	r2, [r4, #20]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	5cd3      	ldrb	r3, [r2, r3]
 8007d94:	b9a3      	cbnz	r3, 8007dc0 <_scanf_chars+0x68>
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	d132      	bne.n	8007e00 <_scanf_chars+0xa8>
 8007d9a:	e006      	b.n	8007daa <_scanf_chars+0x52>
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d007      	beq.n	8007db0 <_scanf_chars+0x58>
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	d12d      	bne.n	8007e00 <_scanf_chars+0xa8>
 8007da4:	69a3      	ldr	r3, [r4, #24]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d12a      	bne.n	8007e00 <_scanf_chars+0xa8>
 8007daa:	2001      	movs	r0, #1
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	f000 fac4 	bl	800833c <__locale_ctype_ptr>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4418      	add	r0, r3
 8007dba:	7843      	ldrb	r3, [r0, #1]
 8007dbc:	071b      	lsls	r3, r3, #28
 8007dbe:	d4ef      	bmi.n	8007da0 <_scanf_chars+0x48>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	06da      	lsls	r2, r3, #27
 8007dc4:	bf5e      	ittt	pl
 8007dc6:	682b      	ldrpl	r3, [r5, #0]
 8007dc8:	781b      	ldrbpl	r3, [r3, #0]
 8007dca:	703b      	strbpl	r3, [r7, #0]
 8007dcc:	682a      	ldr	r2, [r5, #0]
 8007dce:	686b      	ldr	r3, [r5, #4]
 8007dd0:	f102 0201 	add.w	r2, r2, #1
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	68a2      	ldr	r2, [r4, #8]
 8007dd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ddc:	f102 32ff 	add.w	r2, r2, #4294967295
 8007de0:	606b      	str	r3, [r5, #4]
 8007de2:	f106 0601 	add.w	r6, r6, #1
 8007de6:	bf58      	it	pl
 8007de8:	3701      	addpl	r7, #1
 8007dea:	60a2      	str	r2, [r4, #8]
 8007dec:	b142      	cbz	r2, 8007e00 <_scanf_chars+0xa8>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	dcc8      	bgt.n	8007d84 <_scanf_chars+0x2c>
 8007df2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007df6:	4629      	mov	r1, r5
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4798      	blx	r3
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d0c1      	beq.n	8007d84 <_scanf_chars+0x2c>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	f013 0310 	ands.w	r3, r3, #16
 8007e06:	d105      	bne.n	8007e14 <_scanf_chars+0xbc>
 8007e08:	68e2      	ldr	r2, [r4, #12]
 8007e0a:	3201      	adds	r2, #1
 8007e0c:	60e2      	str	r2, [r4, #12]
 8007e0e:	69a2      	ldr	r2, [r4, #24]
 8007e10:	b102      	cbz	r2, 8007e14 <_scanf_chars+0xbc>
 8007e12:	703b      	strb	r3, [r7, #0]
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	441e      	add	r6, r3
 8007e18:	6126      	str	r6, [r4, #16]
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e7c6      	b.n	8007dac <_scanf_chars+0x54>
	...

08007e20 <_scanf_i>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	469a      	mov	sl, r3
 8007e26:	4b74      	ldr	r3, [pc, #464]	; (8007ff8 <_scanf_i+0x1d8>)
 8007e28:	460c      	mov	r4, r1
 8007e2a:	4683      	mov	fp, r0
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e32:	b087      	sub	sp, #28
 8007e34:	ab03      	add	r3, sp, #12
 8007e36:	68a7      	ldr	r7, [r4, #8]
 8007e38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007e3c:	4b6f      	ldr	r3, [pc, #444]	; (8007ffc <_scanf_i+0x1dc>)
 8007e3e:	69a1      	ldr	r1, [r4, #24]
 8007e40:	4a6f      	ldr	r2, [pc, #444]	; (8008000 <_scanf_i+0x1e0>)
 8007e42:	2903      	cmp	r1, #3
 8007e44:	bf08      	it	eq
 8007e46:	461a      	moveq	r2, r3
 8007e48:	1e7b      	subs	r3, r7, #1
 8007e4a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007e4e:	bf84      	itt	hi
 8007e50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e54:	60a3      	strhi	r3, [r4, #8]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	9200      	str	r2, [sp, #0]
 8007e5a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007e5e:	bf88      	it	hi
 8007e60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e64:	f104 091c 	add.w	r9, r4, #28
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bf8c      	ite	hi
 8007e6c:	197f      	addhi	r7, r7, r5
 8007e6e:	2700      	movls	r7, #0
 8007e70:	464b      	mov	r3, r9
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	6831      	ldr	r1, [r6, #0]
 8007e7a:	ab03      	add	r3, sp, #12
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007e82:	7809      	ldrb	r1, [r1, #0]
 8007e84:	f7f8 f9dc 	bl	8000240 <memchr>
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	b330      	cbz	r0, 8007eda <_scanf_i+0xba>
 8007e8c:	f1b8 0f01 	cmp.w	r8, #1
 8007e90:	d15a      	bne.n	8007f48 <_scanf_i+0x128>
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	b92a      	cbnz	r2, 8007ea2 <_scanf_i+0x82>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	2108      	movs	r1, #8
 8007e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e9e:	6061      	str	r1, [r4, #4]
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	68a2      	ldr	r2, [r4, #8]
 8007eac:	1e51      	subs	r1, r2, #1
 8007eae:	60a1      	str	r1, [r4, #8]
 8007eb0:	b19a      	cbz	r2, 8007eda <_scanf_i+0xba>
 8007eb2:	6832      	ldr	r2, [r6, #0]
 8007eb4:	1c51      	adds	r1, r2, #1
 8007eb6:	6031      	str	r1, [r6, #0]
 8007eb8:	7812      	ldrb	r2, [r2, #0]
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	1c5d      	adds	r5, r3, #1
 8007ebe:	6873      	ldr	r3, [r6, #4]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	6073      	str	r3, [r6, #4]
 8007ec6:	dc07      	bgt.n	8007ed8 <_scanf_i+0xb8>
 8007ec8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4658      	mov	r0, fp
 8007ed0:	4798      	blx	r3
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f040 8086 	bne.w	8007fe4 <_scanf_i+0x1c4>
 8007ed8:	462b      	mov	r3, r5
 8007eda:	f108 0801 	add.w	r8, r8, #1
 8007ede:	f1b8 0f03 	cmp.w	r8, #3
 8007ee2:	d1c8      	bne.n	8007e76 <_scanf_i+0x56>
 8007ee4:	6862      	ldr	r2, [r4, #4]
 8007ee6:	b90a      	cbnz	r2, 8007eec <_scanf_i+0xcc>
 8007ee8:	220a      	movs	r2, #10
 8007eea:	6062      	str	r2, [r4, #4]
 8007eec:	6862      	ldr	r2, [r4, #4]
 8007eee:	4945      	ldr	r1, [pc, #276]	; (8008004 <_scanf_i+0x1e4>)
 8007ef0:	6960      	ldr	r0, [r4, #20]
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	1a89      	subs	r1, r1, r2
 8007ef6:	f000 f897 	bl	8008028 <__sccl>
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	f04f 0800 	mov.w	r8, #0
 8007f00:	461d      	mov	r5, r3
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	6822      	ldr	r2, [r4, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d03a      	beq.n	8007f80 <_scanf_i+0x160>
 8007f0a:	6831      	ldr	r1, [r6, #0]
 8007f0c:	6960      	ldr	r0, [r4, #20]
 8007f0e:	f891 c000 	ldrb.w	ip, [r1]
 8007f12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d032      	beq.n	8007f80 <_scanf_i+0x160>
 8007f1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007f1e:	d121      	bne.n	8007f64 <_scanf_i+0x144>
 8007f20:	0510      	lsls	r0, r2, #20
 8007f22:	d51f      	bpl.n	8007f64 <_scanf_i+0x144>
 8007f24:	f108 0801 	add.w	r8, r8, #1
 8007f28:	b117      	cbz	r7, 8007f30 <_scanf_i+0x110>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	3f01      	subs	r7, #1
 8007f2e:	60a3      	str	r3, [r4, #8]
 8007f30:	6873      	ldr	r3, [r6, #4]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	6073      	str	r3, [r6, #4]
 8007f38:	dd1b      	ble.n	8007f72 <_scanf_i+0x152>
 8007f3a:	6833      	ldr	r3, [r6, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	6033      	str	r3, [r6, #0]
 8007f40:	68a3      	ldr	r3, [r4, #8]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	60a3      	str	r3, [r4, #8]
 8007f46:	e7dc      	b.n	8007f02 <_scanf_i+0xe2>
 8007f48:	f1b8 0f02 	cmp.w	r8, #2
 8007f4c:	d1ad      	bne.n	8007eaa <_scanf_i+0x8a>
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007f54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007f58:	d1bf      	bne.n	8007eda <_scanf_i+0xba>
 8007f5a:	2110      	movs	r1, #16
 8007f5c:	6061      	str	r1, [r4, #4]
 8007f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f62:	e7a1      	b.n	8007ea8 <_scanf_i+0x88>
 8007f64:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	780b      	ldrb	r3, [r1, #0]
 8007f6c:	702b      	strb	r3, [r5, #0]
 8007f6e:	3501      	adds	r5, #1
 8007f70:	e7de      	b.n	8007f30 <_scanf_i+0x110>
 8007f72:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f76:	4631      	mov	r1, r6
 8007f78:	4658      	mov	r0, fp
 8007f7a:	4798      	blx	r3
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d0df      	beq.n	8007f40 <_scanf_i+0x120>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	05d9      	lsls	r1, r3, #23
 8007f84:	d50c      	bpl.n	8007fa0 <_scanf_i+0x180>
 8007f86:	454d      	cmp	r5, r9
 8007f88:	d908      	bls.n	8007f9c <_scanf_i+0x17c>
 8007f8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f92:	4632      	mov	r2, r6
 8007f94:	4658      	mov	r0, fp
 8007f96:	4798      	blx	r3
 8007f98:	1e6f      	subs	r7, r5, #1
 8007f9a:	463d      	mov	r5, r7
 8007f9c:	454d      	cmp	r5, r9
 8007f9e:	d029      	beq.n	8007ff4 <_scanf_i+0x1d4>
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	f012 0210 	ands.w	r2, r2, #16
 8007fa6:	d113      	bne.n	8007fd0 <_scanf_i+0x1b0>
 8007fa8:	702a      	strb	r2, [r5, #0]
 8007faa:	6863      	ldr	r3, [r4, #4]
 8007fac:	9e00      	ldr	r6, [sp, #0]
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4658      	mov	r0, fp
 8007fb2:	47b0      	blx	r6
 8007fb4:	f8da 3000 	ldr.w	r3, [sl]
 8007fb8:	6821      	ldr	r1, [r4, #0]
 8007fba:	1d1a      	adds	r2, r3, #4
 8007fbc:	f8ca 2000 	str.w	r2, [sl]
 8007fc0:	f011 0f20 	tst.w	r1, #32
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	d010      	beq.n	8007fea <_scanf_i+0x1ca>
 8007fc8:	6018      	str	r0, [r3, #0]
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60e3      	str	r3, [r4, #12]
 8007fd0:	eba5 0509 	sub.w	r5, r5, r9
 8007fd4:	44a8      	add	r8, r5
 8007fd6:	6925      	ldr	r5, [r4, #16]
 8007fd8:	4445      	add	r5, r8
 8007fda:	6125      	str	r5, [r4, #16]
 8007fdc:	2000      	movs	r0, #0
 8007fde:	b007      	add	sp, #28
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	f04f 0800 	mov.w	r8, #0
 8007fe8:	e7ca      	b.n	8007f80 <_scanf_i+0x160>
 8007fea:	07ca      	lsls	r2, r1, #31
 8007fec:	bf4c      	ite	mi
 8007fee:	8018      	strhmi	r0, [r3, #0]
 8007ff0:	6018      	strpl	r0, [r3, #0]
 8007ff2:	e7ea      	b.n	8007fca <_scanf_i+0x1aa>
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	e7f2      	b.n	8007fde <_scanf_i+0x1be>
 8007ff8:	08008488 	.word	0x08008488
 8007ffc:	08008185 	.word	0x08008185
 8008000:	0800829d 	.word	0x0800829d
 8008004:	080084ef 	.word	0x080084ef

08008008 <_sbrk_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4c06      	ldr	r4, [pc, #24]	; (8008024 <_sbrk_r+0x1c>)
 800800c:	2300      	movs	r3, #0
 800800e:	4605      	mov	r5, r0
 8008010:	4608      	mov	r0, r1
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	f7f9 fc08 	bl	8001828 <_sbrk>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_sbrk_r+0x1a>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	b103      	cbz	r3, 8008022 <_sbrk_r+0x1a>
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	200007e4 	.word	0x200007e4

08008028 <__sccl>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	780b      	ldrb	r3, [r1, #0]
 800802c:	2b5e      	cmp	r3, #94	; 0x5e
 800802e:	bf13      	iteet	ne
 8008030:	1c4a      	addne	r2, r1, #1
 8008032:	1c8a      	addeq	r2, r1, #2
 8008034:	784b      	ldrbeq	r3, [r1, #1]
 8008036:	2100      	movne	r1, #0
 8008038:	bf08      	it	eq
 800803a:	2101      	moveq	r1, #1
 800803c:	1e44      	subs	r4, r0, #1
 800803e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008042:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008046:	42ac      	cmp	r4, r5
 8008048:	d1fb      	bne.n	8008042 <__sccl+0x1a>
 800804a:	b913      	cbnz	r3, 8008052 <__sccl+0x2a>
 800804c:	3a01      	subs	r2, #1
 800804e:	4610      	mov	r0, r2
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	f081 0401 	eor.w	r4, r1, #1
 8008056:	54c4      	strb	r4, [r0, r3]
 8008058:	1c51      	adds	r1, r2, #1
 800805a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800805e:	2d2d      	cmp	r5, #45	; 0x2d
 8008060:	f101 36ff 	add.w	r6, r1, #4294967295
 8008064:	460a      	mov	r2, r1
 8008066:	d006      	beq.n	8008076 <__sccl+0x4e>
 8008068:	2d5d      	cmp	r5, #93	; 0x5d
 800806a:	d0f0      	beq.n	800804e <__sccl+0x26>
 800806c:	b90d      	cbnz	r5, 8008072 <__sccl+0x4a>
 800806e:	4632      	mov	r2, r6
 8008070:	e7ed      	b.n	800804e <__sccl+0x26>
 8008072:	462b      	mov	r3, r5
 8008074:	e7ef      	b.n	8008056 <__sccl+0x2e>
 8008076:	780e      	ldrb	r6, [r1, #0]
 8008078:	2e5d      	cmp	r6, #93	; 0x5d
 800807a:	d0fa      	beq.n	8008072 <__sccl+0x4a>
 800807c:	42b3      	cmp	r3, r6
 800807e:	dcf8      	bgt.n	8008072 <__sccl+0x4a>
 8008080:	3301      	adds	r3, #1
 8008082:	429e      	cmp	r6, r3
 8008084:	54c4      	strb	r4, [r0, r3]
 8008086:	dcfb      	bgt.n	8008080 <__sccl+0x58>
 8008088:	3102      	adds	r1, #2
 800808a:	e7e6      	b.n	800805a <__sccl+0x32>

0800808c <_strtol_l.isra.0>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	4680      	mov	r8, r0
 8008092:	4689      	mov	r9, r1
 8008094:	4692      	mov	sl, r2
 8008096:	461e      	mov	r6, r3
 8008098:	460f      	mov	r7, r1
 800809a:	463d      	mov	r5, r7
 800809c:	9808      	ldr	r0, [sp, #32]
 800809e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080a2:	f000 f947 	bl	8008334 <__locale_ctype_ptr_l>
 80080a6:	4420      	add	r0, r4
 80080a8:	7843      	ldrb	r3, [r0, #1]
 80080aa:	f013 0308 	ands.w	r3, r3, #8
 80080ae:	d132      	bne.n	8008116 <_strtol_l.isra.0+0x8a>
 80080b0:	2c2d      	cmp	r4, #45	; 0x2d
 80080b2:	d132      	bne.n	800811a <_strtol_l.isra.0+0x8e>
 80080b4:	787c      	ldrb	r4, [r7, #1]
 80080b6:	1cbd      	adds	r5, r7, #2
 80080b8:	2201      	movs	r2, #1
 80080ba:	2e00      	cmp	r6, #0
 80080bc:	d05d      	beq.n	800817a <_strtol_l.isra.0+0xee>
 80080be:	2e10      	cmp	r6, #16
 80080c0:	d109      	bne.n	80080d6 <_strtol_l.isra.0+0x4a>
 80080c2:	2c30      	cmp	r4, #48	; 0x30
 80080c4:	d107      	bne.n	80080d6 <_strtol_l.isra.0+0x4a>
 80080c6:	782b      	ldrb	r3, [r5, #0]
 80080c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080cc:	2b58      	cmp	r3, #88	; 0x58
 80080ce:	d14f      	bne.n	8008170 <_strtol_l.isra.0+0xe4>
 80080d0:	786c      	ldrb	r4, [r5, #1]
 80080d2:	2610      	movs	r6, #16
 80080d4:	3502      	adds	r5, #2
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	bf14      	ite	ne
 80080da:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80080de:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80080e2:	2700      	movs	r7, #0
 80080e4:	fbb1 fcf6 	udiv	ip, r1, r6
 80080e8:	4638      	mov	r0, r7
 80080ea:	fb06 1e1c 	mls	lr, r6, ip, r1
 80080ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80080f2:	2b09      	cmp	r3, #9
 80080f4:	d817      	bhi.n	8008126 <_strtol_l.isra.0+0x9a>
 80080f6:	461c      	mov	r4, r3
 80080f8:	42a6      	cmp	r6, r4
 80080fa:	dd23      	ble.n	8008144 <_strtol_l.isra.0+0xb8>
 80080fc:	1c7b      	adds	r3, r7, #1
 80080fe:	d007      	beq.n	8008110 <_strtol_l.isra.0+0x84>
 8008100:	4584      	cmp	ip, r0
 8008102:	d31c      	bcc.n	800813e <_strtol_l.isra.0+0xb2>
 8008104:	d101      	bne.n	800810a <_strtol_l.isra.0+0x7e>
 8008106:	45a6      	cmp	lr, r4
 8008108:	db19      	blt.n	800813e <_strtol_l.isra.0+0xb2>
 800810a:	fb00 4006 	mla	r0, r0, r6, r4
 800810e:	2701      	movs	r7, #1
 8008110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008114:	e7eb      	b.n	80080ee <_strtol_l.isra.0+0x62>
 8008116:	462f      	mov	r7, r5
 8008118:	e7bf      	b.n	800809a <_strtol_l.isra.0+0xe>
 800811a:	2c2b      	cmp	r4, #43	; 0x2b
 800811c:	bf04      	itt	eq
 800811e:	1cbd      	addeq	r5, r7, #2
 8008120:	787c      	ldrbeq	r4, [r7, #1]
 8008122:	461a      	mov	r2, r3
 8008124:	e7c9      	b.n	80080ba <_strtol_l.isra.0+0x2e>
 8008126:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800812a:	2b19      	cmp	r3, #25
 800812c:	d801      	bhi.n	8008132 <_strtol_l.isra.0+0xa6>
 800812e:	3c37      	subs	r4, #55	; 0x37
 8008130:	e7e2      	b.n	80080f8 <_strtol_l.isra.0+0x6c>
 8008132:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008136:	2b19      	cmp	r3, #25
 8008138:	d804      	bhi.n	8008144 <_strtol_l.isra.0+0xb8>
 800813a:	3c57      	subs	r4, #87	; 0x57
 800813c:	e7dc      	b.n	80080f8 <_strtol_l.isra.0+0x6c>
 800813e:	f04f 37ff 	mov.w	r7, #4294967295
 8008142:	e7e5      	b.n	8008110 <_strtol_l.isra.0+0x84>
 8008144:	1c7b      	adds	r3, r7, #1
 8008146:	d108      	bne.n	800815a <_strtol_l.isra.0+0xce>
 8008148:	2322      	movs	r3, #34	; 0x22
 800814a:	f8c8 3000 	str.w	r3, [r8]
 800814e:	4608      	mov	r0, r1
 8008150:	f1ba 0f00 	cmp.w	sl, #0
 8008154:	d107      	bne.n	8008166 <_strtol_l.isra.0+0xda>
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	b102      	cbz	r2, 800815e <_strtol_l.isra.0+0xd2>
 800815c:	4240      	negs	r0, r0
 800815e:	f1ba 0f00 	cmp.w	sl, #0
 8008162:	d0f8      	beq.n	8008156 <_strtol_l.isra.0+0xca>
 8008164:	b10f      	cbz	r7, 800816a <_strtol_l.isra.0+0xde>
 8008166:	f105 39ff 	add.w	r9, r5, #4294967295
 800816a:	f8ca 9000 	str.w	r9, [sl]
 800816e:	e7f2      	b.n	8008156 <_strtol_l.isra.0+0xca>
 8008170:	2430      	movs	r4, #48	; 0x30
 8008172:	2e00      	cmp	r6, #0
 8008174:	d1af      	bne.n	80080d6 <_strtol_l.isra.0+0x4a>
 8008176:	2608      	movs	r6, #8
 8008178:	e7ad      	b.n	80080d6 <_strtol_l.isra.0+0x4a>
 800817a:	2c30      	cmp	r4, #48	; 0x30
 800817c:	d0a3      	beq.n	80080c6 <_strtol_l.isra.0+0x3a>
 800817e:	260a      	movs	r6, #10
 8008180:	e7a9      	b.n	80080d6 <_strtol_l.isra.0+0x4a>
	...

08008184 <_strtol_r>:
 8008184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008186:	4c06      	ldr	r4, [pc, #24]	; (80081a0 <_strtol_r+0x1c>)
 8008188:	4d06      	ldr	r5, [pc, #24]	; (80081a4 <_strtol_r+0x20>)
 800818a:	6824      	ldr	r4, [r4, #0]
 800818c:	6a24      	ldr	r4, [r4, #32]
 800818e:	2c00      	cmp	r4, #0
 8008190:	bf08      	it	eq
 8008192:	462c      	moveq	r4, r5
 8008194:	9400      	str	r4, [sp, #0]
 8008196:	f7ff ff79 	bl	800808c <_strtol_l.isra.0>
 800819a:	b003      	add	sp, #12
 800819c:	bd30      	pop	{r4, r5, pc}
 800819e:	bf00      	nop
 80081a0:	20000024 	.word	0x20000024
 80081a4:	20000088 	.word	0x20000088

080081a8 <_strtoul_l.isra.0>:
 80081a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ac:	4680      	mov	r8, r0
 80081ae:	4689      	mov	r9, r1
 80081b0:	4692      	mov	sl, r2
 80081b2:	461e      	mov	r6, r3
 80081b4:	460f      	mov	r7, r1
 80081b6:	463d      	mov	r5, r7
 80081b8:	9808      	ldr	r0, [sp, #32]
 80081ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081be:	f000 f8b9 	bl	8008334 <__locale_ctype_ptr_l>
 80081c2:	4420      	add	r0, r4
 80081c4:	7843      	ldrb	r3, [r0, #1]
 80081c6:	f013 0308 	ands.w	r3, r3, #8
 80081ca:	d130      	bne.n	800822e <_strtoul_l.isra.0+0x86>
 80081cc:	2c2d      	cmp	r4, #45	; 0x2d
 80081ce:	d130      	bne.n	8008232 <_strtoul_l.isra.0+0x8a>
 80081d0:	787c      	ldrb	r4, [r7, #1]
 80081d2:	1cbd      	adds	r5, r7, #2
 80081d4:	2101      	movs	r1, #1
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	d05c      	beq.n	8008294 <_strtoul_l.isra.0+0xec>
 80081da:	2e10      	cmp	r6, #16
 80081dc:	d109      	bne.n	80081f2 <_strtoul_l.isra.0+0x4a>
 80081de:	2c30      	cmp	r4, #48	; 0x30
 80081e0:	d107      	bne.n	80081f2 <_strtoul_l.isra.0+0x4a>
 80081e2:	782b      	ldrb	r3, [r5, #0]
 80081e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081e8:	2b58      	cmp	r3, #88	; 0x58
 80081ea:	d14e      	bne.n	800828a <_strtoul_l.isra.0+0xe2>
 80081ec:	786c      	ldrb	r4, [r5, #1]
 80081ee:	2610      	movs	r6, #16
 80081f0:	3502      	adds	r5, #2
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	2300      	movs	r3, #0
 80081f8:	fbb2 f2f6 	udiv	r2, r2, r6
 80081fc:	fb06 fc02 	mul.w	ip, r6, r2
 8008200:	ea6f 0c0c 	mvn.w	ip, ip
 8008204:	4618      	mov	r0, r3
 8008206:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800820a:	2f09      	cmp	r7, #9
 800820c:	d817      	bhi.n	800823e <_strtoul_l.isra.0+0x96>
 800820e:	463c      	mov	r4, r7
 8008210:	42a6      	cmp	r6, r4
 8008212:	dd23      	ble.n	800825c <_strtoul_l.isra.0+0xb4>
 8008214:	2b00      	cmp	r3, #0
 8008216:	db1e      	blt.n	8008256 <_strtoul_l.isra.0+0xae>
 8008218:	4282      	cmp	r2, r0
 800821a:	d31c      	bcc.n	8008256 <_strtoul_l.isra.0+0xae>
 800821c:	d101      	bne.n	8008222 <_strtoul_l.isra.0+0x7a>
 800821e:	45a4      	cmp	ip, r4
 8008220:	db19      	blt.n	8008256 <_strtoul_l.isra.0+0xae>
 8008222:	fb00 4006 	mla	r0, r0, r6, r4
 8008226:	2301      	movs	r3, #1
 8008228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800822c:	e7eb      	b.n	8008206 <_strtoul_l.isra.0+0x5e>
 800822e:	462f      	mov	r7, r5
 8008230:	e7c1      	b.n	80081b6 <_strtoul_l.isra.0+0xe>
 8008232:	2c2b      	cmp	r4, #43	; 0x2b
 8008234:	bf04      	itt	eq
 8008236:	1cbd      	addeq	r5, r7, #2
 8008238:	787c      	ldrbeq	r4, [r7, #1]
 800823a:	4619      	mov	r1, r3
 800823c:	e7cb      	b.n	80081d6 <_strtoul_l.isra.0+0x2e>
 800823e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008242:	2f19      	cmp	r7, #25
 8008244:	d801      	bhi.n	800824a <_strtoul_l.isra.0+0xa2>
 8008246:	3c37      	subs	r4, #55	; 0x37
 8008248:	e7e2      	b.n	8008210 <_strtoul_l.isra.0+0x68>
 800824a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800824e:	2f19      	cmp	r7, #25
 8008250:	d804      	bhi.n	800825c <_strtoul_l.isra.0+0xb4>
 8008252:	3c57      	subs	r4, #87	; 0x57
 8008254:	e7dc      	b.n	8008210 <_strtoul_l.isra.0+0x68>
 8008256:	f04f 33ff 	mov.w	r3, #4294967295
 800825a:	e7e5      	b.n	8008228 <_strtoul_l.isra.0+0x80>
 800825c:	2b00      	cmp	r3, #0
 800825e:	da09      	bge.n	8008274 <_strtoul_l.isra.0+0xcc>
 8008260:	2322      	movs	r3, #34	; 0x22
 8008262:	f8c8 3000 	str.w	r3, [r8]
 8008266:	f04f 30ff 	mov.w	r0, #4294967295
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	d107      	bne.n	8008280 <_strtoul_l.isra.0+0xd8>
 8008270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008274:	b101      	cbz	r1, 8008278 <_strtoul_l.isra.0+0xd0>
 8008276:	4240      	negs	r0, r0
 8008278:	f1ba 0f00 	cmp.w	sl, #0
 800827c:	d0f8      	beq.n	8008270 <_strtoul_l.isra.0+0xc8>
 800827e:	b10b      	cbz	r3, 8008284 <_strtoul_l.isra.0+0xdc>
 8008280:	f105 39ff 	add.w	r9, r5, #4294967295
 8008284:	f8ca 9000 	str.w	r9, [sl]
 8008288:	e7f2      	b.n	8008270 <_strtoul_l.isra.0+0xc8>
 800828a:	2430      	movs	r4, #48	; 0x30
 800828c:	2e00      	cmp	r6, #0
 800828e:	d1b0      	bne.n	80081f2 <_strtoul_l.isra.0+0x4a>
 8008290:	2608      	movs	r6, #8
 8008292:	e7ae      	b.n	80081f2 <_strtoul_l.isra.0+0x4a>
 8008294:	2c30      	cmp	r4, #48	; 0x30
 8008296:	d0a4      	beq.n	80081e2 <_strtoul_l.isra.0+0x3a>
 8008298:	260a      	movs	r6, #10
 800829a:	e7aa      	b.n	80081f2 <_strtoul_l.isra.0+0x4a>

0800829c <_strtoul_r>:
 800829c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800829e:	4c06      	ldr	r4, [pc, #24]	; (80082b8 <_strtoul_r+0x1c>)
 80082a0:	4d06      	ldr	r5, [pc, #24]	; (80082bc <_strtoul_r+0x20>)
 80082a2:	6824      	ldr	r4, [r4, #0]
 80082a4:	6a24      	ldr	r4, [r4, #32]
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	bf08      	it	eq
 80082aa:	462c      	moveq	r4, r5
 80082ac:	9400      	str	r4, [sp, #0]
 80082ae:	f7ff ff7b 	bl	80081a8 <_strtoul_l.isra.0>
 80082b2:	b003      	add	sp, #12
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	bf00      	nop
 80082b8:	20000024 	.word	0x20000024
 80082bc:	20000088 	.word	0x20000088

080082c0 <__submore>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	460c      	mov	r4, r1
 80082c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80082c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082cc:	4299      	cmp	r1, r3
 80082ce:	d11d      	bne.n	800830c <__submore+0x4c>
 80082d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082d4:	f7ff f862 	bl	800739c <_malloc_r>
 80082d8:	b918      	cbnz	r0, 80082e2 <__submore+0x22>
 80082da:	f04f 30ff 	mov.w	r0, #4294967295
 80082de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80082e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80082ec:	6360      	str	r0, [r4, #52]	; 0x34
 80082ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80082f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80082fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80082fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008302:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008306:	6020      	str	r0, [r4, #0]
 8008308:	2000      	movs	r0, #0
 800830a:	e7e8      	b.n	80082de <__submore+0x1e>
 800830c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800830e:	0077      	lsls	r7, r6, #1
 8008310:	463a      	mov	r2, r7
 8008312:	f000 f859 	bl	80083c8 <_realloc_r>
 8008316:	4605      	mov	r5, r0
 8008318:	2800      	cmp	r0, #0
 800831a:	d0de      	beq.n	80082da <__submore+0x1a>
 800831c:	eb00 0806 	add.w	r8, r0, r6
 8008320:	4601      	mov	r1, r0
 8008322:	4632      	mov	r2, r6
 8008324:	4640      	mov	r0, r8
 8008326:	f000 f829 	bl	800837c <memcpy>
 800832a:	f8c4 8000 	str.w	r8, [r4]
 800832e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008332:	e7e9      	b.n	8008308 <__submore+0x48>

08008334 <__locale_ctype_ptr_l>:
 8008334:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008338:	4770      	bx	lr
	...

0800833c <__locale_ctype_ptr>:
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <__locale_ctype_ptr+0x14>)
 800833e:	4a05      	ldr	r2, [pc, #20]	; (8008354 <__locale_ctype_ptr+0x18>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf08      	it	eq
 8008348:	4613      	moveq	r3, r2
 800834a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800834e:	4770      	bx	lr
 8008350:	20000024 	.word	0x20000024
 8008354:	20000088 	.word	0x20000088

08008358 <__ascii_mbtowc>:
 8008358:	b082      	sub	sp, #8
 800835a:	b901      	cbnz	r1, 800835e <__ascii_mbtowc+0x6>
 800835c:	a901      	add	r1, sp, #4
 800835e:	b142      	cbz	r2, 8008372 <__ascii_mbtowc+0x1a>
 8008360:	b14b      	cbz	r3, 8008376 <__ascii_mbtowc+0x1e>
 8008362:	7813      	ldrb	r3, [r2, #0]
 8008364:	600b      	str	r3, [r1, #0]
 8008366:	7812      	ldrb	r2, [r2, #0]
 8008368:	1c10      	adds	r0, r2, #0
 800836a:	bf18      	it	ne
 800836c:	2001      	movne	r0, #1
 800836e:	b002      	add	sp, #8
 8008370:	4770      	bx	lr
 8008372:	4610      	mov	r0, r2
 8008374:	e7fb      	b.n	800836e <__ascii_mbtowc+0x16>
 8008376:	f06f 0001 	mvn.w	r0, #1
 800837a:	e7f8      	b.n	800836e <__ascii_mbtowc+0x16>

0800837c <memcpy>:
 800837c:	b510      	push	{r4, lr}
 800837e:	1e43      	subs	r3, r0, #1
 8008380:	440a      	add	r2, r1
 8008382:	4291      	cmp	r1, r2
 8008384:	d100      	bne.n	8008388 <memcpy+0xc>
 8008386:	bd10      	pop	{r4, pc}
 8008388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008390:	e7f7      	b.n	8008382 <memcpy+0x6>

08008392 <memmove>:
 8008392:	4288      	cmp	r0, r1
 8008394:	b510      	push	{r4, lr}
 8008396:	eb01 0302 	add.w	r3, r1, r2
 800839a:	d807      	bhi.n	80083ac <memmove+0x1a>
 800839c:	1e42      	subs	r2, r0, #1
 800839e:	4299      	cmp	r1, r3
 80083a0:	d00a      	beq.n	80083b8 <memmove+0x26>
 80083a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083aa:	e7f8      	b.n	800839e <memmove+0xc>
 80083ac:	4283      	cmp	r3, r0
 80083ae:	d9f5      	bls.n	800839c <memmove+0xa>
 80083b0:	1881      	adds	r1, r0, r2
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	42d3      	cmn	r3, r2
 80083b6:	d100      	bne.n	80083ba <memmove+0x28>
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083c2:	e7f7      	b.n	80083b4 <memmove+0x22>

080083c4 <__malloc_lock>:
 80083c4:	4770      	bx	lr

080083c6 <__malloc_unlock>:
 80083c6:	4770      	bx	lr

080083c8 <_realloc_r>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	4607      	mov	r7, r0
 80083cc:	4614      	mov	r4, r2
 80083ce:	460e      	mov	r6, r1
 80083d0:	b921      	cbnz	r1, 80083dc <_realloc_r+0x14>
 80083d2:	4611      	mov	r1, r2
 80083d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083d8:	f7fe bfe0 	b.w	800739c <_malloc_r>
 80083dc:	b922      	cbnz	r2, 80083e8 <_realloc_r+0x20>
 80083de:	f7fe ff8f 	bl	8007300 <_free_r>
 80083e2:	4625      	mov	r5, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e8:	f000 f821 	bl	800842e <_malloc_usable_size_r>
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d20f      	bcs.n	8008410 <_realloc_r+0x48>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7fe ffd2 	bl	800739c <_malloc_r>
 80083f8:	4605      	mov	r5, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0f2      	beq.n	80083e4 <_realloc_r+0x1c>
 80083fe:	4631      	mov	r1, r6
 8008400:	4622      	mov	r2, r4
 8008402:	f7ff ffbb 	bl	800837c <memcpy>
 8008406:	4631      	mov	r1, r6
 8008408:	4638      	mov	r0, r7
 800840a:	f7fe ff79 	bl	8007300 <_free_r>
 800840e:	e7e9      	b.n	80083e4 <_realloc_r+0x1c>
 8008410:	4635      	mov	r5, r6
 8008412:	e7e7      	b.n	80083e4 <_realloc_r+0x1c>

08008414 <__ascii_wctomb>:
 8008414:	b149      	cbz	r1, 800842a <__ascii_wctomb+0x16>
 8008416:	2aff      	cmp	r2, #255	; 0xff
 8008418:	bf85      	ittet	hi
 800841a:	238a      	movhi	r3, #138	; 0x8a
 800841c:	6003      	strhi	r3, [r0, #0]
 800841e:	700a      	strbls	r2, [r1, #0]
 8008420:	f04f 30ff 	movhi.w	r0, #4294967295
 8008424:	bf98      	it	ls
 8008426:	2001      	movls	r0, #1
 8008428:	4770      	bx	lr
 800842a:	4608      	mov	r0, r1
 800842c:	4770      	bx	lr

0800842e <_malloc_usable_size_r>:
 800842e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008432:	1f18      	subs	r0, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfbc      	itt	lt
 8008438:	580b      	ldrlt	r3, [r1, r0]
 800843a:	18c0      	addlt	r0, r0, r3
 800843c:	4770      	bx	lr
	...

08008440 <_init>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr

0800844c <_fini>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr
