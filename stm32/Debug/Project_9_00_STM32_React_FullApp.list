
Project_9_00_STM32_React_FullApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000541c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e4  080057e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ec  080057ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  200001dc  080059d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  080059d0  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108af  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d3  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  00033190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000273a4  00000000  00000000  00034948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c79e  00000000  00000000  0005bcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f163e  00000000  00000000  0006848a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  00159b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055d4 	.word	0x080055d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080055d4 	.word	0x080055d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ETH_Init+0x78>)
 80005e6:	4a1d      	ldr	r2, [pc, #116]	; (800065c <MX_ETH_Init+0x7c>)
 80005e8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_ETH_Init+0x78>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ETH_Init+0x78>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_ETH_Init+0x78>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_ETH_Init+0x78>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_ETH_Init+0x78>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	3302      	adds	r3, #2
 800060e:	22e1      	movs	r2, #225	; 0xe1
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_ETH_Init+0x78>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	3303      	adds	r3, #3
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_ETH_Init+0x78>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	3304      	adds	r3, #4
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_ETH_Init+0x78>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	3305      	adds	r3, #5
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_ETH_Init+0x78>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_ETH_Init+0x78>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_ETH_Init+0x78>)
 800063e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000642:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_ETH_Init+0x78>)
 8000646:	f000 fea9 	bl	800139c <HAL_ETH_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000650:	f000 fb12 	bl	8000c78 <Error_Handler>
  }

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000204 	.word	0x20000204
 800065c:	40028000 	.word	0x40028000

08000660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	; 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a4e      	ldr	r2, [pc, #312]	; (80007b8 <HAL_ETH_MspInit+0x158>)
 800067e:	4293      	cmp	r3, r2
 8000680:	f040 8096 	bne.w	80007b0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a4c      	ldr	r2, [pc, #304]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
 8000690:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000698:	623b      	str	r3, [r7, #32]
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	4b47      	ldr	r3, [pc, #284]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a46      	ldr	r2, [pc, #280]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
 80006a8:	4b44      	ldr	r3, [pc, #272]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006b0:	61fb      	str	r3, [r7, #28]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4b41      	ldr	r3, [pc, #260]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a40      	ldr	r2, [pc, #256]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b35      	ldr	r3, [pc, #212]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	4a34      	ldr	r2, [pc, #208]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	6313      	str	r3, [r2, #48]	; 0x30
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a28      	ldr	r2, [pc, #160]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 800071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <HAL_ETH_MspInit+0x15c>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073c:	230b      	movs	r3, #11
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000744:	4619      	mov	r1, r3
 8000746:	481e      	ldr	r0, [pc, #120]	; (80007c0 <HAL_ETH_MspInit+0x160>)
 8000748:	f001 fa94 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800074c:	2386      	movs	r3, #134	; 0x86
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075c:	230b      	movs	r3, #11
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4619      	mov	r1, r3
 8000766:	4817      	ldr	r0, [pc, #92]	; (80007c4 <HAL_ETH_MspInit+0x164>)
 8000768:	f001 fa84 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077e:	230b      	movs	r3, #11
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <HAL_ETH_MspInit+0x168>)
 800078a:	f001 fa73 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <HAL_ETH_MspInit+0x16c>)
 80007ac:	f001 fa62 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40028000 	.word	0x40028000
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40021800 	.word	0x40021800

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <MX_GPIO_Init+0x130>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a45      	ldr	r2, [pc, #276]	; (8000900 <MX_GPIO_Init+0x130>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b43      	ldr	r3, [pc, #268]	; (8000900 <MX_GPIO_Init+0x130>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <MX_GPIO_Init+0x130>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <MX_GPIO_Init+0x130>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <MX_GPIO_Init+0x130>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <MX_GPIO_Init+0x130>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a39      	ldr	r2, [pc, #228]	; (8000900 <MX_GPIO_Init+0x130>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <MX_GPIO_Init+0x130>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <MX_GPIO_Init+0x130>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a33      	ldr	r2, [pc, #204]	; (8000900 <MX_GPIO_Init+0x130>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0x130>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0x130>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <MX_GPIO_Init+0x130>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_GPIO_Init+0x130>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_GPIO_Init+0x130>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a27      	ldr	r2, [pc, #156]	; (8000900 <MX_GPIO_Init+0x130>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_GPIO_Init+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f244 0181 	movw	r1, #16513	; 0x4081
 800087c:	4821      	ldr	r0, [pc, #132]	; (8000904 <MX_GPIO_Init+0x134>)
 800087e:	f001 fba3 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	4820      	ldr	r0, [pc, #128]	; (8000908 <MX_GPIO_Init+0x138>)
 8000888:	f001 fb9e 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_GPIO_Init+0x13c>)
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	481b      	ldr	r0, [pc, #108]	; (8000910 <MX_GPIO_Init+0x140>)
 80008a2:	f001 f9e7 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a6:	f244 0381 	movw	r3, #16513	; 0x4081
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0x134>)
 80008c0:	f001 f9d8 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c4:	2340      	movs	r3, #64	; 0x40
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x138>)
 80008dc:	f001 f9ca 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x138>)
 80008f4:	f001 f9be 	bl	8001c74 <HAL_GPIO_Init>

}
 80008f8:	bf00      	nop
 80008fa:	3730      	adds	r7, #48	; 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	10110000 	.word	0x10110000
 8000910:	40020800 	.word	0x40020800

08000914 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char led_code[56];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b091      	sub	sp, #68	; 0x44
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(huart-> Instance == USART3){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a75      	ldr	r2, [pc, #468]	; (8000af8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	f040 80e4 	bne.w	8000af0 <HAL_UART_RxCpltCallback+0x1dc>
	  char name [5];
	  char type [1];
	  char state [1];
	  char * pch;

	  pch = strtok (led_code," \":,{}");
 8000928:	4974      	ldr	r1, [pc, #464]	; (8000afc <HAL_UART_RxCpltCallback+0x1e8>)
 800092a:	4875      	ldr	r0, [pc, #468]	; (8000b00 <HAL_UART_RxCpltCallback+0x1ec>)
 800092c:	f004 f84a 	bl	80049c4 <strtok>
 8000930:	63f8      	str	r0, [r7, #60]	; 0x3c

	   while (pch != NULL)
 8000932:	e053      	b.n	80009dc <HAL_UART_RxCpltCallback+0xc8>
	  {
	    if(strcmp( pch, "ID" ) == 0){
 8000934:	4973      	ldr	r1, [pc, #460]	; (8000b04 <HAL_UART_RxCpltCallback+0x1f0>)
 8000936:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000938:	f7ff fc6a 	bl	8000210 <strcmp>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10c      	bne.n	800095c <HAL_UART_RxCpltCallback+0x48>
	        pch = strtok (NULL, " \":,{}");
 8000942:	496e      	ldr	r1, [pc, #440]	; (8000afc <HAL_UART_RxCpltCallback+0x1e8>)
 8000944:	2000      	movs	r0, #0
 8000946:	f004 f83d 	bl	80049c4 <strtok>
 800094a:	63f8      	str	r0, [r7, #60]	; 0x3c
	        sscanf (pch,"%s",id);
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	461a      	mov	r2, r3
 8000952:	496d      	ldr	r1, [pc, #436]	; (8000b08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000954:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000956:	f004 f809 	bl	800496c <siscanf>
 800095a:	e03a      	b.n	80009d2 <HAL_UART_RxCpltCallback+0xbe>
	    } else if(strcmp( pch, "name" ) == 0){
 800095c:	496b      	ldr	r1, [pc, #428]	; (8000b0c <HAL_UART_RxCpltCallback+0x1f8>)
 800095e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000960:	f7ff fc56 	bl	8000210 <strcmp>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <HAL_UART_RxCpltCallback+0x70>
	        pch = strtok (NULL, " \":,{}");
 800096a:	4964      	ldr	r1, [pc, #400]	; (8000afc <HAL_UART_RxCpltCallback+0x1e8>)
 800096c:	2000      	movs	r0, #0
 800096e:	f004 f829 	bl	80049c4 <strtok>
 8000972:	63f8      	str	r0, [r7, #60]	; 0x3c
	        sscanf (pch,"%s",name);
 8000974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000978:	461a      	mov	r2, r3
 800097a:	4963      	ldr	r1, [pc, #396]	; (8000b08 <HAL_UART_RxCpltCallback+0x1f4>)
 800097c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800097e:	f003 fff5 	bl	800496c <siscanf>
 8000982:	e026      	b.n	80009d2 <HAL_UART_RxCpltCallback+0xbe>
	    } else if(strcmp( pch, "type" ) == 0){
 8000984:	4962      	ldr	r1, [pc, #392]	; (8000b10 <HAL_UART_RxCpltCallback+0x1fc>)
 8000986:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000988:	f7ff fc42 	bl	8000210 <strcmp>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10c      	bne.n	80009ac <HAL_UART_RxCpltCallback+0x98>
	        pch = strtok (NULL, " \":,{}");
 8000992:	495a      	ldr	r1, [pc, #360]	; (8000afc <HAL_UART_RxCpltCallback+0x1e8>)
 8000994:	2000      	movs	r0, #0
 8000996:	f004 f815 	bl	80049c4 <strtok>
 800099a:	63f8      	str	r0, [r7, #60]	; 0x3c
	        sscanf (pch,"%s",type);
 800099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a0:	461a      	mov	r2, r3
 80009a2:	4959      	ldr	r1, [pc, #356]	; (8000b08 <HAL_UART_RxCpltCallback+0x1f4>)
 80009a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009a6:	f003 ffe1 	bl	800496c <siscanf>
 80009aa:	e012      	b.n	80009d2 <HAL_UART_RxCpltCallback+0xbe>
	    } else if(strcmp( pch, "state" ) == 0){
 80009ac:	4959      	ldr	r1, [pc, #356]	; (8000b14 <HAL_UART_RxCpltCallback+0x200>)
 80009ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009b0:	f7ff fc2e 	bl	8000210 <strcmp>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10b      	bne.n	80009d2 <HAL_UART_RxCpltCallback+0xbe>
	        pch = strtok (NULL, " \":,{}");
 80009ba:	4950      	ldr	r1, [pc, #320]	; (8000afc <HAL_UART_RxCpltCallback+0x1e8>)
 80009bc:	2000      	movs	r0, #0
 80009be:	f004 f801 	bl	80049c4 <strtok>
 80009c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	        sscanf (pch,"%s",state);
 80009c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c8:	461a      	mov	r2, r3
 80009ca:	494f      	ldr	r1, [pc, #316]	; (8000b08 <HAL_UART_RxCpltCallback+0x1f4>)
 80009cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009ce:	f003 ffcd 	bl	800496c <siscanf>
	    }
	    pch = strtok (NULL, " \":,{}");
 80009d2:	494a      	ldr	r1, [pc, #296]	; (8000afc <HAL_UART_RxCpltCallback+0x1e8>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f003 fff5 	bl	80049c4 <strtok>
 80009da:	63f8      	str	r0, [r7, #60]	; 0x3c
	   while (pch != NULL)
 80009dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1a8      	bne.n	8000934 <HAL_UART_RxCpltCallback+0x20>
	  }

        char LED_on[3][5]={"LDR1","LDB1","LDG1"};
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <HAL_UART_RxCpltCallback+0x204>)
 80009e4:	f107 0418 	add.w	r4, r7, #24
 80009e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ea:	c407      	stmia	r4!, {r0, r1, r2}
 80009ec:	8023      	strh	r3, [r4, #0]
 80009ee:	3402      	adds	r4, #2
 80009f0:	0c1b      	lsrs	r3, r3, #16
 80009f2:	7023      	strb	r3, [r4, #0]
        char LED_off[3][5]={"LDR0","LDB0","LDG0"};
 80009f4:	4b49      	ldr	r3, [pc, #292]	; (8000b1c <HAL_UART_RxCpltCallback+0x208>)
 80009f6:	f107 0408 	add.w	r4, r7, #8
 80009fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009fc:	c407      	stmia	r4!, {r0, r1, r2}
 80009fe:	8023      	strh	r3, [r4, #0]
 8000a00:	3402      	adds	r4, #2
 8000a02:	0c1b      	lsrs	r3, r3, #16
 8000a04:	7023      	strb	r3, [r4, #0]

        // RED
		if(strcmp(name, LED_on[0])==0)
 8000a06:	f107 0218 	add.w	r2, r7, #24
 8000a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fbfd 	bl	8000210 <strcmp>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d106      	bne.n	8000a2a <HAL_UART_RxCpltCallback+0x116>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	483f      	ldr	r0, [pc, #252]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a24:	f001 fad0 	bl	8001fc8 <HAL_GPIO_WritePin>
 8000a28:	e010      	b.n	8000a4c <HAL_UART_RxCpltCallback+0x138>
		else if(strcmp(name, LED_off[0])==0)
 8000a2a:	f107 0208 	add.w	r2, r7, #8
 8000a2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fbeb 	bl	8000210 <strcmp>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d105      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0x138>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a46:	4836      	ldr	r0, [pc, #216]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a48:	f001 fabe 	bl	8001fc8 <HAL_GPIO_WritePin>

        // BLUE
		if(strcmp(name, LED_on[1])==0)
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	1d5a      	adds	r2, r3, #5
 8000a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fbd9 	bl	8000210 <strcmp>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <HAL_UART_RxCpltCallback+0x15c>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	482d      	ldr	r0, [pc, #180]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a6a:	f001 faad 	bl	8001fc8 <HAL_GPIO_WritePin>
 8000a6e:	e010      	b.n	8000a92 <HAL_UART_RxCpltCallback+0x17e>
		else if(strcmp(name, LED_off[1])==0)
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	1d5a      	adds	r2, r3, #5
 8000a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fbc7 	bl	8000210 <strcmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <HAL_UART_RxCpltCallback+0x17e>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	4824      	ldr	r0, [pc, #144]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a8e:	f001 fa9b 	bl	8001fc8 <HAL_GPIO_WritePin>

        // GREEN
		if(strcmp(name, LED_on[2])==0)
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	f103 020a 	add.w	r2, r3, #10
 8000a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fbb5 	bl	8000210 <strcmp>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_UART_RxCpltCallback+0x1a4>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	481b      	ldr	r0, [pc, #108]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000ab2:	f001 fa89 	bl	8001fc8 <HAL_GPIO_WritePin>
 8000ab6:	e011      	b.n	8000adc <HAL_UART_RxCpltCallback+0x1c8>
		else if(strcmp(name, LED_off[2])==0)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	f103 020a 	add.w	r2, r3, #10
 8000ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fba2 	bl	8000210 <strcmp>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d104      	bne.n	8000adc <HAL_UART_RxCpltCallback+0x1c8>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000ad8:	f001 fa76 	bl	8001fc8 <HAL_GPIO_WritePin>

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)led_code, 56);
 8000adc:	2238      	movs	r2, #56	; 0x38
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <HAL_UART_RxCpltCallback+0x210>)
 8000ae2:	f002 fcbb 	bl	800345c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)led_code, 56);
 8000ae6:	2238      	movs	r2, #56	; 0x38
 8000ae8:	4905      	ldr	r1, [pc, #20]	; (8000b00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <HAL_UART_RxCpltCallback+0x210>)
 8000aec:	f002 fd12 	bl	8003514 <HAL_UART_Receive_IT>
	}
}
 8000af0:	bf00      	nop
 8000af2:	3744      	adds	r7, #68	; 0x44
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	40004800 	.word	0x40004800
 8000afc:	080055ec 	.word	0x080055ec
 8000b00:	2000024c 	.word	0x2000024c
 8000b04:	080055f4 	.word	0x080055f4
 8000b08:	080055f8 	.word	0x080055f8
 8000b0c:	080055fc 	.word	0x080055fc
 8000b10:	08005604 	.word	0x08005604
 8000b14:	0800560c 	.word	0x0800560c
 8000b18:	08005614 	.word	0x08005614
 8000b1c:	08005624 	.word	0x08005624
 8000b20:	40020400 	.word	0x40020400
 8000b24:	20000284 	.word	0x20000284

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fa83 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f812 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff fe4c 	bl	80007d0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b38:	f7ff fd52 	bl	80005e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b3c:	f000 f94c 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b40:	f000 f9c6 	bl	8000ed0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, (uint8_t*)led_code, 56);
 8000b44:	2238      	movs	r2, #56	; 0x38
 8000b46:	4902      	ldr	r1, [pc, #8]	; (8000b50 <main+0x28>)
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <main+0x2c>)
 8000b4a:	f002 fce3 	bl	8003514 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <main+0x26>
 8000b50:	2000024c 	.word	0x2000024c
 8000b54:	20000284 	.word	0x20000284

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0b4      	sub	sp, #208	; 0xd0
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b62:	2230      	movs	r2, #48	; 0x30
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fef8 	bl	800495c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	2284      	movs	r2, #132	; 0x84
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fee9 	bl	800495c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b8a:	f001 fb7f 	bl	800228c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <SystemClock_Config+0x114>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <SystemClock_Config+0x114>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <SystemClock_Config+0x114>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba6:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <SystemClock_Config+0x118>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bae:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <SystemClock_Config+0x118>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <SystemClock_Config+0x118>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bde:	2304      	movs	r3, #4
 8000be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000be4:	2348      	movs	r3, #72	; 0x48
 8000be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fb56 	bl	80022ac <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c06:	f000 f837 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c10:	2302      	movs	r3, #2
 8000c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fddf 	bl	80027f4 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c3c:	f000 f81c 	bl	8000c78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <SystemClock_Config+0x11c>)
 8000c42:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 ffc6 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000c5e:	f000 f80b 	bl	8000c78 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	37d0      	adds	r7, #208	; 0xd0
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000
 8000c74:	00200100 	.word	0x00200100

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f9c4 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <USART3_IRQHandler+0x10>)
 8000d32:	f002 fc91 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000284 	.word	0x20000284

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f003 fdca 	bl	8004908 <__errno>
 8000d74:	4602      	mov	r2, r0
 8000d76:	230c      	movs	r3, #12
 8000d78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20050000 	.word	0x20050000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200001f8 	.word	0x200001f8
 8000da8:	20000710 	.word	0x20000710

08000dac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <SystemInit+0x28>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <SystemInit+0x28>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SystemInit+0x28>)
 8000dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <MX_USART3_UART_Init+0x5c>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e1c:	f002 fad0 	bl	80033c0 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e26:	f7ff ff27 	bl	8000c78 <Error_Handler>
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000284 	.word	0x20000284
 8000e34:	40004800 	.word	0x40004800

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0x8c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d130      	bne.n	8000ebc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <HAL_UART_MspInit+0x94>)
 8000ea8:	f000 fee4 	bl	8001c74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2027      	movs	r0, #39	; 0x27
 8000eb2:	f000 fa1a 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eb6:	2027      	movs	r0, #39	; 0x27
 8000eb8:	f000 fa33 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020c00 	.word	0x40020c00

08000ed0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	2206      	movs	r2, #6
 8000ee0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f14:	f001 f871 	bl	8001ffa <HAL_PCD_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f7ff feab 	bl	8000c78 <Error_Handler>
  }

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000304 	.word	0x20000304

08000f2c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f4c:	d141      	bne.n	8000fd2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f78:	230a      	movs	r3, #10
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <HAL_PCD_MspInit+0xb4>)
 8000f84:	f000 fe76 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <HAL_PCD_MspInit+0xb4>)
 8000f9e:	f000 fe69 	bl	8001c74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6353      	str	r3, [r2, #52]	; 0x34
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_PCD_MspInit+0xb0>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fea:	e003      	b.n	8000ff4 <LoopCopyDataInit>

08000fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff2:	3104      	adds	r1, #4

08000ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ffc:	d3f6      	bcc.n	8000fec <CopyDataInit>
  ldr  r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001000:	e002      	b.n	8001008 <LoopFillZerobss>

08001002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001004:	f842 3b04 	str.w	r3, [r2], #4

08001008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800100c:	d3f9      	bcc.n	8001002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100e:	f7ff fecd 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 fc7f 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fd87 	bl	8000b28 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001020:	080057f4 	.word	0x080057f4
  ldr  r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001028:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800102c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001030:	20000710 	.word	0x20000710

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f94a 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f805 	bl	8001050 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fe1f 	bl	8000c88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f965 	bl	800133e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f92d 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000708 	.word	0x20000708

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000708 	.word	0x20000708

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_Delay+0x40>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000008 	.word	0x20000008

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d004      	beq.n	8001374 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e00c      	b.n	800138e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2205      	movs	r2, #5
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <HAL_ETH_Init+0x2b8>)
 80013ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e183      	b.n	80016ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff f942 	bl	8000660 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b9e      	ldr	r3, [pc, #632]	; (8001658 <HAL_ETH_Init+0x2bc>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a9d      	ldr	r2, [pc, #628]	; (8001658 <HAL_ETH_Init+0x2bc>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b9b      	ldr	r3, [pc, #620]	; (8001658 <HAL_ETH_Init+0x2bc>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <HAL_ETH_Init+0x2c0>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_ETH_Init+0x2c0>)
 80013fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001400:	4b96      	ldr	r3, [pc, #600]	; (800165c <HAL_ETH_Init+0x2c0>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4994      	ldr	r1, [pc, #592]	; (800165c <HAL_ETH_Init+0x2c0>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001426:	f7ff fe57 	bl	80010d8 <HAL_GetTick>
 800142a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800142c:	e011      	b.n	8001452 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800142e:	f7ff fe53 	bl	80010d8 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800143c:	d909      	bls.n	8001452 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e13b      	b.n	80016ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e4      	bne.n	800142e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f023 031c 	bic.w	r3, r3, #28
 8001472:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001474:	f001 fb82 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8001478:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_ETH_Init+0x2c4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d908      	bls.n	8001494 <HAL_ETH_Init+0xf8>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_ETH_Init+0x2c8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d804      	bhi.n	8001494 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e027      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_ETH_Init+0x2c8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d908      	bls.n	80014ae <HAL_ETH_Init+0x112>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_ETH_Init+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d804      	bhi.n	80014ae <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f043 030c 	orr.w	r3, r3, #12
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e01a      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_ETH_Init+0x2cc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d903      	bls.n	80014be <HAL_ETH_Init+0x122>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4a6c      	ldr	r2, [pc, #432]	; (800166c <HAL_ETH_Init+0x2d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d911      	bls.n	80014e2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_ETH_Init+0x2d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <HAL_ETH_Init+0x13c>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4a69      	ldr	r2, [pc, #420]	; (8001670 <HAL_ETH_Init+0x2d4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d804      	bhi.n	80014d8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e005      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e000      	b.n	80014e4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f956 	bl	80017a4 <HAL_ETH_WritePHYRegister>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f9b3 	bl	8001870 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0d9      	b.n	80016ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001516:	20ff      	movs	r0, #255	; 0xff
 8001518:	f7ff fdea 	bl	80010f0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a7 	beq.w	8001674 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001526:	f7ff fdd7 	bl	80010d8 <HAL_GetTick>
 800152a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f8cd 	bl	80016d4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800153a:	f7ff fdcd 	bl	80010d8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d90f      	bls.n	800156c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f98c 	bl	8001870 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0ae      	b.n	80016ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0da      	beq.n	800152c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f911 	bl	80017a4 <HAL_ETH_WritePHYRegister>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f96e 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800159c:	2301      	movs	r3, #1
 800159e:	e094      	b.n	80016ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fd9a 	bl	80010d8 <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	461a      	mov	r2, r3
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f890 	bl	80016d4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015b4:	f7ff fd90 	bl	80010d8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d90f      	bls.n	80015e6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f94f 	bl	8001870 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e071      	b.n	80016ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0da      	beq.n	80015a6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	461a      	mov	r2, r3
 80015f6:	211f      	movs	r1, #31
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f86b 	bl	80016d4 <HAL_ETH_ReadPHYRegister>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f930 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001618:	2301      	movs	r3, #1
 800161a:	e056      	b.n	80016ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e002      	b.n	8001636 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	e037      	b.n	80016b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e032      	b.n	80016b8 <HAL_ETH_Init+0x31c>
 8001652:	bf00      	nop
 8001654:	03938700 	.word	0x03938700
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	01312cff 	.word	0x01312cff
 8001664:	02160ebf 	.word	0x02160ebf
 8001668:	039386ff 	.word	0x039386ff
 800166c:	05f5e0ff 	.word	0x05f5e0ff
 8001670:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001684:	4313      	orrs	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f889 	bl	80017a4 <HAL_ETH_WritePHYRegister>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8e6 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00c      	b.n	80016ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016b4:	f7ff fd1c 	bl	80010f0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8d8 	bl	8001870 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	460b      	mov	r3, r1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b82      	cmp	r3, #130	; 0x82
 80016f4:	d101      	bne.n	80016fa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	e050      	b.n	800179c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2282      	movs	r2, #130	; 0x82
 80016fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 031c 	and.w	r3, r3, #28
 8001710:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8a1b      	ldrh	r3, [r3, #16]
 8001716:	02db      	lsls	r3, r3, #11
 8001718:	b29b      	uxth	r3, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001720:	897b      	ldrh	r3, [r7, #10]
 8001722:	019b      	lsls	r3, r3, #6
 8001724:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001746:	f7ff fcc7 	bl	80010d8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800174c:	e015      	b.n	800177a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800174e:	f7ff fcc3 	bl	80010d8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d309      	bcc.n	8001772 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e014      	b.n	800179c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e4      	bne.n	800174e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	460b      	mov	r3, r1
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b42      	cmp	r3, #66	; 0x42
 80017c4:	d101      	bne.n	80017ca <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	e04e      	b.n	8001868 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2242      	movs	r2, #66	; 0x42
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8a1b      	ldrh	r3, [r3, #16]
 80017e6:	02db      	lsls	r3, r3, #11
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017f0:	897b      	ldrh	r3, [r7, #10]
 80017f2:	019b      	lsls	r3, r3, #6
 80017f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff fc5a 	bl	80010d8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001826:	e015      	b.n	8001854 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001828:	f7ff fc56 	bl	80010d8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d309      	bcc.n	800184c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e00d      	b.n	8001868 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1e4      	bne.n	8001828 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0b0      	sub	sp, #192	; 0xc0
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800188c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001894:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800189e:	2300      	movs	r3, #0
 80018a0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	663b      	str	r3, [r7, #96]	; 0x60
 80018bc:	e001      	b.n	80018c2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80018c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018cc:	2300      	movs	r3, #0
 80018ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018dc:	2340      	movs	r3, #64	; 0x40
 80018de:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001948:	4bab      	ldr	r3, [pc, #684]	; (8001bf8 <ETH_MACDMAConfig+0x388>)
 800194a:	4013      	ands	r3, r2
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001950:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001954:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001958:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800195c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001962:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001966:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800196a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001970:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001974:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001978:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800197a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800197c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800197e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001980:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001984:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001986:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800198a:	4313      	orrs	r3, r2
 800198c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fba3 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80019b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80019ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80019bc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80019be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80019c2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80019c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80019c8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80019ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80019ce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80019d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019d4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80019d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80019e0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019e2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fb7e 	bl	80010f0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019fc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a06:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a10:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a20:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a24:	4013      	ands	r3, r2
 8001a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a34:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a3a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a40:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a46:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a4c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a60:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff fb3f 	bl	80010f0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a7a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fb2a 	bl	80010f0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ab4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ab8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001aca:	2304      	movs	r3, #4
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001b02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <ETH_MACDMAConfig+0x38c>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b0e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b10:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b12:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b14:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b16:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b18:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b1a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b1c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b1e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b20:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b22:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b24:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b26:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b2a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b2e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b42:	4413      	add	r3, r2
 8001b44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b52:	4413      	add	r3, r2
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff fac8 	bl	80010f0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b68:	4413      	add	r3, r2
 8001b6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b74:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b78:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b7c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b80:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b84:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b86:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b8a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff faa1 	bl	80010f0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10d      	bne.n	8001be0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bcc:	4413      	add	r3, r2
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <ETH_MACDMAConfig+0x390>)
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bdc:	440b      	add	r3, r1
 8001bde:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f80b 	bl	8001c04 <ETH_MACAddressConfig>
}
 8001bee:	bf00      	nop
 8001bf0:	37c0      	adds	r7, #192	; 0xc0
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	ff20810f 	.word	0xff20810f
 8001bfc:	f8de3f23 	.word	0xf8de3f23
 8001c00:	00010040 	.word	0x00010040

08001c04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3305      	adds	r3, #5
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	3204      	adds	r2, #4
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <ETH_MACAddressConfig+0x68>)
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3303      	adds	r3, #3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	061a      	lsls	r2, r3, #24
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <ETH_MACAddressConfig+0x6c>)
 8001c56:	4413      	add	r3, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	6013      	str	r3, [r2, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40028040 	.word	0x40028040
 8001c70:	40028044 	.word	0x40028044

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e175      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8164 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_GPIO_Init+0x5e>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x100>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b12      	cmp	r3, #18
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80be 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e16:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ec4:	4934      	ldr	r1, [pc, #208]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef6:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f20:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae86 	bls.w	8001c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021c00 	.word	0x40021c00
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40022400 	.word	0x40022400
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffc:	b08f      	sub	sp, #60	; 0x3c
 8001ffe:	af0a      	add	r7, sp, #40	; 0x28
 8002000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e116      	b.n	800223a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe ff80 	bl	8000f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2203      	movs	r2, #3
 8002030:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fa04 	bl	8004458 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	687e      	ldr	r6, [r7, #4]
 8002058:	466d      	mov	r5, sp
 800205a:	f106 0410 	add.w	r4, r6, #16
 800205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206a:	e885 0003 	stmia.w	r5, {r0, r1}
 800206e:	1d33      	adds	r3, r6, #4
 8002070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f002 f998 	bl	80043a8 <USB_CoreInit>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0d7      	b.n	800223a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f002 f9f2 	bl	800447a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e04a      	b.n	8002132 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	333d      	adds	r3, #61	; 0x3d
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	333c      	adds	r3, #60	; 0x3c
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	b298      	uxth	r0, r3
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3342      	adds	r3, #66	; 0x42
 80020d8:	4602      	mov	r2, r0
 80020da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	333f      	adds	r3, #63	; 0x3f
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3344      	adds	r3, #68	; 0x44
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3348      	adds	r3, #72	; 0x48
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3350      	adds	r3, #80	; 0x50
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3301      	adds	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3af      	bcc.n	800209c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e044      	b.n	80021cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	3301      	adds	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d3b5      	bcc.n	8002142 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	687e      	ldr	r6, [r7, #4]
 80021de:	466d      	mov	r5, sp
 80021e0:	f106 0410 	add.w	r4, r6, #16
 80021e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f4:	1d33      	adds	r3, r6, #4
 80021f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f002 f969 	bl	80044d0 <USB_DevInit>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e014      	b.n	800223a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f80b 	bl	8002244 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fb1b 	bl	800486e <USB_DevDisconnect>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002244 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_PCDEx_ActivateLPM+0x44>)
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	10000003 	.word	0x10000003

0800228c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e291      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8087 	beq.w	80023de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d0:	4b96      	ldr	r3, [pc, #600]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d00c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022dc:	4b93      	ldr	r3, [pc, #588]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d112      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
 80022e8:	4b90      	ldr	r3, [pc, #576]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f4:	d10b      	bne.n	800230e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	4b8d      	ldr	r3, [pc, #564]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d06c      	beq.n	80023dc <HAL_RCC_OscConfig+0x130>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d168      	bne.n	80023dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e26b      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x7a>
 8002318:	4b84      	ldr	r3, [pc, #528]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a83      	ldr	r2, [pc, #524]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e02e      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x9c>
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7b      	ldr	r2, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0xc0>
 8002352:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a72      	ldr	r2, [pc, #456]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xd8>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6b      	ldr	r2, [pc, #428]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fea4 	bl	80010d8 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fea0 	bl	80010d8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e21f      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe90 	bl	80010d8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fe8c 	bl	80010d8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e20b      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x110>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d069      	beq.n	80024be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ea:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x190>
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1df      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	493d      	ldr	r1, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e040      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d023      	beq.n	800248c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a38      	ldr	r2, [pc, #224]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fe42 	bl	80010d8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fe3e 	bl	80010d8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1bd      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4929      	ldr	r1, [pc, #164]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
 800248a:	e018      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fe1e 	bl	80010d8 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fe1a 	bl	80010d8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e199      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d038      	beq.n	800253c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d019      	beq.n	8002506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fdfb 	bl	80010d8 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fdf7 	bl	80010d8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e176      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x23a>
 8002504:	e01a      	b.n	800253c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_OscConfig+0x280>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <HAL_RCC_OscConfig+0x280>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe fde1 	bl	80010d8 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fddd 	bl	80010d8 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d903      	bls.n	8002530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e15c      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
 800252c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b91      	ldr	r3, [pc, #580]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a4 	beq.w	8002692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7e      	ldr	r2, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x4d0>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fda5 	bl	80010d8 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe fda1 	bl	80010d8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e120      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x31a>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	e02d      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x33c>
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a66      	ldr	r2, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	e01c      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x35e>
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fd55 	bl	80010d8 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fd51 	bl	80010d8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0ce      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCC_OscConfig+0x386>
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fd3f 	bl	80010d8 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fd3b 	bl	80010d8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a4 	beq.w	80027e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d06b      	beq.n	8002780 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d149      	bne.n	8002744 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fd0c 	bl	80010d8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fd08 	bl	80010d8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e087      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	019b      	lsls	r3, r3, #6
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	3b01      	subs	r3, #1
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	4313      	orrs	r3, r2
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800270e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fcdc 	bl	80010d8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fcd8 	bl	80010d8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e057      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x478>
 8002742:	e04f      	b.n	80027e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800274a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fcc2 	bl	80010d8 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fcbe 	bl	80010d8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e03d      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_OscConfig+0x4cc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x4ac>
 8002776:	e035      	b.n	80027e4 <HAL_RCC_OscConfig+0x538>
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x544>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d028      	beq.n	80027e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d121      	bne.n	80027e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d11a      	bne.n	80027e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	3b01      	subs	r3, #1
 80027ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	4965      	ldr	r1, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d040      	beq.n	8002918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e073      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fbf6 	bl	80010d8 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe fbf2 	bl	80010d8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e053      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d210      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	fa21 f303 	lsr.w	r3, r1, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fb52 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08005640 	.word	0x08005640
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	2300      	movs	r3, #0
 80029dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d007      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x32>
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d008      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x38>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80b4 	bne.w	8002b60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029fa:	60bb      	str	r3, [r7, #8]
      break;
 80029fc:	e0b3      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fe:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a00:	60bb      	str	r3, [r7, #8]
      break;
 8002a02:	e0b0      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a0e:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04a      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1a:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	ea03 0501 	and.w	r5, r3, r1
 8002a30:	ea04 0602 	and.w	r6, r4, r2
 8002a34:	4629      	mov	r1, r5
 8002a36:	4632      	mov	r2, r6
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f04f 0400 	mov.w	r4, #0
 8002a40:	0154      	lsls	r4, r2, #5
 8002a42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a46:	014b      	lsls	r3, r1, #5
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	1b49      	subs	r1, r1, r5
 8002a4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	0194      	lsls	r4, r2, #6
 8002a5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a60:	018b      	lsls	r3, r1, #6
 8002a62:	1a5b      	subs	r3, r3, r1
 8002a64:	eb64 0402 	sbc.w	r4, r4, r2
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	00e2      	lsls	r2, r4, #3
 8002a72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a76:	00d9      	lsls	r1, r3, #3
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	195b      	adds	r3, r3, r5
 8002a7e:	eb44 0406 	adc.w	r4, r4, r6
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	0262      	lsls	r2, r4, #9
 8002a8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a90:	0259      	lsls	r1, r3, #9
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	f7fd fc1c 	bl	80002e0 <__aeabi_uldivmod>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e049      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	ea03 0501 	and.w	r5, r3, r1
 8002ac6:	ea04 0602 	and.w	r6, r4, r2
 8002aca:	4629      	mov	r1, r5
 8002acc:	4632      	mov	r2, r6
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	f04f 0400 	mov.w	r4, #0
 8002ad6:	0154      	lsls	r4, r2, #5
 8002ad8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002adc:	014b      	lsls	r3, r1, #5
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	1b49      	subs	r1, r1, r5
 8002ae4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	f04f 0400 	mov.w	r4, #0
 8002af0:	0194      	lsls	r4, r2, #6
 8002af2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002af6:	018b      	lsls	r3, r1, #6
 8002af8:	1a5b      	subs	r3, r3, r1
 8002afa:	eb64 0402 	sbc.w	r4, r4, r2
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	00e2      	lsls	r2, r4, #3
 8002b08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b0c:	00d9      	lsls	r1, r3, #3
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4614      	mov	r4, r2
 8002b12:	195b      	adds	r3, r3, r5
 8002b14:	eb44 0406 	adc.w	r4, r4, r6
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	02a2      	lsls	r2, r4, #10
 8002b22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b26:	0299      	lsls	r1, r3, #10
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4621      	mov	r1, r4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f04f 0400 	mov.w	r4, #0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4623      	mov	r3, r4
 8002b3a:	f7fd fbd1 	bl	80002e0 <__aeabi_uldivmod>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460c      	mov	r4, r1
 8002b42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	60bb      	str	r3, [r7, #8]
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b62:	60bb      	str	r3, [r7, #8]
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	68bb      	ldr	r3, [r7, #8]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b9c:	4601      	mov	r1, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0a9b      	lsrs	r3, r3, #10
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4a03      	ldr	r2, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08005650 	.word	0x08005650

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffdc 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0b5b      	lsrs	r3, r3, #13
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08005650 	.word	0x08005650

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c16:	6093      	str	r3, [r2, #8]
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	4964      	ldr	r1, [pc, #400]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d017      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	4959      	ldr	r1, [pc, #356]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	494a      	ldr	r1, [pc, #296]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 808b 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	4a39      	ldr	r2, [pc, #228]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd4:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe f9f4 	bl	80010d8 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe f9f0 	bl	80010d8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e355      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d035      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d02e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d114      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe f9b8 	bl	80010d8 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f9b4 	bl	80010d8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e317      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002daa:	400b      	ands	r3, r1
 8002dac:	4901      	ldr	r1, [pc, #4]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	0ffffcff 	.word	0x0ffffcff
 8002dc0:	4bb0      	ldr	r3, [pc, #704]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4aaf      	ldr	r2, [pc, #700]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	4bad      	ldr	r3, [pc, #692]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	49aa      	ldr	r1, [pc, #680]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dea:	4ba6      	ldr	r3, [pc, #664]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	4aa4      	ldr	r2, [pc, #656]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dfa:	4ba2      	ldr	r3, [pc, #648]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	499f      	ldr	r1, [pc, #636]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e18:	4b9a      	ldr	r3, [pc, #616]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e26:	4997      	ldr	r1, [pc, #604]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3a:	4b92      	ldr	r3, [pc, #584]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e48:	498e      	ldr	r1, [pc, #568]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e5c:	4b89      	ldr	r3, [pc, #548]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6a:	4986      	ldr	r1, [pc, #536]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	497d      	ldr	r1, [pc, #500]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4975      	ldr	r1, [pc, #468]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f023 020c 	bic.w	r2, r3, #12
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	496c      	ldr	r1, [pc, #432]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee4:	4b67      	ldr	r3, [pc, #412]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4964      	ldr	r1, [pc, #400]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	495b      	ldr	r1, [pc, #364]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f28:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	4953      	ldr	r1, [pc, #332]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	494a      	ldr	r1, [pc, #296]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f6c:	4b45      	ldr	r3, [pc, #276]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	4942      	ldr	r1, [pc, #264]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	4939      	ldr	r1, [pc, #228]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fbe:	4931      	ldr	r1, [pc, #196]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d011      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe0:	4928      	ldr	r1, [pc, #160]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	4918      	ldr	r1, [pc, #96]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003044:	490f      	ldr	r1, [pc, #60]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305a:	f040 80d8 	bne.w	800320e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306a:	f7fe f835 	bl	80010d8 <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003072:	f7fe f831 	bl	80010d8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b64      	cmp	r3, #100	; 0x64
 800307e:	d903      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e196      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003084:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003088:	4b6c      	ldr	r3, [pc, #432]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d021      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11d      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030a8:	4b64      	ldr	r3, [pc, #400]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030b6:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030bc:	0e1b      	lsrs	r3, r3, #24
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	019a      	lsls	r2, r3, #6
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	061b      	lsls	r3, r3, #24
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	071b      	lsls	r3, r3, #28
 80030dc:	4957      	ldr	r1, [pc, #348]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x516>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310e:	d129      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003124:	0f1b      	lsrs	r3, r3, #28
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	019a      	lsls	r2, r3, #6
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	071b      	lsls	r3, r3, #28
 8003144:	493d      	ldr	r1, [pc, #244]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003152:	f023 021f 	bic.w	r2, r3, #31
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	3b01      	subs	r3, #1
 800315c:	4937      	ldr	r1, [pc, #220]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01d      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	0e1b      	lsrs	r3, r3, #24
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003184:	0f1b      	lsrs	r3, r3, #28
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	019a      	lsls	r2, r3, #6
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	4925      	ldr	r1, [pc, #148]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d011      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	019a      	lsls	r2, r3, #6
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	071b      	lsls	r3, r3, #28
 80031d4:	4919      	ldr	r1, [pc, #100]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e8:	f7fd ff76 	bl	80010d8 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031f0:	f7fd ff72 	bl	80010d8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0d7      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 80cd 	bne.w	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003222:	f7fd ff59 	bl	80010d8 <HAL_GetTick>
 8003226:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800322a:	f7fd ff55 	bl	80010d8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	; 0x64
 8003236:	d903      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0ba      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800323c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003240:	4b5e      	ldr	r3, [pc, #376]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800324c:	d0ed      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02e      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003276:	4b51      	ldr	r3, [pc, #324]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003284:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0f1b      	lsrs	r3, r3, #28
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4944      	ldr	r1, [pc, #272]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032b2:	4b42      	ldr	r3, [pc, #264]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	493d      	ldr	r1, [pc, #244]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d022      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e0:	d11d      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032e2:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	0e1b      	lsrs	r3, r3, #24
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032f0:	4b32      	ldr	r3, [pc, #200]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	0f1b      	lsrs	r3, r3, #28
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	019a      	lsls	r2, r3, #6
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	431a      	orrs	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	071b      	lsls	r3, r3, #28
 8003316:	4929      	ldr	r1, [pc, #164]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d028      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	0e1b      	lsrs	r3, r3, #24
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	019a      	lsls	r2, r3, #6
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	071b      	lsls	r3, r3, #28
 800335e:	4917      	ldr	r1, [pc, #92]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	4911      	ldr	r1, [pc, #68]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fd fea6 	bl	80010d8 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003390:	f7fd fea2 	bl	80010d8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e007      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ae:	d1ef      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e040      	b.n	8003454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fd28 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa70 	bl	80038e4 <UART_SetConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fd0e 	bl	8003e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800342a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800343a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd95 	bl	8003f7c <UART_CheckIdleState>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	2b20      	cmp	r3, #32
 8003470:	d144      	bne.n	80034fc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_Transmit_IT+0x22>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e03d      	b.n	80034fe <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_UART_Transmit_IT+0x34>
 800348c:	2302      	movs	r3, #2
 800348e:	e036      	b.n	80034fe <HAL_UART_Transmit_IT+0xa2>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2221      	movs	r2, #33	; 0x21
 80034be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d107      	bne.n	80034da <HAL_UART_Transmit_IT+0x7e>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_UART_Transmit_IT+0xb0>)
 80034d6:	665a      	str	r2, [r3, #100]	; 0x64
 80034d8:	e002      	b.n	80034e0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <HAL_UART_Transmit_IT+0xb4>)
 80034de:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	080041af 	.word	0x080041af
 8003510:	0800413d 	.word	0x0800413d

08003514 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003526:	2b20      	cmp	r3, #32
 8003528:	f040 808a 	bne.w	8003640 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_UART_Receive_IT+0x24>
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e082      	b.n	8003642 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_UART_Receive_IT+0x36>
 8003546:	2302      	movs	r3, #2
 8003548:	e07b      	b.n	8003642 <HAL_UART_Receive_IT+0x12e>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d10e      	bne.n	8003596 <HAL_UART_Receive_IT+0x82>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_UART_Receive_IT+0x78>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800358a:	e02d      	b.n	80035e8 <HAL_UART_Receive_IT+0xd4>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	22ff      	movs	r2, #255	; 0xff
 8003590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003594:	e028      	b.n	80035e8 <HAL_UART_Receive_IT+0xd4>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_UART_Receive_IT+0xa6>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_UART_Receive_IT+0x9c>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	22ff      	movs	r2, #255	; 0xff
 80035aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ae:	e01b      	b.n	80035e8 <HAL_UART_Receive_IT+0xd4>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	227f      	movs	r2, #127	; 0x7f
 80035b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b8:	e016      	b.n	80035e8 <HAL_UART_Receive_IT+0xd4>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c2:	d10d      	bne.n	80035e0 <HAL_UART_Receive_IT+0xcc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_UART_Receive_IT+0xc2>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	227f      	movs	r2, #127	; 0x7f
 80035d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d4:	e008      	b.n	80035e8 <HAL_UART_Receive_IT+0xd4>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	223f      	movs	r2, #63	; 0x3f
 80035da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035de:	e003      	b.n	80035e8 <HAL_UART_Receive_IT+0xd4>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2222      	movs	r2, #34	; 0x22
 80035f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d107      	bne.n	800361e <HAL_UART_Receive_IT+0x10a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <HAL_UART_Receive_IT+0x13c>)
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
 800361c:	e002      	b.n	8003624 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <HAL_UART_Receive_IT+0x140>)
 8003622:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800363a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	08004303 	.word	0x08004303
 8003654:	0800425d 	.word	0x0800425d

08003658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f640 030f 	movw	r3, #2063	; 0x80f
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d113      	bne.n	80036b0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8100 	beq.w	80038a6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
      }
      return;
 80036ae:	e0fa      	b.n	80038a6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80d5 	beq.w	8003862 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80ca 	beq.w	8003862 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_UART_IRQHandler+0x9e>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2201      	movs	r2, #1
 80036e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_UART_IRQHandler+0xc6>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2202      	movs	r2, #2
 8003710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <HAL_UART_IRQHandler+0xee>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2204      	movs	r2, #4
 8003738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2208      	movs	r2, #8
 800376a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003770:	f043 0208 	orr.w	r2, r3, #8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00f      	beq.n	80037a2 <HAL_UART_IRQHandler+0x14a>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d07f      	beq.n	80038aa <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d004      	beq.n	80037ec <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d031      	beq.n	8003850 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fc6f 	bl	80040d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d123      	bne.n	8003848 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_UART_IRQHandler+0x260>)
 800381e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fd96 	bl	8001356 <HAL_DMA_Abort_IT>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800383a:	4610      	mov	r0, r2
 800383c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383e:	e00e      	b.n	800385e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f845 	bl	80038d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003846:	e00a      	b.n	800385e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f841 	bl	80038d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384e:	e006      	b.n	800385e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f83d 	bl	80038d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800385c:	e025      	b.n	80038aa <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385e:	bf00      	nop
    return;
 8003860:	e023      	b.n	80038aa <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00d      	beq.n	8003888 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
    }
    return;
 8003886:	e012      	b.n	80038ae <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <HAL_UART_IRQHandler+0x258>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fcc4 	bl	800422a <UART_EndTransmit_IT>
    return;
 80038a2:	bf00      	nop
 80038a4:	e004      	b.n	80038b0 <HAL_UART_IRQHandler+0x258>
      return;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <HAL_UART_IRQHandler+0x258>
    return;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_UART_IRQHandler+0x258>
    return;
 80038ae:	bf00      	nop
  }

}
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	08004111 	.word	0x08004111

080038bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4bb1      	ldr	r3, [pc, #708]	; (8003bd8 <UART_SetConfig+0x2f4>)
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	6939      	ldr	r1, [r7, #16]
 800391c:	430b      	orrs	r3, r1
 800391e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a9f      	ldr	r2, [pc, #636]	; (8003bdc <UART_SetConfig+0x2f8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d121      	bne.n	80039a8 <UART_SetConfig+0xc4>
 8003964:	4b9e      	ldr	r3, [pc, #632]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d816      	bhi.n	80039a0 <UART_SetConfig+0xbc>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x94>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	08003989 	.word	0x08003989
 800397c:	08003995 	.word	0x08003995
 8003980:	0800398f 	.word	0x0800398f
 8003984:	0800399b 	.word	0x0800399b
 8003988:	2301      	movs	r3, #1
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e151      	b.n	8003c32 <UART_SetConfig+0x34e>
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e14e      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003994:	2304      	movs	r3, #4
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e14b      	b.n	8003c32 <UART_SetConfig+0x34e>
 800399a:	2308      	movs	r3, #8
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e148      	b.n	8003c32 <UART_SetConfig+0x34e>
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	bf00      	nop
 80039a6:	e144      	b.n	8003c32 <UART_SetConfig+0x34e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a8d      	ldr	r2, [pc, #564]	; (8003be4 <UART_SetConfig+0x300>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d134      	bne.n	8003a1c <UART_SetConfig+0x138>
 80039b2:	4b8b      	ldr	r3, [pc, #556]	; (8003be0 <UART_SetConfig+0x2fc>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d829      	bhi.n	8003a14 <UART_SetConfig+0x130>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0xe4>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a15 	.word	0x08003a15
 80039d0:	08003a15 	.word	0x08003a15
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	08003a15 	.word	0x08003a15
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a15 	.word	0x08003a15
 80039e8:	08003a03 	.word	0x08003a03
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a15 	.word	0x08003a15
 80039f8:	08003a0f 	.word	0x08003a0f
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e117      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e114      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e111      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e10e      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a14:	2310      	movs	r3, #16
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	bf00      	nop
 8003a1a:	e10a      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a71      	ldr	r2, [pc, #452]	; (8003be8 <UART_SetConfig+0x304>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d120      	bne.n	8003a68 <UART_SetConfig+0x184>
 8003a26:	4b6e      	ldr	r3, [pc, #440]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d00f      	beq.n	8003a54 <UART_SetConfig+0x170>
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d802      	bhi.n	8003a3e <UART_SetConfig+0x15a>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <UART_SetConfig+0x164>
 8003a3c:	e010      	b.n	8003a60 <UART_SetConfig+0x17c>
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d005      	beq.n	8003a4e <UART_SetConfig+0x16a>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d009      	beq.n	8003a5a <UART_SetConfig+0x176>
 8003a46:	e00b      	b.n	8003a60 <UART_SetConfig+0x17c>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e0f1      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e0ee      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a54:	2304      	movs	r3, #4
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e0eb      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e0e8      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a60:	2310      	movs	r3, #16
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	bf00      	nop
 8003a66:	e0e4      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5f      	ldr	r2, [pc, #380]	; (8003bec <UART_SetConfig+0x308>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d120      	bne.n	8003ab4 <UART_SetConfig+0x1d0>
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d00f      	beq.n	8003aa0 <UART_SetConfig+0x1bc>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d802      	bhi.n	8003a8a <UART_SetConfig+0x1a6>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <UART_SetConfig+0x1b0>
 8003a88:	e010      	b.n	8003aac <UART_SetConfig+0x1c8>
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d005      	beq.n	8003a9a <UART_SetConfig+0x1b6>
 8003a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a90:	d009      	beq.n	8003aa6 <UART_SetConfig+0x1c2>
 8003a92:	e00b      	b.n	8003aac <UART_SetConfig+0x1c8>
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e0cb      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	e0c8      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e0c5      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e0c2      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003aac:	2310      	movs	r3, #16
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	bf00      	nop
 8003ab2:	e0be      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <UART_SetConfig+0x30c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d124      	bne.n	8003b08 <UART_SetConfig+0x224>
 8003abe:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d012      	beq.n	8003af4 <UART_SetConfig+0x210>
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	d802      	bhi.n	8003ada <UART_SetConfig+0x1f6>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <UART_SetConfig+0x204>
 8003ad8:	e012      	b.n	8003b00 <UART_SetConfig+0x21c>
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ade:	d006      	beq.n	8003aee <UART_SetConfig+0x20a>
 8003ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae4:	d009      	beq.n	8003afa <UART_SetConfig+0x216>
 8003ae6:	e00b      	b.n	8003b00 <UART_SetConfig+0x21c>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0a1      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e09e      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003af4:	2304      	movs	r3, #4
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e09b      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003afa:	2308      	movs	r3, #8
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e098      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b00:	2310      	movs	r3, #16
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	bf00      	nop
 8003b06:	e094      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a39      	ldr	r2, [pc, #228]	; (8003bf4 <UART_SetConfig+0x310>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d124      	bne.n	8003b5c <UART_SetConfig+0x278>
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d012      	beq.n	8003b48 <UART_SetConfig+0x264>
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d802      	bhi.n	8003b2e <UART_SetConfig+0x24a>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <UART_SetConfig+0x258>
 8003b2c:	e012      	b.n	8003b54 <UART_SetConfig+0x270>
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b32:	d006      	beq.n	8003b42 <UART_SetConfig+0x25e>
 8003b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b38:	d009      	beq.n	8003b4e <UART_SetConfig+0x26a>
 8003b3a:	e00b      	b.n	8003b54 <UART_SetConfig+0x270>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e077      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b42:	2302      	movs	r3, #2
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e074      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e071      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b4e:	2308      	movs	r3, #8
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e06e      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b54:	2310      	movs	r3, #16
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	bf00      	nop
 8003b5a:	e06a      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <UART_SetConfig+0x314>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d124      	bne.n	8003bb0 <UART_SetConfig+0x2cc>
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d012      	beq.n	8003b9c <UART_SetConfig+0x2b8>
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d802      	bhi.n	8003b82 <UART_SetConfig+0x29e>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <UART_SetConfig+0x2ac>
 8003b80:	e012      	b.n	8003ba8 <UART_SetConfig+0x2c4>
 8003b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b86:	d006      	beq.n	8003b96 <UART_SetConfig+0x2b2>
 8003b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b8c:	d009      	beq.n	8003ba2 <UART_SetConfig+0x2be>
 8003b8e:	e00b      	b.n	8003ba8 <UART_SetConfig+0x2c4>
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e04d      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e04a      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e047      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e044      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	bf00      	nop
 8003bae:	e040      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <UART_SetConfig+0x318>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d139      	bne.n	8003c2e <UART_SetConfig+0x34a>
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <UART_SetConfig+0x2fc>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc8:	d027      	beq.n	8003c1a <UART_SetConfig+0x336>
 8003bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bce:	d817      	bhi.n	8003c00 <UART_SetConfig+0x31c>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <UART_SetConfig+0x32a>
 8003bd4:	e027      	b.n	8003c26 <UART_SetConfig+0x342>
 8003bd6:	bf00      	nop
 8003bd8:	efff69f3 	.word	0xefff69f3
 8003bdc:	40011000 	.word	0x40011000
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40004400 	.word	0x40004400
 8003be8:	40004800 	.word	0x40004800
 8003bec:	40004c00 	.word	0x40004c00
 8003bf0:	40005000 	.word	0x40005000
 8003bf4:	40011400 	.word	0x40011400
 8003bf8:	40007800 	.word	0x40007800
 8003bfc:	40007c00 	.word	0x40007c00
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	d006      	beq.n	8003c14 <UART_SetConfig+0x330>
 8003c06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c0a:	d009      	beq.n	8003c20 <UART_SetConfig+0x33c>
 8003c0c:	e00b      	b.n	8003c26 <UART_SetConfig+0x342>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e00e      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003c14:	2302      	movs	r3, #2
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e00b      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e008      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003c20:	2308      	movs	r3, #8
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e005      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003c26:	2310      	movs	r3, #16
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	bf00      	nop
 8003c2c:	e001      	b.n	8003c32 <UART_SetConfig+0x34e>
 8003c2e:	2310      	movs	r3, #16
 8003c30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3a:	d17f      	bne.n	8003d3c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003c3c:	7ffb      	ldrb	r3, [r7, #31]
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d85c      	bhi.n	8003cfc <UART_SetConfig+0x418>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x364>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c8d 	.word	0x08003c8d
 8003c50:	08003cad 	.word	0x08003cad
 8003c54:	08003cfd 	.word	0x08003cfd
 8003c58:	08003cc5 	.word	0x08003cc5
 8003c5c:	08003cfd 	.word	0x08003cfd
 8003c60:	08003cfd 	.word	0x08003cfd
 8003c64:	08003cfd 	.word	0x08003cfd
 8003c68:	08003ce5 	.word	0x08003ce5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe ff92 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003c70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	005a      	lsls	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	61bb      	str	r3, [r7, #24]
        break;
 8003c8a:	e03a      	b.n	8003d02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c8c:	f7fe ff96 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8003c90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	61bb      	str	r3, [r7, #24]
        break;
 8003caa:	e02a      	b.n	8003d02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	085a      	lsrs	r2, r3, #1
 8003cb2:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <UART_SetConfig+0x54c>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6852      	ldr	r2, [r2, #4]
 8003cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	61bb      	str	r3, [r7, #24]
        break;
 8003cc2:	e01e      	b.n	8003d02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc4:	f7fe fe82 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8003cc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	61bb      	str	r3, [r7, #24]
        break;
 8003ce2:	e00e      	b.n	8003d02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	61bb      	str	r3, [r7, #24]
        break;
 8003cfa:	e002      	b.n	8003d02 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
        break;
 8003d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d916      	bls.n	8003d36 <UART_SetConfig+0x452>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d212      	bcs.n	8003d36 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f023 030f 	bic.w	r3, r3, #15
 8003d18:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	897b      	ldrh	r3, [r7, #10]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	897a      	ldrh	r2, [r7, #10]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	e070      	b.n	8003e18 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
 8003d3a:	e06d      	b.n	8003e18 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d859      	bhi.n	8003df6 <UART_SetConfig+0x512>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x464>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d8b 	.word	0x08003d8b
 8003d50:	08003da9 	.word	0x08003da9
 8003d54:	08003df7 	.word	0x08003df7
 8003d58:	08003dc1 	.word	0x08003dc1
 8003d5c:	08003df7 	.word	0x08003df7
 8003d60:	08003df7 	.word	0x08003df7
 8003d64:	08003df7 	.word	0x08003df7
 8003d68:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe ff12 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003d70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	085a      	lsrs	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	441a      	add	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	61bb      	str	r3, [r7, #24]
        break;
 8003d88:	e038      	b.n	8003dfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8a:	f7fe ff17 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8003d8e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	085a      	lsrs	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	441a      	add	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	61bb      	str	r3, [r7, #24]
        break;
 8003da6:	e029      	b.n	8003dfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	085a      	lsrs	r2, r3, #1
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <UART_SetConfig+0x550>)
 8003db0:	4413      	add	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	61bb      	str	r3, [r7, #24]
        break;
 8003dbe:	e01d      	b.n	8003dfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc0:	f7fe fe04 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8003dc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	085a      	lsrs	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	441a      	add	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	61bb      	str	r3, [r7, #24]
        break;
 8003ddc:	e00e      	b.n	8003dfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	61bb      	str	r3, [r7, #24]
        break;
 8003df4:	e002      	b.n	8003dfc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
        break;
 8003dfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d908      	bls.n	8003e14 <UART_SetConfig+0x530>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d204      	bcs.n	8003e14 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e001      	b.n	8003e18 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	01e84800 	.word	0x01e84800
 8003e34:	00f42400 	.word	0x00f42400

08003e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f36:	d10a      	bne.n	8003f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f8a:	f7fd f8a5 	bl	80010d8 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d10e      	bne.n	8003fbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f814 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e00a      	b.n	8003fd2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	e05d      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d059      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fd f870 	bl	80010d8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <UART_WaitOnFlagUntilTimeout+0x30>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11b      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004018:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e042      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02b      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405e:	d123      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004068:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004078:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e00f      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d092      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff fbce 	bl	80038d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004148:	2b21      	cmp	r3, #33	; 0x21
 800414a:	d12a      	bne.n	80041a2 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d110      	bne.n	800417a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004166:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004176:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004178:	e013      	b.n	80041a2 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ba:	2b21      	cmp	r3, #33	; 0x21
 80041bc:	d12f      	bne.n	800421e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d110      	bne.n	80041ec <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041ea:	e018      	b.n	800421e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004240:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fb34 	bl	80038bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800426a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004270:	2b22      	cmp	r3, #34	; 0x22
 8004272:	d13a      	bne.n	80042ea <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800427c:	89bb      	ldrh	r3, [r7, #12]
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	400a      	ands	r2, r1
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d121      	bne.n	80042fa <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fb16 	bl	8000914 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042e8:	e007      	b.n	80042fa <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0208 	orr.w	r2, r2, #8
 80042f8:	619a      	str	r2, [r3, #24]
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004310:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004316:	2b22      	cmp	r3, #34	; 0x22
 8004318:	d13a      	bne.n	8004390 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004328:	89ba      	ldrh	r2, [r7, #12]
 800432a:	89fb      	ldrh	r3, [r7, #14]
 800432c:	4013      	ands	r3, r2
 800432e:	b29a      	uxth	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d121      	bne.n	80043a0 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800436a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fc fac3 	bl	8000914 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800438e:	e007      	b.n	80043a0 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	619a      	str	r2, [r3, #24]
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043a8:	b084      	sub	sp, #16
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	f107 001c 	add.w	r0, r7, #28
 80043b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d120      	bne.n	8004402 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <USB_CoreInit+0xac>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa52 	bl	80048a0 <USB_CoreReset>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	e010      	b.n	8004424 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa46 	bl	80048a0 <USB_CoreReset>
 8004414:	4603      	mov	r3, r0
 8004416:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10b      	bne.n	8004442 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f043 0206 	orr.w	r2, r3, #6
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800444e:	b004      	add	sp, #16
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	ffbdffbf 	.word	0xffbdffbf

08004458 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f023 0201 	bic.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	460b      	mov	r3, r1
 8004484:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d106      	bne.n	80044a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e00b      	b.n	80044be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	e001      	b.n	80044be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e003      	b.n	80044c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044be:	2032      	movs	r0, #50	; 0x32
 80044c0:	f7fc fe16 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d0:	b084      	sub	sp, #16
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e009      	b.n	8004504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3340      	adds	r3, #64	; 0x40
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3301      	adds	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b0e      	cmp	r3, #14
 8004508:	d9f2      	bls.n	80044f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11c      	bne.n	800454a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e005      	b.n	8004556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800455c:	461a      	mov	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004568:	4619      	mov	r1, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004570:	461a      	mov	r2, r3
 8004572:	680b      	ldr	r3, [r1, #0]
 8004574:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004582:	2100      	movs	r1, #0
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f959 	bl	800483c <USB_SetDevSpeed>
 800458a:	e018      	b.n	80045be <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800458c:	2101      	movs	r1, #1
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f954 	bl	800483c <USB_SetDevSpeed>
 8004594:	e013      	b.n	80045be <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10c      	bne.n	80045b6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045a2:	2100      	movs	r1, #0
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f949 	bl	800483c <USB_SetDevSpeed>
 80045aa:	e008      	b.n	80045be <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045ac:	2101      	movs	r1, #1
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f944 	bl	800483c <USB_SetDevSpeed>
 80045b4:	e003      	b.n	80045be <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045b6:	2103      	movs	r1, #3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f93f 	bl	800483c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045be:	2110      	movs	r1, #16
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8f3 	bl	80047ac <USB_FlushTxFifo>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f911 	bl	80047f8 <USB_FlushRxFifo>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	461a      	mov	r2, r3
 8004600:	2300      	movs	r3, #0
 8004602:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	e043      	b.n	8004692 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800461c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004620:	d118      	bne.n	8004654 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004634:	461a      	mov	r2, r3
 8004636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e013      	b.n	8004666 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	461a      	mov	r2, r3
 800464c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e008      	b.n	8004666 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	461a      	mov	r2, r3
 8004662:	2300      	movs	r3, #0
 8004664:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800468a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3301      	adds	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	d3b7      	bcc.n	800460a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e043      	b.n	8004728 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b6:	d118      	bne.n	80046ea <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e013      	b.n	80046fc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e008      	b.n	80046fc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	461a      	mov	r2, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	461a      	mov	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	461a      	mov	r2, r3
 800471c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004720:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3301      	adds	r3, #1
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3b7      	bcc.n	80046a0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004742:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f043 0210 	orr.w	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <USB_DevInit+0x2d4>)
 800476a:	4313      	orrs	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f043 0208 	orr.w	r2, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <USB_DevInit+0x2d8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	803c3800 	.word	0x803c3800
 80047a8:	40000004 	.word	0x40000004

080047ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <USB_FlushTxFifo+0x48>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e006      	b.n	80047e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d0f0      	beq.n	80047c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	00030d40 	.word	0x00030d40

080047f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2210      	movs	r2, #16
 8004808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <USB_FlushRxFifo+0x40>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b10      	cmp	r3, #16
 8004826:	d0f0      	beq.n	800480a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	00030d40 	.word	0x00030d40

0800483c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800488e:	2003      	movs	r0, #3
 8004890:	f7fc fc2e 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <USB_CoreReset+0x64>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e01b      	b.n	80048f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	daf2      	bge.n	80048ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <USB_CoreReset+0x64>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d0f0      	beq.n	80048d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	00030d40 	.word	0x00030d40

08004908 <__errno>:
 8004908:	4b01      	ldr	r3, [pc, #4]	; (8004910 <__errno+0x8>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	2000000c 	.word	0x2000000c

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4e0d      	ldr	r6, [pc, #52]	; (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491a:	1ba4      	subs	r4, r4, r6
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2500      	movs	r5, #0
 8004920:	42a5      	cmp	r5, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4e0b      	ldr	r6, [pc, #44]	; (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	; (8004958 <__libc_init_array+0x44>)
 8004928:	f000 fe54 	bl	80055d4 <_init>
 800492c:	1ba4      	subs	r4, r4, r6
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2500      	movs	r5, #0
 8004932:	42a5      	cmp	r5, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800493c:	4798      	blx	r3
 800493e:	3501      	adds	r5, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004946:	4798      	blx	r3
 8004948:	3501      	adds	r5, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	080057ec 	.word	0x080057ec
 8004950:	080057ec 	.word	0x080057ec
 8004954:	080057ec 	.word	0x080057ec
 8004958:	080057f0 	.word	0x080057f0

0800495c <memset>:
 800495c:	4402      	add	r2, r0
 800495e:	4603      	mov	r3, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <siscanf>:
 800496c:	b40e      	push	{r1, r2, r3}
 800496e:	b530      	push	{r4, r5, lr}
 8004970:	b09c      	sub	sp, #112	; 0x70
 8004972:	ac1f      	add	r4, sp, #124	; 0x7c
 8004974:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004978:	f854 5b04 	ldr.w	r5, [r4], #4
 800497c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004980:	9002      	str	r0, [sp, #8]
 8004982:	9006      	str	r0, [sp, #24]
 8004984:	f7fb fc4e 	bl	8000224 <strlen>
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <siscanf+0x4c>)
 800498a:	9003      	str	r0, [sp, #12]
 800498c:	9007      	str	r0, [sp, #28]
 800498e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004990:	480a      	ldr	r0, [pc, #40]	; (80049bc <siscanf+0x50>)
 8004992:	9401      	str	r4, [sp, #4]
 8004994:	2300      	movs	r3, #0
 8004996:	930f      	str	r3, [sp, #60]	; 0x3c
 8004998:	9314      	str	r3, [sp, #80]	; 0x50
 800499a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800499e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049a2:	462a      	mov	r2, r5
 80049a4:	4623      	mov	r3, r4
 80049a6:	a902      	add	r1, sp, #8
 80049a8:	6800      	ldr	r0, [r0, #0]
 80049aa:	f000 f969 	bl	8004c80 <__ssvfiscanf_r>
 80049ae:	b01c      	add	sp, #112	; 0x70
 80049b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049b4:	b003      	add	sp, #12
 80049b6:	4770      	bx	lr
 80049b8:	080049c1 	.word	0x080049c1
 80049bc:	2000000c 	.word	0x2000000c

080049c0 <__seofread>:
 80049c0:	2000      	movs	r0, #0
 80049c2:	4770      	bx	lr

080049c4 <strtok>:
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <strtok+0x50>)
 80049c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ca:	681d      	ldr	r5, [r3, #0]
 80049cc:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80049ce:	4606      	mov	r6, r0
 80049d0:	460f      	mov	r7, r1
 80049d2:	b9b4      	cbnz	r4, 8004a02 <strtok+0x3e>
 80049d4:	2050      	movs	r0, #80	; 0x50
 80049d6:	f000 f849 	bl	8004a6c <malloc>
 80049da:	65a8      	str	r0, [r5, #88]	; 0x58
 80049dc:	e9c0 4400 	strd	r4, r4, [r0]
 80049e0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80049e4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80049e8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80049ec:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80049f0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80049f4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80049f8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80049fc:	6184      	str	r4, [r0, #24]
 80049fe:	7704      	strb	r4, [r0, #28]
 8004a00:	6244      	str	r4, [r0, #36]	; 0x24
 8004a02:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004a04:	4639      	mov	r1, r7
 8004a06:	4630      	mov	r0, r6
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	f000 b803 	b.w	8004a18 <__strtok_r>
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <__strtok_r>:
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	b918      	cbnz	r0, 8004a24 <__strtok_r+0xc>
 8004a1c:	6810      	ldr	r0, [r2, #0]
 8004a1e:	b908      	cbnz	r0, 8004a24 <__strtok_r+0xc>
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a22:	4620      	mov	r0, r4
 8004a24:	4604      	mov	r4, r0
 8004a26:	460f      	mov	r7, r1
 8004a28:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004a2c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a30:	b91e      	cbnz	r6, 8004a3a <__strtok_r+0x22>
 8004a32:	b96d      	cbnz	r5, 8004a50 <__strtok_r+0x38>
 8004a34:	6015      	str	r5, [r2, #0]
 8004a36:	4628      	mov	r0, r5
 8004a38:	e7f2      	b.n	8004a20 <__strtok_r+0x8>
 8004a3a:	42b5      	cmp	r5, r6
 8004a3c:	d1f6      	bne.n	8004a2c <__strtok_r+0x14>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ef      	bne.n	8004a22 <__strtok_r+0xa>
 8004a42:	6014      	str	r4, [r2, #0]
 8004a44:	7003      	strb	r3, [r0, #0]
 8004a46:	e7eb      	b.n	8004a20 <__strtok_r+0x8>
 8004a48:	462b      	mov	r3, r5
 8004a4a:	e00d      	b.n	8004a68 <__strtok_r+0x50>
 8004a4c:	b926      	cbnz	r6, 8004a58 <__strtok_r+0x40>
 8004a4e:	461c      	mov	r4, r3
 8004a50:	4623      	mov	r3, r4
 8004a52:	460f      	mov	r7, r1
 8004a54:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004a58:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a5c:	42b5      	cmp	r5, r6
 8004a5e:	d1f5      	bne.n	8004a4c <__strtok_r+0x34>
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	d0f1      	beq.n	8004a48 <__strtok_r+0x30>
 8004a64:	2100      	movs	r1, #0
 8004a66:	7021      	strb	r1, [r4, #0]
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e7d9      	b.n	8004a20 <__strtok_r+0x8>

08004a6c <malloc>:
 8004a6c:	4b02      	ldr	r3, [pc, #8]	; (8004a78 <malloc+0xc>)
 8004a6e:	4601      	mov	r1, r0
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	f000 b851 	b.w	8004b18 <_malloc_r>
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <_free_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4605      	mov	r5, r0
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d045      	beq.n	8004b10 <_free_r+0x94>
 8004a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a88:	1f0c      	subs	r4, r1, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bfb8      	it	lt
 8004a8e:	18e4      	addlt	r4, r4, r3
 8004a90:	f000 fd63 	bl	800555a <__malloc_lock>
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <_free_r+0x98>)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	4610      	mov	r0, r2
 8004a9a:	b933      	cbnz	r3, 8004aaa <_free_r+0x2e>
 8004a9c:	6063      	str	r3, [r4, #4]
 8004a9e:	6014      	str	r4, [r2, #0]
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa6:	f000 bd59 	b.w	800555c <__malloc_unlock>
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	d90c      	bls.n	8004ac8 <_free_r+0x4c>
 8004aae:	6821      	ldr	r1, [r4, #0]
 8004ab0:	1862      	adds	r2, r4, r1
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bf04      	itt	eq
 8004ab6:	681a      	ldreq	r2, [r3, #0]
 8004ab8:	685b      	ldreq	r3, [r3, #4]
 8004aba:	6063      	str	r3, [r4, #4]
 8004abc:	bf04      	itt	eq
 8004abe:	1852      	addeq	r2, r2, r1
 8004ac0:	6022      	streq	r2, [r4, #0]
 8004ac2:	6004      	str	r4, [r0, #0]
 8004ac4:	e7ec      	b.n	8004aa0 <_free_r+0x24>
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	b10a      	cbz	r2, 8004ad0 <_free_r+0x54>
 8004acc:	42a2      	cmp	r2, r4
 8004ace:	d9fa      	bls.n	8004ac6 <_free_r+0x4a>
 8004ad0:	6819      	ldr	r1, [r3, #0]
 8004ad2:	1858      	adds	r0, r3, r1
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d10b      	bne.n	8004af0 <_free_r+0x74>
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	4401      	add	r1, r0
 8004adc:	1858      	adds	r0, r3, r1
 8004ade:	4282      	cmp	r2, r0
 8004ae0:	6019      	str	r1, [r3, #0]
 8004ae2:	d1dd      	bne.n	8004aa0 <_free_r+0x24>
 8004ae4:	6810      	ldr	r0, [r2, #0]
 8004ae6:	6852      	ldr	r2, [r2, #4]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	4401      	add	r1, r0
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	e7d7      	b.n	8004aa0 <_free_r+0x24>
 8004af0:	d902      	bls.n	8004af8 <_free_r+0x7c>
 8004af2:	230c      	movs	r3, #12
 8004af4:	602b      	str	r3, [r5, #0]
 8004af6:	e7d3      	b.n	8004aa0 <_free_r+0x24>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	1821      	adds	r1, r4, r0
 8004afc:	428a      	cmp	r2, r1
 8004afe:	bf04      	itt	eq
 8004b00:	6811      	ldreq	r1, [r2, #0]
 8004b02:	6852      	ldreq	r2, [r2, #4]
 8004b04:	6062      	str	r2, [r4, #4]
 8004b06:	bf04      	itt	eq
 8004b08:	1809      	addeq	r1, r1, r0
 8004b0a:	6021      	streq	r1, [r4, #0]
 8004b0c:	605c      	str	r4, [r3, #4]
 8004b0e:	e7c7      	b.n	8004aa0 <_free_r+0x24>
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
 8004b12:	bf00      	nop
 8004b14:	200001fc 	.word	0x200001fc

08004b18 <_malloc_r>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	1ccd      	adds	r5, r1, #3
 8004b1c:	f025 0503 	bic.w	r5, r5, #3
 8004b20:	3508      	adds	r5, #8
 8004b22:	2d0c      	cmp	r5, #12
 8004b24:	bf38      	it	cc
 8004b26:	250c      	movcc	r5, #12
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	db01      	blt.n	8004b32 <_malloc_r+0x1a>
 8004b2e:	42a9      	cmp	r1, r5
 8004b30:	d903      	bls.n	8004b3a <_malloc_r+0x22>
 8004b32:	230c      	movs	r3, #12
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	2000      	movs	r0, #0
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
 8004b3a:	f000 fd0e 	bl	800555a <__malloc_lock>
 8004b3e:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <_malloc_r+0xac>)
 8004b40:	6814      	ldr	r4, [r2, #0]
 8004b42:	4621      	mov	r1, r4
 8004b44:	b991      	cbnz	r1, 8004b6c <_malloc_r+0x54>
 8004b46:	4c20      	ldr	r4, [pc, #128]	; (8004bc8 <_malloc_r+0xb0>)
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	b91b      	cbnz	r3, 8004b54 <_malloc_r+0x3c>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 fb3f 	bl	80051d0 <_sbrk_r>
 8004b52:	6020      	str	r0, [r4, #0]
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f000 fb3a 	bl	80051d0 <_sbrk_r>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d124      	bne.n	8004baa <_malloc_r+0x92>
 8004b60:	230c      	movs	r3, #12
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 fcf9 	bl	800555c <__malloc_unlock>
 8004b6a:	e7e4      	b.n	8004b36 <_malloc_r+0x1e>
 8004b6c:	680b      	ldr	r3, [r1, #0]
 8004b6e:	1b5b      	subs	r3, r3, r5
 8004b70:	d418      	bmi.n	8004ba4 <_malloc_r+0x8c>
 8004b72:	2b0b      	cmp	r3, #11
 8004b74:	d90f      	bls.n	8004b96 <_malloc_r+0x7e>
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	50cd      	str	r5, [r1, r3]
 8004b7a:	18cc      	adds	r4, r1, r3
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 fced 	bl	800555c <__malloc_unlock>
 8004b82:	f104 000b 	add.w	r0, r4, #11
 8004b86:	1d23      	adds	r3, r4, #4
 8004b88:	f020 0007 	bic.w	r0, r0, #7
 8004b8c:	1ac3      	subs	r3, r0, r3
 8004b8e:	d0d3      	beq.n	8004b38 <_malloc_r+0x20>
 8004b90:	425a      	negs	r2, r3
 8004b92:	50e2      	str	r2, [r4, r3]
 8004b94:	e7d0      	b.n	8004b38 <_malloc_r+0x20>
 8004b96:	428c      	cmp	r4, r1
 8004b98:	684b      	ldr	r3, [r1, #4]
 8004b9a:	bf16      	itet	ne
 8004b9c:	6063      	strne	r3, [r4, #4]
 8004b9e:	6013      	streq	r3, [r2, #0]
 8004ba0:	460c      	movne	r4, r1
 8004ba2:	e7eb      	b.n	8004b7c <_malloc_r+0x64>
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	6849      	ldr	r1, [r1, #4]
 8004ba8:	e7cc      	b.n	8004b44 <_malloc_r+0x2c>
 8004baa:	1cc4      	adds	r4, r0, #3
 8004bac:	f024 0403 	bic.w	r4, r4, #3
 8004bb0:	42a0      	cmp	r0, r4
 8004bb2:	d005      	beq.n	8004bc0 <_malloc_r+0xa8>
 8004bb4:	1a21      	subs	r1, r4, r0
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f000 fb0a 	bl	80051d0 <_sbrk_r>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d0cf      	beq.n	8004b60 <_malloc_r+0x48>
 8004bc0:	6025      	str	r5, [r4, #0]
 8004bc2:	e7db      	b.n	8004b7c <_malloc_r+0x64>
 8004bc4:	200001fc 	.word	0x200001fc
 8004bc8:	20000200 	.word	0x20000200

08004bcc <_sungetc_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	1c4b      	adds	r3, r1, #1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	d103      	bne.n	8004bdc <_sungetc_r+0x10>
 8004bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd8:	4628      	mov	r0, r5
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	8993      	ldrh	r3, [r2, #12]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	8193      	strh	r3, [r2, #12]
 8004be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004be6:	6852      	ldr	r2, [r2, #4]
 8004be8:	b2cd      	uxtb	r5, r1
 8004bea:	b18b      	cbz	r3, 8004c10 <_sungetc_r+0x44>
 8004bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	dd08      	ble.n	8004c04 <_sungetc_r+0x38>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	e7e9      	b.n	8004bd8 <_sungetc_r+0xc>
 8004c04:	4621      	mov	r1, r4
 8004c06:	f000 fc3f 	bl	8005488 <__submore>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d0f1      	beq.n	8004bf2 <_sungetc_r+0x26>
 8004c0e:	e7e1      	b.n	8004bd4 <_sungetc_r+0x8>
 8004c10:	6921      	ldr	r1, [r4, #16]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	b151      	cbz	r1, 8004c2c <_sungetc_r+0x60>
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d208      	bcs.n	8004c2c <_sungetc_r+0x60>
 8004c1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004c1e:	42a9      	cmp	r1, r5
 8004c20:	d104      	bne.n	8004c2c <_sungetc_r+0x60>
 8004c22:	3b01      	subs	r3, #1
 8004c24:	3201      	adds	r2, #1
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	6062      	str	r2, [r4, #4]
 8004c2a:	e7d5      	b.n	8004bd8 <_sungetc_r+0xc>
 8004c2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c34:	6363      	str	r3, [r4, #52]	; 0x34
 8004c36:	2303      	movs	r3, #3
 8004c38:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	2301      	movs	r3, #1
 8004c44:	e7dc      	b.n	8004c00 <_sungetc_r+0x34>

08004c46 <__ssrefill_r>:
 8004c46:	b510      	push	{r4, lr}
 8004c48:	460c      	mov	r4, r1
 8004c4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c4c:	b169      	cbz	r1, 8004c6a <__ssrefill_r+0x24>
 8004c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c52:	4299      	cmp	r1, r3
 8004c54:	d001      	beq.n	8004c5a <__ssrefill_r+0x14>
 8004c56:	f7ff ff11 	bl	8004a7c <_free_r>
 8004c5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	2000      	movs	r0, #0
 8004c60:	6360      	str	r0, [r4, #52]	; 0x34
 8004c62:	b113      	cbz	r3, 8004c6a <__ssrefill_r+0x24>
 8004c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6063      	str	r3, [r4, #4]
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f043 0320 	orr.w	r3, r3, #32
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7e:	e7f3      	b.n	8004c68 <__ssrefill_r+0x22>

08004c80 <__ssvfiscanf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004c88:	460c      	mov	r4, r1
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	9144      	str	r1, [sp, #272]	; 0x110
 8004c8e:	9145      	str	r1, [sp, #276]	; 0x114
 8004c90:	499f      	ldr	r1, [pc, #636]	; (8004f10 <__ssvfiscanf_r+0x290>)
 8004c92:	91a0      	str	r1, [sp, #640]	; 0x280
 8004c94:	f10d 0804 	add.w	r8, sp, #4
 8004c98:	499e      	ldr	r1, [pc, #632]	; (8004f14 <__ssvfiscanf_r+0x294>)
 8004c9a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004f18 <__ssvfiscanf_r+0x298>
 8004c9e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	4692      	mov	sl, r2
 8004ca6:	91a1      	str	r1, [sp, #644]	; 0x284
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	270a      	movs	r7, #10
 8004cac:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 812a 	beq.w	8004f0a <__ssvfiscanf_r+0x28a>
 8004cb6:	4655      	mov	r5, sl
 8004cb8:	f000 fc24 	bl	8005504 <__locale_ctype_ptr>
 8004cbc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004cc0:	4458      	add	r0, fp
 8004cc2:	7843      	ldrb	r3, [r0, #1]
 8004cc4:	f013 0308 	ands.w	r3, r3, #8
 8004cc8:	d01c      	beq.n	8004d04 <__ssvfiscanf_r+0x84>
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dd12      	ble.n	8004cf6 <__ssvfiscanf_r+0x76>
 8004cd0:	f000 fc18 	bl	8005504 <__locale_ctype_ptr>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	4410      	add	r0, r2
 8004cda:	7842      	ldrb	r2, [r0, #1]
 8004cdc:	0712      	lsls	r2, r2, #28
 8004cde:	d401      	bmi.n	8004ce4 <__ssvfiscanf_r+0x64>
 8004ce0:	46aa      	mov	sl, r5
 8004ce2:	e7e3      	b.n	8004cac <__ssvfiscanf_r+0x2c>
 8004ce4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ce6:	3201      	adds	r2, #1
 8004ce8:	9245      	str	r2, [sp, #276]	; 0x114
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	3301      	adds	r3, #1
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	6062      	str	r2, [r4, #4]
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	e7e9      	b.n	8004cca <__ssvfiscanf_r+0x4a>
 8004cf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4798      	blx	r3
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0e6      	beq.n	8004cd0 <__ssvfiscanf_r+0x50>
 8004d02:	e7ed      	b.n	8004ce0 <__ssvfiscanf_r+0x60>
 8004d04:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004d08:	f040 8082 	bne.w	8004e10 <__ssvfiscanf_r+0x190>
 8004d0c:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d0e:	9341      	str	r3, [sp, #260]	; 0x104
 8004d10:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004d14:	2b2a      	cmp	r3, #42	; 0x2a
 8004d16:	d103      	bne.n	8004d20 <__ssvfiscanf_r+0xa0>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	9341      	str	r3, [sp, #260]	; 0x104
 8004d1c:	f10a 0502 	add.w	r5, sl, #2
 8004d20:	46aa      	mov	sl, r5
 8004d22:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004d26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004d2a:	2a09      	cmp	r2, #9
 8004d2c:	d922      	bls.n	8004d74 <__ssvfiscanf_r+0xf4>
 8004d2e:	2203      	movs	r2, #3
 8004d30:	4879      	ldr	r0, [pc, #484]	; (8004f18 <__ssvfiscanf_r+0x298>)
 8004d32:	f7fb fa85 	bl	8000240 <memchr>
 8004d36:	b138      	cbz	r0, 8004d48 <__ssvfiscanf_r+0xc8>
 8004d38:	eba0 0309 	sub.w	r3, r0, r9
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	4098      	lsls	r0, r3
 8004d40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d42:	4318      	orrs	r0, r3
 8004d44:	9041      	str	r0, [sp, #260]	; 0x104
 8004d46:	46aa      	mov	sl, r5
 8004d48:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4c:	2b67      	cmp	r3, #103	; 0x67
 8004d4e:	f10a 0501 	add.w	r5, sl, #1
 8004d52:	d82b      	bhi.n	8004dac <__ssvfiscanf_r+0x12c>
 8004d54:	2b65      	cmp	r3, #101	; 0x65
 8004d56:	f080 809f 	bcs.w	8004e98 <__ssvfiscanf_r+0x218>
 8004d5a:	2b47      	cmp	r3, #71	; 0x47
 8004d5c:	d810      	bhi.n	8004d80 <__ssvfiscanf_r+0x100>
 8004d5e:	2b45      	cmp	r3, #69	; 0x45
 8004d60:	f080 809a 	bcs.w	8004e98 <__ssvfiscanf_r+0x218>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d06c      	beq.n	8004e42 <__ssvfiscanf_r+0x1c2>
 8004d68:	2b25      	cmp	r3, #37	; 0x25
 8004d6a:	d051      	beq.n	8004e10 <__ssvfiscanf_r+0x190>
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d70:	9742      	str	r7, [sp, #264]	; 0x108
 8004d72:	e027      	b.n	8004dc4 <__ssvfiscanf_r+0x144>
 8004d74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004d76:	fb07 1303 	mla	r3, r7, r3, r1
 8004d7a:	3b30      	subs	r3, #48	; 0x30
 8004d7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d7e:	e7cf      	b.n	8004d20 <__ssvfiscanf_r+0xa0>
 8004d80:	2b5b      	cmp	r3, #91	; 0x5b
 8004d82:	d06a      	beq.n	8004e5a <__ssvfiscanf_r+0x1da>
 8004d84:	d80c      	bhi.n	8004da0 <__ssvfiscanf_r+0x120>
 8004d86:	2b58      	cmp	r3, #88	; 0x58
 8004d88:	d1f0      	bne.n	8004d6c <__ssvfiscanf_r+0xec>
 8004d8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	9241      	str	r2, [sp, #260]	; 0x104
 8004d92:	2210      	movs	r2, #16
 8004d94:	9242      	str	r2, [sp, #264]	; 0x108
 8004d96:	2b6e      	cmp	r3, #110	; 0x6e
 8004d98:	bf8c      	ite	hi
 8004d9a:	2304      	movhi	r3, #4
 8004d9c:	2303      	movls	r3, #3
 8004d9e:	e010      	b.n	8004dc2 <__ssvfiscanf_r+0x142>
 8004da0:	2b63      	cmp	r3, #99	; 0x63
 8004da2:	d065      	beq.n	8004e70 <__ssvfiscanf_r+0x1f0>
 8004da4:	2b64      	cmp	r3, #100	; 0x64
 8004da6:	d1e1      	bne.n	8004d6c <__ssvfiscanf_r+0xec>
 8004da8:	9742      	str	r7, [sp, #264]	; 0x108
 8004daa:	e7f4      	b.n	8004d96 <__ssvfiscanf_r+0x116>
 8004dac:	2b70      	cmp	r3, #112	; 0x70
 8004dae:	d04b      	beq.n	8004e48 <__ssvfiscanf_r+0x1c8>
 8004db0:	d826      	bhi.n	8004e00 <__ssvfiscanf_r+0x180>
 8004db2:	2b6e      	cmp	r3, #110	; 0x6e
 8004db4:	d062      	beq.n	8004e7c <__ssvfiscanf_r+0x1fc>
 8004db6:	d84c      	bhi.n	8004e52 <__ssvfiscanf_r+0x1d2>
 8004db8:	2b69      	cmp	r3, #105	; 0x69
 8004dba:	d1d7      	bne.n	8004d6c <__ssvfiscanf_r+0xec>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9342      	str	r3, [sp, #264]	; 0x108
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8004dc4:	6863      	ldr	r3, [r4, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dd68      	ble.n	8004e9c <__ssvfiscanf_r+0x21c>
 8004dca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004dcc:	0659      	lsls	r1, r3, #25
 8004dce:	d407      	bmi.n	8004de0 <__ssvfiscanf_r+0x160>
 8004dd0:	f000 fb98 	bl	8005504 <__locale_ctype_ptr>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	4410      	add	r0, r2
 8004dda:	7842      	ldrb	r2, [r0, #1]
 8004ddc:	0712      	lsls	r2, r2, #28
 8004dde:	d464      	bmi.n	8004eaa <__ssvfiscanf_r+0x22a>
 8004de0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	dc73      	bgt.n	8004ece <__ssvfiscanf_r+0x24e>
 8004de6:	466b      	mov	r3, sp
 8004de8:	4622      	mov	r2, r4
 8004dea:	a941      	add	r1, sp, #260	; 0x104
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 f897 	bl	8004f20 <_scanf_chars>
 8004df2:	2801      	cmp	r0, #1
 8004df4:	f000 8089 	beq.w	8004f0a <__ssvfiscanf_r+0x28a>
 8004df8:	2802      	cmp	r0, #2
 8004dfa:	f47f af71 	bne.w	8004ce0 <__ssvfiscanf_r+0x60>
 8004dfe:	e01d      	b.n	8004e3c <__ssvfiscanf_r+0x1bc>
 8004e00:	2b75      	cmp	r3, #117	; 0x75
 8004e02:	d0d1      	beq.n	8004da8 <__ssvfiscanf_r+0x128>
 8004e04:	2b78      	cmp	r3, #120	; 0x78
 8004e06:	d0c0      	beq.n	8004d8a <__ssvfiscanf_r+0x10a>
 8004e08:	2b73      	cmp	r3, #115	; 0x73
 8004e0a:	d1af      	bne.n	8004d6c <__ssvfiscanf_r+0xec>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e7d8      	b.n	8004dc2 <__ssvfiscanf_r+0x142>
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dd0c      	ble.n	8004e30 <__ssvfiscanf_r+0x1b0>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	455a      	cmp	r2, fp
 8004e1c:	d175      	bne.n	8004f0a <__ssvfiscanf_r+0x28a>
 8004e1e:	3301      	adds	r3, #1
 8004e20:	6862      	ldr	r2, [r4, #4]
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e26:	3a01      	subs	r2, #1
 8004e28:	3301      	adds	r3, #1
 8004e2a:	6062      	str	r2, [r4, #4]
 8004e2c:	9345      	str	r3, [sp, #276]	; 0x114
 8004e2e:	e757      	b.n	8004ce0 <__ssvfiscanf_r+0x60>
 8004e30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e32:	4621      	mov	r1, r4
 8004e34:	4630      	mov	r0, r6
 8004e36:	4798      	blx	r3
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d0ec      	beq.n	8004e16 <__ssvfiscanf_r+0x196>
 8004e3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d159      	bne.n	8004ef6 <__ssvfiscanf_r+0x276>
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	e05c      	b.n	8004f02 <__ssvfiscanf_r+0x282>
 8004e48:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e4a:	f042 0220 	orr.w	r2, r2, #32
 8004e4e:	9241      	str	r2, [sp, #260]	; 0x104
 8004e50:	e79b      	b.n	8004d8a <__ssvfiscanf_r+0x10a>
 8004e52:	2308      	movs	r3, #8
 8004e54:	9342      	str	r3, [sp, #264]	; 0x108
 8004e56:	2304      	movs	r3, #4
 8004e58:	e7b3      	b.n	8004dc2 <__ssvfiscanf_r+0x142>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	f000 f9c7 	bl	80051f0 <__sccl>
 8004e62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e68:	9341      	str	r3, [sp, #260]	; 0x104
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7a8      	b.n	8004dc2 <__ssvfiscanf_r+0x142>
 8004e70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	9341      	str	r3, [sp, #260]	; 0x104
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e7a2      	b.n	8004dc2 <__ssvfiscanf_r+0x142>
 8004e7c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004e7e:	06c3      	lsls	r3, r0, #27
 8004e80:	f53f af2e 	bmi.w	8004ce0 <__ssvfiscanf_r+0x60>
 8004e84:	9b00      	ldr	r3, [sp, #0]
 8004e86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e88:	1d19      	adds	r1, r3, #4
 8004e8a:	9100      	str	r1, [sp, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	07c0      	lsls	r0, r0, #31
 8004e90:	bf4c      	ite	mi
 8004e92:	801a      	strhmi	r2, [r3, #0]
 8004e94:	601a      	strpl	r2, [r3, #0]
 8004e96:	e723      	b.n	8004ce0 <__ssvfiscanf_r+0x60>
 8004e98:	2305      	movs	r3, #5
 8004e9a:	e792      	b.n	8004dc2 <__ssvfiscanf_r+0x142>
 8004e9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4798      	blx	r3
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d090      	beq.n	8004dca <__ssvfiscanf_r+0x14a>
 8004ea8:	e7c8      	b.n	8004e3c <__ssvfiscanf_r+0x1bc>
 8004eaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004eac:	3201      	adds	r2, #1
 8004eae:	9245      	str	r2, [sp, #276]	; 0x114
 8004eb0:	6862      	ldr	r2, [r4, #4]
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	6062      	str	r2, [r4, #4]
 8004eb8:	dd02      	ble.n	8004ec0 <__ssvfiscanf_r+0x240>
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	e787      	b.n	8004dd0 <__ssvfiscanf_r+0x150>
 8004ec0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	4798      	blx	r3
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d081      	beq.n	8004dd0 <__ssvfiscanf_r+0x150>
 8004ecc:	e7b6      	b.n	8004e3c <__ssvfiscanf_r+0x1bc>
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	dc06      	bgt.n	8004ee0 <__ssvfiscanf_r+0x260>
 8004ed2:	466b      	mov	r3, sp
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	a941      	add	r1, sp, #260	; 0x104
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 f885 	bl	8004fe8 <_scanf_i>
 8004ede:	e788      	b.n	8004df2 <__ssvfiscanf_r+0x172>
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <__ssvfiscanf_r+0x29c>)
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f43f aefc 	beq.w	8004ce0 <__ssvfiscanf_r+0x60>
 8004ee8:	466b      	mov	r3, sp
 8004eea:	4622      	mov	r2, r4
 8004eec:	a941      	add	r1, sp, #260	; 0x104
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f3af 8000 	nop.w
 8004ef4:	e77d      	b.n	8004df2 <__ssvfiscanf_r+0x172>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004efc:	bf18      	it	ne
 8004efe:	f04f 30ff 	movne.w	r0, #4294967295
 8004f02:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004f0c:	e7f9      	b.n	8004f02 <__ssvfiscanf_r+0x282>
 8004f0e:	bf00      	nop
 8004f10:	08004bcd 	.word	0x08004bcd
 8004f14:	08004c47 	.word	0x08004c47
 8004f18:	08005658 	.word	0x08005658
 8004f1c:	00000000 	.word	0x00000000

08004f20 <_scanf_chars>:
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	4615      	mov	r5, r2
 8004f26:	688a      	ldr	r2, [r1, #8]
 8004f28:	4680      	mov	r8, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b932      	cbnz	r2, 8004f3c <_scanf_chars+0x1c>
 8004f2e:	698a      	ldr	r2, [r1, #24]
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	bf14      	ite	ne
 8004f34:	f04f 32ff 	movne.w	r2, #4294967295
 8004f38:	2201      	moveq	r2, #1
 8004f3a:	608a      	str	r2, [r1, #8]
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	06d1      	lsls	r1, r2, #27
 8004f40:	bf5f      	itttt	pl
 8004f42:	681a      	ldrpl	r2, [r3, #0]
 8004f44:	1d11      	addpl	r1, r2, #4
 8004f46:	6019      	strpl	r1, [r3, #0]
 8004f48:	6817      	ldrpl	r7, [r2, #0]
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	69a3      	ldr	r3, [r4, #24]
 8004f4e:	b1db      	cbz	r3, 8004f88 <_scanf_chars+0x68>
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <_scanf_chars+0x44>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	6962      	ldr	r2, [r4, #20]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	b9a3      	cbnz	r3, 8004f88 <_scanf_chars+0x68>
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	d132      	bne.n	8004fc8 <_scanf_chars+0xa8>
 8004f62:	e006      	b.n	8004f72 <_scanf_chars+0x52>
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d007      	beq.n	8004f78 <_scanf_chars+0x58>
 8004f68:	2e00      	cmp	r6, #0
 8004f6a:	d12d      	bne.n	8004fc8 <_scanf_chars+0xa8>
 8004f6c:	69a3      	ldr	r3, [r4, #24]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d12a      	bne.n	8004fc8 <_scanf_chars+0xa8>
 8004f72:	2001      	movs	r0, #1
 8004f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f78:	f000 fac4 	bl	8005504 <__locale_ctype_ptr>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	4418      	add	r0, r3
 8004f82:	7843      	ldrb	r3, [r0, #1]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	d4ef      	bmi.n	8004f68 <_scanf_chars+0x48>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	06da      	lsls	r2, r3, #27
 8004f8c:	bf5e      	ittt	pl
 8004f8e:	682b      	ldrpl	r3, [r5, #0]
 8004f90:	781b      	ldrbpl	r3, [r3, #0]
 8004f92:	703b      	strbpl	r3, [r7, #0]
 8004f94:	682a      	ldr	r2, [r5, #0]
 8004f96:	686b      	ldr	r3, [r5, #4]
 8004f98:	f102 0201 	add.w	r2, r2, #1
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	68a2      	ldr	r2, [r4, #8]
 8004fa0:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fa4:	f102 32ff 	add.w	r2, r2, #4294967295
 8004fa8:	606b      	str	r3, [r5, #4]
 8004faa:	f106 0601 	add.w	r6, r6, #1
 8004fae:	bf58      	it	pl
 8004fb0:	3701      	addpl	r7, #1
 8004fb2:	60a2      	str	r2, [r4, #8]
 8004fb4:	b142      	cbz	r2, 8004fc8 <_scanf_chars+0xa8>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	dcc8      	bgt.n	8004f4c <_scanf_chars+0x2c>
 8004fba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	4798      	blx	r3
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d0c1      	beq.n	8004f4c <_scanf_chars+0x2c>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f013 0310 	ands.w	r3, r3, #16
 8004fce:	d105      	bne.n	8004fdc <_scanf_chars+0xbc>
 8004fd0:	68e2      	ldr	r2, [r4, #12]
 8004fd2:	3201      	adds	r2, #1
 8004fd4:	60e2      	str	r2, [r4, #12]
 8004fd6:	69a2      	ldr	r2, [r4, #24]
 8004fd8:	b102      	cbz	r2, 8004fdc <_scanf_chars+0xbc>
 8004fda:	703b      	strb	r3, [r7, #0]
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	441e      	add	r6, r3
 8004fe0:	6126      	str	r6, [r4, #16]
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e7c6      	b.n	8004f74 <_scanf_chars+0x54>
	...

08004fe8 <_scanf_i>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	469a      	mov	sl, r3
 8004fee:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <_scanf_i+0x1d8>)
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	4683      	mov	fp, r0
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	ab03      	add	r3, sp, #12
 8004ffe:	68a7      	ldr	r7, [r4, #8]
 8005000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005004:	4b6f      	ldr	r3, [pc, #444]	; (80051c4 <_scanf_i+0x1dc>)
 8005006:	69a1      	ldr	r1, [r4, #24]
 8005008:	4a6f      	ldr	r2, [pc, #444]	; (80051c8 <_scanf_i+0x1e0>)
 800500a:	2903      	cmp	r1, #3
 800500c:	bf08      	it	eq
 800500e:	461a      	moveq	r2, r3
 8005010:	1e7b      	subs	r3, r7, #1
 8005012:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005016:	bf84      	itt	hi
 8005018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800501c:	60a3      	strhi	r3, [r4, #8]
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	9200      	str	r2, [sp, #0]
 8005022:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005026:	bf88      	it	hi
 8005028:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800502c:	f104 091c 	add.w	r9, r4, #28
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	bf8c      	ite	hi
 8005034:	197f      	addhi	r7, r7, r5
 8005036:	2700      	movls	r7, #0
 8005038:	464b      	mov	r3, r9
 800503a:	f04f 0800 	mov.w	r8, #0
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	6831      	ldr	r1, [r6, #0]
 8005042:	ab03      	add	r3, sp, #12
 8005044:	2202      	movs	r2, #2
 8005046:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800504a:	7809      	ldrb	r1, [r1, #0]
 800504c:	f7fb f8f8 	bl	8000240 <memchr>
 8005050:	9b01      	ldr	r3, [sp, #4]
 8005052:	b330      	cbz	r0, 80050a2 <_scanf_i+0xba>
 8005054:	f1b8 0f01 	cmp.w	r8, #1
 8005058:	d15a      	bne.n	8005110 <_scanf_i+0x128>
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	b92a      	cbnz	r2, 800506a <_scanf_i+0x82>
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	2108      	movs	r1, #8
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	6061      	str	r1, [r4, #4]
 8005068:	6022      	str	r2, [r4, #0]
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	68a2      	ldr	r2, [r4, #8]
 8005074:	1e51      	subs	r1, r2, #1
 8005076:	60a1      	str	r1, [r4, #8]
 8005078:	b19a      	cbz	r2, 80050a2 <_scanf_i+0xba>
 800507a:	6832      	ldr	r2, [r6, #0]
 800507c:	1c51      	adds	r1, r2, #1
 800507e:	6031      	str	r1, [r6, #0]
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	1c5d      	adds	r5, r3, #1
 8005086:	6873      	ldr	r3, [r6, #4]
 8005088:	3b01      	subs	r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	6073      	str	r3, [r6, #4]
 800508e:	dc07      	bgt.n	80050a0 <_scanf_i+0xb8>
 8005090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005094:	4631      	mov	r1, r6
 8005096:	4658      	mov	r0, fp
 8005098:	4798      	blx	r3
 800509a:	2800      	cmp	r0, #0
 800509c:	f040 8086 	bne.w	80051ac <_scanf_i+0x1c4>
 80050a0:	462b      	mov	r3, r5
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	f1b8 0f03 	cmp.w	r8, #3
 80050aa:	d1c8      	bne.n	800503e <_scanf_i+0x56>
 80050ac:	6862      	ldr	r2, [r4, #4]
 80050ae:	b90a      	cbnz	r2, 80050b4 <_scanf_i+0xcc>
 80050b0:	220a      	movs	r2, #10
 80050b2:	6062      	str	r2, [r4, #4]
 80050b4:	6862      	ldr	r2, [r4, #4]
 80050b6:	4945      	ldr	r1, [pc, #276]	; (80051cc <_scanf_i+0x1e4>)
 80050b8:	6960      	ldr	r0, [r4, #20]
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	1a89      	subs	r1, r1, r2
 80050be:	f000 f897 	bl	80051f0 <__sccl>
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	f04f 0800 	mov.w	r8, #0
 80050c8:	461d      	mov	r5, r3
 80050ca:	68a3      	ldr	r3, [r4, #8]
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03a      	beq.n	8005148 <_scanf_i+0x160>
 80050d2:	6831      	ldr	r1, [r6, #0]
 80050d4:	6960      	ldr	r0, [r4, #20]
 80050d6:	f891 c000 	ldrb.w	ip, [r1]
 80050da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80050de:	2800      	cmp	r0, #0
 80050e0:	d032      	beq.n	8005148 <_scanf_i+0x160>
 80050e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80050e6:	d121      	bne.n	800512c <_scanf_i+0x144>
 80050e8:	0510      	lsls	r0, r2, #20
 80050ea:	d51f      	bpl.n	800512c <_scanf_i+0x144>
 80050ec:	f108 0801 	add.w	r8, r8, #1
 80050f0:	b117      	cbz	r7, 80050f8 <_scanf_i+0x110>
 80050f2:	3301      	adds	r3, #1
 80050f4:	3f01      	subs	r7, #1
 80050f6:	60a3      	str	r3, [r4, #8]
 80050f8:	6873      	ldr	r3, [r6, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	6073      	str	r3, [r6, #4]
 8005100:	dd1b      	ble.n	800513a <_scanf_i+0x152>
 8005102:	6833      	ldr	r3, [r6, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	6033      	str	r3, [r6, #0]
 8005108:	68a3      	ldr	r3, [r4, #8]
 800510a:	3b01      	subs	r3, #1
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	e7dc      	b.n	80050ca <_scanf_i+0xe2>
 8005110:	f1b8 0f02 	cmp.w	r8, #2
 8005114:	d1ad      	bne.n	8005072 <_scanf_i+0x8a>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800511c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005120:	d1bf      	bne.n	80050a2 <_scanf_i+0xba>
 8005122:	2110      	movs	r1, #16
 8005124:	6061      	str	r1, [r4, #4]
 8005126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800512a:	e7a1      	b.n	8005070 <_scanf_i+0x88>
 800512c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005130:	6022      	str	r2, [r4, #0]
 8005132:	780b      	ldrb	r3, [r1, #0]
 8005134:	702b      	strb	r3, [r5, #0]
 8005136:	3501      	adds	r5, #1
 8005138:	e7de      	b.n	80050f8 <_scanf_i+0x110>
 800513a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800513e:	4631      	mov	r1, r6
 8005140:	4658      	mov	r0, fp
 8005142:	4798      	blx	r3
 8005144:	2800      	cmp	r0, #0
 8005146:	d0df      	beq.n	8005108 <_scanf_i+0x120>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	05d9      	lsls	r1, r3, #23
 800514c:	d50c      	bpl.n	8005168 <_scanf_i+0x180>
 800514e:	454d      	cmp	r5, r9
 8005150:	d908      	bls.n	8005164 <_scanf_i+0x17c>
 8005152:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800515a:	4632      	mov	r2, r6
 800515c:	4658      	mov	r0, fp
 800515e:	4798      	blx	r3
 8005160:	1e6f      	subs	r7, r5, #1
 8005162:	463d      	mov	r5, r7
 8005164:	454d      	cmp	r5, r9
 8005166:	d029      	beq.n	80051bc <_scanf_i+0x1d4>
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	f012 0210 	ands.w	r2, r2, #16
 800516e:	d113      	bne.n	8005198 <_scanf_i+0x1b0>
 8005170:	702a      	strb	r2, [r5, #0]
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	9e00      	ldr	r6, [sp, #0]
 8005176:	4649      	mov	r1, r9
 8005178:	4658      	mov	r0, fp
 800517a:	47b0      	blx	r6
 800517c:	f8da 3000 	ldr.w	r3, [sl]
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	f8ca 2000 	str.w	r2, [sl]
 8005188:	f011 0f20 	tst.w	r1, #32
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	d010      	beq.n	80051b2 <_scanf_i+0x1ca>
 8005190:	6018      	str	r0, [r3, #0]
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60e3      	str	r3, [r4, #12]
 8005198:	eba5 0509 	sub.w	r5, r5, r9
 800519c:	44a8      	add	r8, r5
 800519e:	6925      	ldr	r5, [r4, #16]
 80051a0:	4445      	add	r5, r8
 80051a2:	6125      	str	r5, [r4, #16]
 80051a4:	2000      	movs	r0, #0
 80051a6:	b007      	add	sp, #28
 80051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ac:	f04f 0800 	mov.w	r8, #0
 80051b0:	e7ca      	b.n	8005148 <_scanf_i+0x160>
 80051b2:	07ca      	lsls	r2, r1, #31
 80051b4:	bf4c      	ite	mi
 80051b6:	8018      	strhmi	r0, [r3, #0]
 80051b8:	6018      	strpl	r0, [r3, #0]
 80051ba:	e7ea      	b.n	8005192 <_scanf_i+0x1aa>
 80051bc:	2001      	movs	r0, #1
 80051be:	e7f2      	b.n	80051a6 <_scanf_i+0x1be>
 80051c0:	08005634 	.word	0x08005634
 80051c4:	0800534d 	.word	0x0800534d
 80051c8:	08005465 	.word	0x08005465
 80051cc:	0800566c 	.word	0x0800566c

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4c06      	ldr	r4, [pc, #24]	; (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4605      	mov	r5, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	f7fb fdb0 	bl	8000d40 <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	2000070c 	.word	0x2000070c

080051f0 <__sccl>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	780b      	ldrb	r3, [r1, #0]
 80051f4:	2b5e      	cmp	r3, #94	; 0x5e
 80051f6:	bf13      	iteet	ne
 80051f8:	1c4a      	addne	r2, r1, #1
 80051fa:	1c8a      	addeq	r2, r1, #2
 80051fc:	784b      	ldrbeq	r3, [r1, #1]
 80051fe:	2100      	movne	r1, #0
 8005200:	bf08      	it	eq
 8005202:	2101      	moveq	r1, #1
 8005204:	1e44      	subs	r4, r0, #1
 8005206:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800520a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800520e:	42ac      	cmp	r4, r5
 8005210:	d1fb      	bne.n	800520a <__sccl+0x1a>
 8005212:	b913      	cbnz	r3, 800521a <__sccl+0x2a>
 8005214:	3a01      	subs	r2, #1
 8005216:	4610      	mov	r0, r2
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	f081 0401 	eor.w	r4, r1, #1
 800521e:	54c4      	strb	r4, [r0, r3]
 8005220:	1c51      	adds	r1, r2, #1
 8005222:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8005226:	2d2d      	cmp	r5, #45	; 0x2d
 8005228:	f101 36ff 	add.w	r6, r1, #4294967295
 800522c:	460a      	mov	r2, r1
 800522e:	d006      	beq.n	800523e <__sccl+0x4e>
 8005230:	2d5d      	cmp	r5, #93	; 0x5d
 8005232:	d0f0      	beq.n	8005216 <__sccl+0x26>
 8005234:	b90d      	cbnz	r5, 800523a <__sccl+0x4a>
 8005236:	4632      	mov	r2, r6
 8005238:	e7ed      	b.n	8005216 <__sccl+0x26>
 800523a:	462b      	mov	r3, r5
 800523c:	e7ef      	b.n	800521e <__sccl+0x2e>
 800523e:	780e      	ldrb	r6, [r1, #0]
 8005240:	2e5d      	cmp	r6, #93	; 0x5d
 8005242:	d0fa      	beq.n	800523a <__sccl+0x4a>
 8005244:	42b3      	cmp	r3, r6
 8005246:	dcf8      	bgt.n	800523a <__sccl+0x4a>
 8005248:	3301      	adds	r3, #1
 800524a:	429e      	cmp	r6, r3
 800524c:	54c4      	strb	r4, [r0, r3]
 800524e:	dcfb      	bgt.n	8005248 <__sccl+0x58>
 8005250:	3102      	adds	r1, #2
 8005252:	e7e6      	b.n	8005222 <__sccl+0x32>

08005254 <_strtol_l.isra.0>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	4680      	mov	r8, r0
 800525a:	4689      	mov	r9, r1
 800525c:	4692      	mov	sl, r2
 800525e:	461e      	mov	r6, r3
 8005260:	460f      	mov	r7, r1
 8005262:	463d      	mov	r5, r7
 8005264:	9808      	ldr	r0, [sp, #32]
 8005266:	f815 4b01 	ldrb.w	r4, [r5], #1
 800526a:	f000 f947 	bl	80054fc <__locale_ctype_ptr_l>
 800526e:	4420      	add	r0, r4
 8005270:	7843      	ldrb	r3, [r0, #1]
 8005272:	f013 0308 	ands.w	r3, r3, #8
 8005276:	d132      	bne.n	80052de <_strtol_l.isra.0+0x8a>
 8005278:	2c2d      	cmp	r4, #45	; 0x2d
 800527a:	d132      	bne.n	80052e2 <_strtol_l.isra.0+0x8e>
 800527c:	787c      	ldrb	r4, [r7, #1]
 800527e:	1cbd      	adds	r5, r7, #2
 8005280:	2201      	movs	r2, #1
 8005282:	2e00      	cmp	r6, #0
 8005284:	d05d      	beq.n	8005342 <_strtol_l.isra.0+0xee>
 8005286:	2e10      	cmp	r6, #16
 8005288:	d109      	bne.n	800529e <_strtol_l.isra.0+0x4a>
 800528a:	2c30      	cmp	r4, #48	; 0x30
 800528c:	d107      	bne.n	800529e <_strtol_l.isra.0+0x4a>
 800528e:	782b      	ldrb	r3, [r5, #0]
 8005290:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005294:	2b58      	cmp	r3, #88	; 0x58
 8005296:	d14f      	bne.n	8005338 <_strtol_l.isra.0+0xe4>
 8005298:	786c      	ldrb	r4, [r5, #1]
 800529a:	2610      	movs	r6, #16
 800529c:	3502      	adds	r5, #2
 800529e:	2a00      	cmp	r2, #0
 80052a0:	bf14      	ite	ne
 80052a2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80052a6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80052aa:	2700      	movs	r7, #0
 80052ac:	fbb1 fcf6 	udiv	ip, r1, r6
 80052b0:	4638      	mov	r0, r7
 80052b2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80052b6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	d817      	bhi.n	80052ee <_strtol_l.isra.0+0x9a>
 80052be:	461c      	mov	r4, r3
 80052c0:	42a6      	cmp	r6, r4
 80052c2:	dd23      	ble.n	800530c <_strtol_l.isra.0+0xb8>
 80052c4:	1c7b      	adds	r3, r7, #1
 80052c6:	d007      	beq.n	80052d8 <_strtol_l.isra.0+0x84>
 80052c8:	4584      	cmp	ip, r0
 80052ca:	d31c      	bcc.n	8005306 <_strtol_l.isra.0+0xb2>
 80052cc:	d101      	bne.n	80052d2 <_strtol_l.isra.0+0x7e>
 80052ce:	45a6      	cmp	lr, r4
 80052d0:	db19      	blt.n	8005306 <_strtol_l.isra.0+0xb2>
 80052d2:	fb00 4006 	mla	r0, r0, r6, r4
 80052d6:	2701      	movs	r7, #1
 80052d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052dc:	e7eb      	b.n	80052b6 <_strtol_l.isra.0+0x62>
 80052de:	462f      	mov	r7, r5
 80052e0:	e7bf      	b.n	8005262 <_strtol_l.isra.0+0xe>
 80052e2:	2c2b      	cmp	r4, #43	; 0x2b
 80052e4:	bf04      	itt	eq
 80052e6:	1cbd      	addeq	r5, r7, #2
 80052e8:	787c      	ldrbeq	r4, [r7, #1]
 80052ea:	461a      	mov	r2, r3
 80052ec:	e7c9      	b.n	8005282 <_strtol_l.isra.0+0x2e>
 80052ee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80052f2:	2b19      	cmp	r3, #25
 80052f4:	d801      	bhi.n	80052fa <_strtol_l.isra.0+0xa6>
 80052f6:	3c37      	subs	r4, #55	; 0x37
 80052f8:	e7e2      	b.n	80052c0 <_strtol_l.isra.0+0x6c>
 80052fa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80052fe:	2b19      	cmp	r3, #25
 8005300:	d804      	bhi.n	800530c <_strtol_l.isra.0+0xb8>
 8005302:	3c57      	subs	r4, #87	; 0x57
 8005304:	e7dc      	b.n	80052c0 <_strtol_l.isra.0+0x6c>
 8005306:	f04f 37ff 	mov.w	r7, #4294967295
 800530a:	e7e5      	b.n	80052d8 <_strtol_l.isra.0+0x84>
 800530c:	1c7b      	adds	r3, r7, #1
 800530e:	d108      	bne.n	8005322 <_strtol_l.isra.0+0xce>
 8005310:	2322      	movs	r3, #34	; 0x22
 8005312:	f8c8 3000 	str.w	r3, [r8]
 8005316:	4608      	mov	r0, r1
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	d107      	bne.n	800532e <_strtol_l.isra.0+0xda>
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005322:	b102      	cbz	r2, 8005326 <_strtol_l.isra.0+0xd2>
 8005324:	4240      	negs	r0, r0
 8005326:	f1ba 0f00 	cmp.w	sl, #0
 800532a:	d0f8      	beq.n	800531e <_strtol_l.isra.0+0xca>
 800532c:	b10f      	cbz	r7, 8005332 <_strtol_l.isra.0+0xde>
 800532e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005332:	f8ca 9000 	str.w	r9, [sl]
 8005336:	e7f2      	b.n	800531e <_strtol_l.isra.0+0xca>
 8005338:	2430      	movs	r4, #48	; 0x30
 800533a:	2e00      	cmp	r6, #0
 800533c:	d1af      	bne.n	800529e <_strtol_l.isra.0+0x4a>
 800533e:	2608      	movs	r6, #8
 8005340:	e7ad      	b.n	800529e <_strtol_l.isra.0+0x4a>
 8005342:	2c30      	cmp	r4, #48	; 0x30
 8005344:	d0a3      	beq.n	800528e <_strtol_l.isra.0+0x3a>
 8005346:	260a      	movs	r6, #10
 8005348:	e7a9      	b.n	800529e <_strtol_l.isra.0+0x4a>
	...

0800534c <_strtol_r>:
 800534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800534e:	4c06      	ldr	r4, [pc, #24]	; (8005368 <_strtol_r+0x1c>)
 8005350:	4d06      	ldr	r5, [pc, #24]	; (800536c <_strtol_r+0x20>)
 8005352:	6824      	ldr	r4, [r4, #0]
 8005354:	6a24      	ldr	r4, [r4, #32]
 8005356:	2c00      	cmp	r4, #0
 8005358:	bf08      	it	eq
 800535a:	462c      	moveq	r4, r5
 800535c:	9400      	str	r4, [sp, #0]
 800535e:	f7ff ff79 	bl	8005254 <_strtol_l.isra.0>
 8005362:	b003      	add	sp, #12
 8005364:	bd30      	pop	{r4, r5, pc}
 8005366:	bf00      	nop
 8005368:	2000000c 	.word	0x2000000c
 800536c:	20000070 	.word	0x20000070

08005370 <_strtoul_l.isra.0>:
 8005370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	4680      	mov	r8, r0
 8005376:	4689      	mov	r9, r1
 8005378:	4692      	mov	sl, r2
 800537a:	461e      	mov	r6, r3
 800537c:	460f      	mov	r7, r1
 800537e:	463d      	mov	r5, r7
 8005380:	9808      	ldr	r0, [sp, #32]
 8005382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005386:	f000 f8b9 	bl	80054fc <__locale_ctype_ptr_l>
 800538a:	4420      	add	r0, r4
 800538c:	7843      	ldrb	r3, [r0, #1]
 800538e:	f013 0308 	ands.w	r3, r3, #8
 8005392:	d130      	bne.n	80053f6 <_strtoul_l.isra.0+0x86>
 8005394:	2c2d      	cmp	r4, #45	; 0x2d
 8005396:	d130      	bne.n	80053fa <_strtoul_l.isra.0+0x8a>
 8005398:	787c      	ldrb	r4, [r7, #1]
 800539a:	1cbd      	adds	r5, r7, #2
 800539c:	2101      	movs	r1, #1
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d05c      	beq.n	800545c <_strtoul_l.isra.0+0xec>
 80053a2:	2e10      	cmp	r6, #16
 80053a4:	d109      	bne.n	80053ba <_strtoul_l.isra.0+0x4a>
 80053a6:	2c30      	cmp	r4, #48	; 0x30
 80053a8:	d107      	bne.n	80053ba <_strtoul_l.isra.0+0x4a>
 80053aa:	782b      	ldrb	r3, [r5, #0]
 80053ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053b0:	2b58      	cmp	r3, #88	; 0x58
 80053b2:	d14e      	bne.n	8005452 <_strtoul_l.isra.0+0xe2>
 80053b4:	786c      	ldrb	r4, [r5, #1]
 80053b6:	2610      	movs	r6, #16
 80053b8:	3502      	adds	r5, #2
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	2300      	movs	r3, #0
 80053c0:	fbb2 f2f6 	udiv	r2, r2, r6
 80053c4:	fb06 fc02 	mul.w	ip, r6, r2
 80053c8:	ea6f 0c0c 	mvn.w	ip, ip
 80053cc:	4618      	mov	r0, r3
 80053ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80053d2:	2f09      	cmp	r7, #9
 80053d4:	d817      	bhi.n	8005406 <_strtoul_l.isra.0+0x96>
 80053d6:	463c      	mov	r4, r7
 80053d8:	42a6      	cmp	r6, r4
 80053da:	dd23      	ble.n	8005424 <_strtoul_l.isra.0+0xb4>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	db1e      	blt.n	800541e <_strtoul_l.isra.0+0xae>
 80053e0:	4282      	cmp	r2, r0
 80053e2:	d31c      	bcc.n	800541e <_strtoul_l.isra.0+0xae>
 80053e4:	d101      	bne.n	80053ea <_strtoul_l.isra.0+0x7a>
 80053e6:	45a4      	cmp	ip, r4
 80053e8:	db19      	blt.n	800541e <_strtoul_l.isra.0+0xae>
 80053ea:	fb00 4006 	mla	r0, r0, r6, r4
 80053ee:	2301      	movs	r3, #1
 80053f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053f4:	e7eb      	b.n	80053ce <_strtoul_l.isra.0+0x5e>
 80053f6:	462f      	mov	r7, r5
 80053f8:	e7c1      	b.n	800537e <_strtoul_l.isra.0+0xe>
 80053fa:	2c2b      	cmp	r4, #43	; 0x2b
 80053fc:	bf04      	itt	eq
 80053fe:	1cbd      	addeq	r5, r7, #2
 8005400:	787c      	ldrbeq	r4, [r7, #1]
 8005402:	4619      	mov	r1, r3
 8005404:	e7cb      	b.n	800539e <_strtoul_l.isra.0+0x2e>
 8005406:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800540a:	2f19      	cmp	r7, #25
 800540c:	d801      	bhi.n	8005412 <_strtoul_l.isra.0+0xa2>
 800540e:	3c37      	subs	r4, #55	; 0x37
 8005410:	e7e2      	b.n	80053d8 <_strtoul_l.isra.0+0x68>
 8005412:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005416:	2f19      	cmp	r7, #25
 8005418:	d804      	bhi.n	8005424 <_strtoul_l.isra.0+0xb4>
 800541a:	3c57      	subs	r4, #87	; 0x57
 800541c:	e7dc      	b.n	80053d8 <_strtoul_l.isra.0+0x68>
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e7e5      	b.n	80053f0 <_strtoul_l.isra.0+0x80>
 8005424:	2b00      	cmp	r3, #0
 8005426:	da09      	bge.n	800543c <_strtoul_l.isra.0+0xcc>
 8005428:	2322      	movs	r3, #34	; 0x22
 800542a:	f8c8 3000 	str.w	r3, [r8]
 800542e:	f04f 30ff 	mov.w	r0, #4294967295
 8005432:	f1ba 0f00 	cmp.w	sl, #0
 8005436:	d107      	bne.n	8005448 <_strtoul_l.isra.0+0xd8>
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	b101      	cbz	r1, 8005440 <_strtoul_l.isra.0+0xd0>
 800543e:	4240      	negs	r0, r0
 8005440:	f1ba 0f00 	cmp.w	sl, #0
 8005444:	d0f8      	beq.n	8005438 <_strtoul_l.isra.0+0xc8>
 8005446:	b10b      	cbz	r3, 800544c <_strtoul_l.isra.0+0xdc>
 8005448:	f105 39ff 	add.w	r9, r5, #4294967295
 800544c:	f8ca 9000 	str.w	r9, [sl]
 8005450:	e7f2      	b.n	8005438 <_strtoul_l.isra.0+0xc8>
 8005452:	2430      	movs	r4, #48	; 0x30
 8005454:	2e00      	cmp	r6, #0
 8005456:	d1b0      	bne.n	80053ba <_strtoul_l.isra.0+0x4a>
 8005458:	2608      	movs	r6, #8
 800545a:	e7ae      	b.n	80053ba <_strtoul_l.isra.0+0x4a>
 800545c:	2c30      	cmp	r4, #48	; 0x30
 800545e:	d0a4      	beq.n	80053aa <_strtoul_l.isra.0+0x3a>
 8005460:	260a      	movs	r6, #10
 8005462:	e7aa      	b.n	80053ba <_strtoul_l.isra.0+0x4a>

08005464 <_strtoul_r>:
 8005464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005466:	4c06      	ldr	r4, [pc, #24]	; (8005480 <_strtoul_r+0x1c>)
 8005468:	4d06      	ldr	r5, [pc, #24]	; (8005484 <_strtoul_r+0x20>)
 800546a:	6824      	ldr	r4, [r4, #0]
 800546c:	6a24      	ldr	r4, [r4, #32]
 800546e:	2c00      	cmp	r4, #0
 8005470:	bf08      	it	eq
 8005472:	462c      	moveq	r4, r5
 8005474:	9400      	str	r4, [sp, #0]
 8005476:	f7ff ff7b 	bl	8005370 <_strtoul_l.isra.0>
 800547a:	b003      	add	sp, #12
 800547c:	bd30      	pop	{r4, r5, pc}
 800547e:	bf00      	nop
 8005480:	2000000c 	.word	0x2000000c
 8005484:	20000070 	.word	0x20000070

08005488 <__submore>:
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	460c      	mov	r4, r1
 800548e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005494:	4299      	cmp	r1, r3
 8005496:	d11d      	bne.n	80054d4 <__submore+0x4c>
 8005498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800549c:	f7ff fb3c 	bl	8004b18 <_malloc_r>
 80054a0:	b918      	cbnz	r0, 80054aa <__submore+0x22>
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80054b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80054b4:	6360      	str	r0, [r4, #52]	; 0x34
 80054b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80054ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80054be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80054c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80054c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80054ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80054ce:	6020      	str	r0, [r4, #0]
 80054d0:	2000      	movs	r0, #0
 80054d2:	e7e8      	b.n	80054a6 <__submore+0x1e>
 80054d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80054d6:	0077      	lsls	r7, r6, #1
 80054d8:	463a      	mov	r2, r7
 80054da:	f000 f840 	bl	800555e <_realloc_r>
 80054de:	4605      	mov	r5, r0
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d0de      	beq.n	80054a2 <__submore+0x1a>
 80054e4:	eb00 0806 	add.w	r8, r0, r6
 80054e8:	4601      	mov	r1, r0
 80054ea:	4632      	mov	r2, r6
 80054ec:	4640      	mov	r0, r8
 80054ee:	f000 f829 	bl	8005544 <memcpy>
 80054f2:	f8c4 8000 	str.w	r8, [r4]
 80054f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80054fa:	e7e9      	b.n	80054d0 <__submore+0x48>

080054fc <__locale_ctype_ptr_l>:
 80054fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005500:	4770      	bx	lr
	...

08005504 <__locale_ctype_ptr>:
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <__locale_ctype_ptr+0x14>)
 8005506:	4a05      	ldr	r2, [pc, #20]	; (800551c <__locale_ctype_ptr+0x18>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf08      	it	eq
 8005510:	4613      	moveq	r3, r2
 8005512:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005516:	4770      	bx	lr
 8005518:	2000000c 	.word	0x2000000c
 800551c:	20000070 	.word	0x20000070

08005520 <__ascii_mbtowc>:
 8005520:	b082      	sub	sp, #8
 8005522:	b901      	cbnz	r1, 8005526 <__ascii_mbtowc+0x6>
 8005524:	a901      	add	r1, sp, #4
 8005526:	b142      	cbz	r2, 800553a <__ascii_mbtowc+0x1a>
 8005528:	b14b      	cbz	r3, 800553e <__ascii_mbtowc+0x1e>
 800552a:	7813      	ldrb	r3, [r2, #0]
 800552c:	600b      	str	r3, [r1, #0]
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	1c10      	adds	r0, r2, #0
 8005532:	bf18      	it	ne
 8005534:	2001      	movne	r0, #1
 8005536:	b002      	add	sp, #8
 8005538:	4770      	bx	lr
 800553a:	4610      	mov	r0, r2
 800553c:	e7fb      	b.n	8005536 <__ascii_mbtowc+0x16>
 800553e:	f06f 0001 	mvn.w	r0, #1
 8005542:	e7f8      	b.n	8005536 <__ascii_mbtowc+0x16>

08005544 <memcpy>:
 8005544:	b510      	push	{r4, lr}
 8005546:	1e43      	subs	r3, r0, #1
 8005548:	440a      	add	r2, r1
 800554a:	4291      	cmp	r1, r2
 800554c:	d100      	bne.n	8005550 <memcpy+0xc>
 800554e:	bd10      	pop	{r4, pc}
 8005550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005558:	e7f7      	b.n	800554a <memcpy+0x6>

0800555a <__malloc_lock>:
 800555a:	4770      	bx	lr

0800555c <__malloc_unlock>:
 800555c:	4770      	bx	lr

0800555e <_realloc_r>:
 800555e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005560:	4607      	mov	r7, r0
 8005562:	4614      	mov	r4, r2
 8005564:	460e      	mov	r6, r1
 8005566:	b921      	cbnz	r1, 8005572 <_realloc_r+0x14>
 8005568:	4611      	mov	r1, r2
 800556a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800556e:	f7ff bad3 	b.w	8004b18 <_malloc_r>
 8005572:	b922      	cbnz	r2, 800557e <_realloc_r+0x20>
 8005574:	f7ff fa82 	bl	8004a7c <_free_r>
 8005578:	4625      	mov	r5, r4
 800557a:	4628      	mov	r0, r5
 800557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557e:	f000 f821 	bl	80055c4 <_malloc_usable_size_r>
 8005582:	42a0      	cmp	r0, r4
 8005584:	d20f      	bcs.n	80055a6 <_realloc_r+0x48>
 8005586:	4621      	mov	r1, r4
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff fac5 	bl	8004b18 <_malloc_r>
 800558e:	4605      	mov	r5, r0
 8005590:	2800      	cmp	r0, #0
 8005592:	d0f2      	beq.n	800557a <_realloc_r+0x1c>
 8005594:	4631      	mov	r1, r6
 8005596:	4622      	mov	r2, r4
 8005598:	f7ff ffd4 	bl	8005544 <memcpy>
 800559c:	4631      	mov	r1, r6
 800559e:	4638      	mov	r0, r7
 80055a0:	f7ff fa6c 	bl	8004a7c <_free_r>
 80055a4:	e7e9      	b.n	800557a <_realloc_r+0x1c>
 80055a6:	4635      	mov	r5, r6
 80055a8:	e7e7      	b.n	800557a <_realloc_r+0x1c>

080055aa <__ascii_wctomb>:
 80055aa:	b149      	cbz	r1, 80055c0 <__ascii_wctomb+0x16>
 80055ac:	2aff      	cmp	r2, #255	; 0xff
 80055ae:	bf85      	ittet	hi
 80055b0:	238a      	movhi	r3, #138	; 0x8a
 80055b2:	6003      	strhi	r3, [r0, #0]
 80055b4:	700a      	strbls	r2, [r1, #0]
 80055b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80055ba:	bf98      	it	ls
 80055bc:	2001      	movls	r0, #1
 80055be:	4770      	bx	lr
 80055c0:	4608      	mov	r0, r1
 80055c2:	4770      	bx	lr

080055c4 <_malloc_usable_size_r>:
 80055c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c8:	1f18      	subs	r0, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfbc      	itt	lt
 80055ce:	580b      	ldrlt	r3, [r1, r0]
 80055d0:	18c0      	addlt	r0, r0, r3
 80055d2:	4770      	bx	lr

080055d4 <_init>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	bf00      	nop
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr

080055e0 <_fini>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr
