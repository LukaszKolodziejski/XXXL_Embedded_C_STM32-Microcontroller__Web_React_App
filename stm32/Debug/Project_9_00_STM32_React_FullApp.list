
Project_9_00_STM32_React_FullApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008680  08008680  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008688  08008688  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001f4  08008884  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08008884  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019373  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000351d  00000000  00000000  00039597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001338  00000000  00000000  0003dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029390  00000000  00000000  0003f308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013559  00000000  00000000  00068698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb8cd  00000000  00000000  0007bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001774be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  0017753c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008458 	.word	0x08008458

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	08008458 	.word	0x08008458

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b972 	b.w	8000e18 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	4688      	mov	r8, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14b      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	d967      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0720 	rsb	r7, r2, #32
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b72:	4095      	lsls	r5, r2
 8000b74:	ea47 0803 	orr.w	r8, r7, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b84:	fa1f fc85 	uxth.w	ip, r5
 8000b88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b90:	fb07 f10c 	mul.w	r1, r7, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9e:	f080 811b 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8118 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba8:	3f02      	subs	r7, #2
 8000baa:	442b      	add	r3, r5
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	192c      	adds	r4, r5, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bdc:	eba4 040c 	sub.w	r4, r4, ip
 8000be0:	2700      	movs	r7, #0
 8000be2:	b11e      	cbz	r6, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xbe>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80eb 	beq.w	8000dd2 <__udivmoddi4+0x286>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000c02:	4638      	mov	r0, r7
 8000c04:	4639      	mov	r1, r7
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f783 	clz	r7, r3
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d147      	bne.n	8000ca2 <__udivmoddi4+0x156>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd0>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80fa 	bhi.w	8000e10 <__udivmoddi4+0x2c4>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa0>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xe8>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 808f 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3e:	1b49      	subs	r1, r1, r5
 8000c40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c44:	fa1f f885 	uxth.w	r8, r5
 8000c48:	2701      	movs	r7, #1
 8000c4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb08 f10c 	mul.w	r1, r8, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x14c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x14a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80b6 	bhi.w	8000e02 <__udivmoddi4+0x2b6>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e79f      	b.n	8000be2 <__udivmoddi4+0x96>
 8000ca2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca6:	40bb      	lsls	r3, r7
 8000ca8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc0:	4325      	orrs	r5, r4
 8000cc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc6:	0c2c      	lsrs	r4, r5, #16
 8000cc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ccc:	fa1f fa8e 	uxth.w	sl, lr
 8000cd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	fa02 f207 	lsl.w	r2, r2, r7
 8000cde:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	f080 8087 	bcs.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	f240 8084 	bls.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4473      	add	r3, lr
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d10:	45a2      	cmp	sl, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1e 0404 	adds.w	r4, lr, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d26b      	bcs.n	8000df6 <__udivmoddi4+0x2aa>
 8000d1e:	45a2      	cmp	sl, r4
 8000d20:	d969      	bls.n	8000df6 <__udivmoddi4+0x2aa>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4474      	add	r4, lr
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	eba4 040a 	sub.w	r4, r4, sl
 8000d32:	454c      	cmp	r4, r9
 8000d34:	46c2      	mov	sl, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	d354      	bcc.n	8000de4 <__udivmoddi4+0x298>
 8000d3a:	d051      	beq.n	8000de0 <__udivmoddi4+0x294>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d069      	beq.n	8000e14 <__udivmoddi4+0x2c8>
 8000d40:	ebb1 050a 	subs.w	r5, r1, sl
 8000d44:	eb64 0403 	sbc.w	r4, r4, r3
 8000d48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d4c:	40fd      	lsrs	r5, r7
 8000d4e:	40fc      	lsrs	r4, r7
 8000d50:	ea4c 0505 	orr.w	r5, ip, r5
 8000d54:	e9c6 5400 	strd	r5, r4, [r6]
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e747      	b.n	8000bec <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f703 	lsr.w	r7, r0, r3
 8000d64:	4095      	lsls	r5, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0c01      	lsrs	r1, r0, #16
 8000d76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7a:	fa1f f885 	uxth.w	r8, r5
 8000d7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb07 f308 	mul.w	r3, r7, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x256>
 8000d92:	1869      	adds	r1, r5, r1
 8000d94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d98:	d22f      	bcs.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d92d      	bls.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9e:	3f02      	subs	r7, #2
 8000da0:	4429      	add	r1, r5
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	b281      	uxth	r1, r0
 8000da6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000daa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb00 f308 	mul.w	r3, r0, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x27e>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc0:	d217      	bcs.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d915      	bls.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd0:	e73b      	b.n	8000c4a <__udivmoddi4+0xfe>
 8000dd2:	4637      	mov	r7, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e709      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e6e7      	b.n	8000bac <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000de0:	4541      	cmp	r1, r8
 8000de2:	d2ab      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dec:	3801      	subs	r0, #1
 8000dee:	4613      	mov	r3, r2
 8000df0:	e7a4      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df2:	4660      	mov	r0, ip
 8000df4:	e7e9      	b.n	8000dca <__udivmoddi4+0x27e>
 8000df6:	4618      	mov	r0, r3
 8000df8:	e795      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfa:	4667      	mov	r7, ip
 8000dfc:	e7d1      	b.n	8000da2 <__udivmoddi4+0x256>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e77c      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	442c      	add	r4, r5
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0x14c>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	442b      	add	r3, r5
 8000e0e:	e72f      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e10:	4638      	mov	r0, r7
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xda>
 8000e14:	4637      	mov	r7, r6
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0xa0>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <BH1750_Init>:


#include "bh1750.h"


void BH1750_Init(BH1750_HandleTypeDef* bh1750){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]
	uint8_t command;

	command = BH1750_POWER_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(bh1750 -> I2C, bh1750 -> Address, &command, 1, bh1750 -> Timeout);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	b299      	uxth	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f107 020f 	add.w	r2, r7, #15
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f002 f88b 	bl	8002f58 <HAL_I2C_Master_Transmit>

	command = BH1750_CONTINOUS_H_RES_MODE;
 8000e42:	2310      	movs	r3, #16
 8000e44:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(bh1750 -> I2C, bh1750 -> Address, &command, 1, bh1750 -> Timeout);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f107 020f 	add.w	r2, r7, #15
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f002 f87c 	bl	8002f58 <HAL_I2C_Master_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <BH1750_ReadLux>:


float BH1750_ReadLux(BH1750_HandleTypeDef* bh1750){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	6078      	str	r0, [r7, #4]
	float lux = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
	uint8_t data[2];


	HAL_I2C_Master_Receive(bh1750 -> I2C, bh1750 -> Address, data, 2, bh1750 -> Timeout);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f107 0208 	add.w	r2, r7, #8
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f002 f958 	bl	8003140 <HAL_I2C_Master_Receive>
    lux = ((data[0] << 8) | data[1]) /1.2;
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	7a7a      	ldrb	r2, [r7, #9]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb73 	bl	8000584 <__aeabi_i2d>
 8000e9e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <BH1750_ReadLux+0x60>)
 8000ea4:	f7ff fd02 	bl	80008ac <__aeabi_ddiv>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	460c      	mov	r4, r1
 8000eac:	4618      	mov	r0, r3
 8000eae:	4621      	mov	r1, r4
 8000eb0:	f7ff fde4 	bl	8000a7c <__aeabi_d2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60fb      	str	r3, [r7, #12]

    return lux;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	ee07 3a90 	vmov	s15, r3
}
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	3ff33333 	.word	0x3ff33333

08000ecc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <MX_ETH_Init+0x7c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_ETH_Init+0x78>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_ETH_Init+0x78>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	3302      	adds	r3, #2
 8000efa:	22e1      	movs	r2, #225	; 0xe1
 8000efc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	3303      	adds	r3, #3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	3305      	adds	r3, #5
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f2e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_ETH_Init+0x78>)
 8000f32:	f001 f951 	bl	80021d8 <HAL_ETH_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000f3c:	f000 fc1c 	bl	8001778 <Error_Handler>
  }

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000022c 	.word	0x2000022c
 8000f48:	40028000 	.word	0x40028000

08000f4c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	; (80010a4 <HAL_ETH_MspInit+0x158>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 8096 	bne.w	800109c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8001006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001018:	2332      	movs	r3, #50	; 0x32
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <HAL_ETH_MspInit+0x160>)
 8001034:	f001 fd3c 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001038:	2386      	movs	r3, #134	; 0x86
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_ETH_MspInit+0x164>)
 8001054:	f001 fd2c 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106a:	230b      	movs	r3, #11
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <HAL_ETH_MspInit+0x168>)
 8001076:	f001 fd1b 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800107a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <HAL_ETH_MspInit+0x16c>)
 8001098:	f001 fd0a 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40028000 	.word	0x40028000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40021800 	.word	0x40021800

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MX_GPIO_Init+0x130>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a45      	ldr	r2, [pc, #276]	; (80011ec <MX_GPIO_Init+0x130>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <MX_GPIO_Init+0x130>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b40      	ldr	r3, [pc, #256]	; (80011ec <MX_GPIO_Init+0x130>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <MX_GPIO_Init+0x130>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_GPIO_Init+0x130>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_GPIO_Init+0x130>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a39      	ldr	r2, [pc, #228]	; (80011ec <MX_GPIO_Init+0x130>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_GPIO_Init+0x130>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_GPIO_Init+0x130>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <MX_GPIO_Init+0x130>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_GPIO_Init+0x130>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_GPIO_Init+0x130>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <MX_GPIO_Init+0x130>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_GPIO_Init+0x130>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_GPIO_Init+0x130>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <MX_GPIO_Init+0x130>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_GPIO_Init+0x130>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f244 0181 	movw	r1, #16513	; 0x4081
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MX_GPIO_Init+0x134>)
 800116a:	f001 fe4b 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2140      	movs	r1, #64	; 0x40
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <MX_GPIO_Init+0x138>)
 8001174:	f001 fe46 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_GPIO_Init+0x13c>)
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <MX_GPIO_Init+0x140>)
 800118e:	f001 fc8f 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001192:	f244 0381 	movw	r3, #16513	; 0x4081
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <MX_GPIO_Init+0x134>)
 80011ac:	f001 fc80 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011b0:	2340      	movs	r3, #64	; 0x40
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0x138>)
 80011c8:	f001 fc72 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_GPIO_Init+0x138>)
 80011e0:	f001 fc66 	bl	8002ab0 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	10110000 	.word	0x10110000
 80011fc:	40020800 	.word	0x40020800

08001200 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f001 fdfc 	bl	8002e38 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fa97 	bl	8001778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f002 fa4d 	bl	80036ec <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fa8e 	bl	8001778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f002 fa8f 	bl	8003782 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fa85 	bl	8001778 <Error_Handler>
  }

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000274 	.word	0x20000274
 8001278:	40005400 	.word	0x40005400
 800127c:	00808cd2 	.word	0x00808cd2

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_I2C_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d128      	bne.n	80012f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c0:	2312      	movs	r3, #18
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012cc:	2304      	movs	r3, #4
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <HAL_I2C_MspInit+0x84>)
 80012d8:	f001 fbea 	bl	8002ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_I2C_MspInit+0x80>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_UART_RxCpltCallback>:
// stale
float k = 0.5;

void transmit_IT_Json_Data(int percent, int lux );

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(huart-> Instance == USART3){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_UART_RxCpltCallback+0x168>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f040 80a5 	bne.w	8001466 <HAL_UART_RxCpltCallback+0x15e>
	  connected = 1;
 800131c:	4b55      	ldr	r3, [pc, #340]	; (8001474 <HAL_UART_RxCpltCallback+0x16c>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

	  int percent [1];
	  int lux [1];
	  char * pch;

	  pch = strtok (json_data," \":,{}");
 8001322:	4955      	ldr	r1, [pc, #340]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 8001324:	4855      	ldr	r0, [pc, #340]	; (800147c <HAL_UART_RxCpltCallback+0x174>)
 8001326:	f005 ff9b 	bl	8007260 <strtok>
 800132a:	6178      	str	r0, [r7, #20]

	   while (pch != NULL)
 800132c:	e02b      	b.n	8001386 <HAL_UART_RxCpltCallback+0x7e>
	  {
	    if(strcmp( pch, "percent" ) == 0){
 800132e:	4954      	ldr	r1, [pc, #336]	; (8001480 <HAL_UART_RxCpltCallback+0x178>)
 8001330:	6978      	ldr	r0, [r7, #20]
 8001332:	f7fe ff6d 	bl	8000210 <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <HAL_UART_RxCpltCallback+0x4e>
	        pch = strtok (NULL, " \":,{}");
 800133c:	494e      	ldr	r1, [pc, #312]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 800133e:	2000      	movs	r0, #0
 8001340:	f005 ff8e 	bl	8007260 <strtok>
 8001344:	6178      	str	r0, [r7, #20]
	        sscanf (pch,"%d",percent);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	461a      	mov	r2, r3
 800134c:	494d      	ldr	r1, [pc, #308]	; (8001484 <HAL_UART_RxCpltCallback+0x17c>)
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f005 ff5a 	bl	8007208 <siscanf>
 8001354:	e012      	b.n	800137c <HAL_UART_RxCpltCallback+0x74>
	    } else if(strcmp( pch, "lux" ) == 0){
 8001356:	494c      	ldr	r1, [pc, #304]	; (8001488 <HAL_UART_RxCpltCallback+0x180>)
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7fe ff59 	bl	8000210 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10b      	bne.n	800137c <HAL_UART_RxCpltCallback+0x74>
	        pch = strtok (NULL, " \":,{}");
 8001364:	4944      	ldr	r1, [pc, #272]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 8001366:	2000      	movs	r0, #0
 8001368:	f005 ff7a 	bl	8007260 <strtok>
 800136c:	6178      	str	r0, [r7, #20]
	        sscanf (pch,"%d",lux);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	461a      	mov	r2, r3
 8001374:	4943      	ldr	r1, [pc, #268]	; (8001484 <HAL_UART_RxCpltCallback+0x17c>)
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f005 ff46 	bl	8007208 <siscanf>
	    }
	    pch = strtok (NULL, " \":,{}");
 800137c:	493e      	ldr	r1, [pc, #248]	; (8001478 <HAL_UART_RxCpltCallback+0x170>)
 800137e:	2000      	movs	r0, #0
 8001380:	f005 ff6e 	bl	8007260 <strtok>
 8001384:	6178      	str	r0, [r7, #20]
	   while (pch != NULL)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1d0      	bne.n	800132e <HAL_UART_RxCpltCallback+0x26>
	  }
	   lux[0] -= 1000;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001392:	60fb      	str	r3, [r7, #12]
	   percent[0] -= 100;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	3b64      	subs	r3, #100	; 0x64
 8001398:	613b      	str	r3, [r7, #16]

	   if(percent[0]<25){
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b18      	cmp	r3, #24
 800139e:	dc10      	bgt.n	80013c2 <HAL_UART_RxCpltCallback+0xba>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4839      	ldr	r0, [pc, #228]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013a6:	f001 fd2d 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	4837      	ldr	r0, [pc, #220]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013b0:	f001 fd28 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	4834      	ldr	r0, [pc, #208]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013bc:	f001 fd22 	bl	8002e04 <HAL_GPIO_WritePin>
 80013c0:	e040      	b.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
	   }else if((percent[0]>=25)&&(percent[0]<50)){
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b18      	cmp	r3, #24
 80013c6:	dd13      	ble.n	80013f0 <HAL_UART_RxCpltCallback+0xe8>
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b31      	cmp	r3, #49	; 0x31
 80013cc:	dc10      	bgt.n	80013f0 <HAL_UART_RxCpltCallback+0xe8>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2101      	movs	r1, #1
 80013d2:	482e      	ldr	r0, [pc, #184]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013d4:	f001 fd16 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013de:	f001 fd11 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 80013ea:	f001 fd0b 	bl	8002e04 <HAL_GPIO_WritePin>
 80013ee:	e029      	b.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
	   }else if((percent[0]>=50)&&(percent[0]<75)){
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b31      	cmp	r3, #49	; 0x31
 80013f4:	dd13      	ble.n	800141e <HAL_UART_RxCpltCallback+0x116>
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b4a      	cmp	r3, #74	; 0x4a
 80013fa:	dc10      	bgt.n	800141e <HAL_UART_RxCpltCallback+0x116>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2101      	movs	r1, #1
 8001400:	4822      	ldr	r0, [pc, #136]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001402:	f001 fcff 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	4820      	ldr	r0, [pc, #128]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 800140c:	f001 fcfa 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	481d      	ldr	r0, [pc, #116]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001418:	f001 fcf4 	bl	8002e04 <HAL_GPIO_WritePin>
 800141c:	e012      	b.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
	   }else if(percent[0]>=75){
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b4a      	cmp	r3, #74	; 0x4a
 8001422:	dd0f      	ble.n	8001444 <HAL_UART_RxCpltCallback+0x13c>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2101      	movs	r1, #1
 8001428:	4818      	ldr	r0, [pc, #96]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 800142a:	f001 fceb 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001434:	f001 fce6 	bl	8002e04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <HAL_UART_RxCpltCallback+0x184>)
 8001440:	f001 fce0 	bl	8002e04 <HAL_GPIO_WritePin>
	   }
	   luks_ustawione = percent[0];
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_UART_RxCpltCallback+0x188>)
 8001448:	6013      	str	r3, [r2, #0]
	   lux[0] = luks_odczytane;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_UART_RxCpltCallback+0x18c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]
	   // Tutaj powinna być funkcja, która weźmie percent[0] jako argument i przetworzy na LUX
	   // ...

	   // Tą funkcję niżej możesz przenieść tam gdzie będzie nowa przetworzona wartość Lux
	   // ..................np. transmit_IT_Json_Data(old_Percent, new_Lux );
	   transmit_IT_Json_Data(percent[0], lux[0] );
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f820 	bl	800149c <transmit_IT_Json_Data>
	   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


	   HAL_UART_Receive_IT(&huart3, (uint8_t*)json_data, 26);
 800145c:	221a      	movs	r2, #26
 800145e:	4907      	ldr	r1, [pc, #28]	; (800147c <HAL_UART_RxCpltCallback+0x174>)
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_UART_RxCpltCallback+0x190>)
 8001462:	f004 fc85 	bl	8005d70 <HAL_UART_Receive_IT>

	}
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004800 	.word	0x40004800
 8001474:	2000021c 	.word	0x2000021c
 8001478:	08008470 	.word	0x08008470
 800147c:	200002c0 	.word	0x200002c0
 8001480:	08008478 	.word	0x08008478
 8001484:	08008480 	.word	0x08008480
 8001488:	08008484 	.word	0x08008484
 800148c:	40020400 	.word	0x40020400
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000010 	.word	0x20000010
 8001498:	2000035c 	.word	0x2000035c

0800149c <transmit_IT_Json_Data>:

void transmit_IT_Json_Data(int percent, int lux ){
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	if((0 <= percent) && (percent <= 100) && (0 <= lux) && (lux <= 1000)){
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db19      	blt.n	80014e0 <transmit_IT_Json_Data+0x44>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	dc16      	bgt.n	80014e0 <transmit_IT_Json_Data+0x44>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db13      	blt.n	80014e0 <transmit_IT_Json_Data+0x44>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014be:	dc0f      	bgt.n	80014e0 <transmit_IT_Json_Data+0x44>
		char new_Json_Data[26];

		// Jak będzie rzeczywisty lux, to będziesz mógł zastąpić: oszukane_lux -> lux
		//int oszukane_lux = percent + 100;
		int n=sprintf (new_Json_Data, "{\"lux\":%d,\"percent\":%d}", lux, percent);
 80014c0:	f107 0008 	add.w	r0, r7, #8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <transmit_IT_Json_Data+0x4c>)
 80014ca:	f005 fe7d 	bl	80071c8 <siprintf>
 80014ce:	6278      	str	r0, [r7, #36]	; 0x24
		//....

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)new_Json_Data, n);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <transmit_IT_Json_Data+0x50>)
 80014dc:	f004 fbec 	bl	8005cb8 <HAL_UART_Transmit_IT>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	08008488 	.word	0x08008488
 80014ec:	2000035c 	.word	0x2000035c

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f000 fcbc 	bl	8001e72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f8ab 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f7ff fddd 	bl	80010bc <MX_GPIO_Init>
  MX_ETH_Init();
 8001502:	f7ff fce3 	bl	8000ecc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001506:	f000 fb85 	bl	8001c14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800150a:	f000 fbff 	bl	8001d0c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800150e:	f7ff fe77 	bl	8001200 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001512:	f000 f9e1 	bl	80018d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001516:	f000 fa6d 	bl	80019f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800151a:	2100      	movs	r1, #0
 800151c:	4840      	ldr	r0, [pc, #256]	; (8001620 <main+0x130>)
 800151e:	f003 fbbf 	bl	8004ca0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001522:	2104      	movs	r1, #4
 8001524:	483e      	ldr	r0, [pc, #248]	; (8001620 <main+0x130>)
 8001526:	f003 fbbb 	bl	8004ca0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800152a:	213c      	movs	r1, #60	; 0x3c
 800152c:	483d      	ldr	r0, [pc, #244]	; (8001624 <main+0x134>)
 800152e:	f003 fc8d 	bl	8004e4c <HAL_TIM_Encoder_Start>
  // inicjalizacja czujnika
  BH1750_Init(&hbh1750_1);
 8001532:	483d      	ldr	r0, [pc, #244]	; (8001628 <main+0x138>)
 8001534:	f7ff fc72 	bl	8000e1c <BH1750_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t*)json_data, 26);
 8001538:	221a      	movs	r2, #26
 800153a:	493c      	ldr	r1, [pc, #240]	; (800162c <main+0x13c>)
 800153c:	483c      	ldr	r0, [pc, #240]	; (8001630 <main+0x140>)
 800153e:	f004 fc17 	bl	8005d70 <HAL_UART_Receive_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, RED_procent);
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <main+0x144>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <main+0x130>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	luks_odczytane = (int)(BH1750_ReadLux(&hbh1750_1));
 800154c:	4836      	ldr	r0, [pc, #216]	; (8001628 <main+0x138>)
 800154e:	f7ff fc8b 	bl	8000e68 <BH1750_ReadLux>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	ee17 2a90 	vmov	r2, s15
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <main+0x148>)
 8001560:	601a      	str	r2, [r3, #0]
	uchyb = (luks_ustawione - luks_odczytane)*1000;
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <main+0x14c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <main+0x148>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a32      	ldr	r2, [pc, #200]	; (8001640 <main+0x150>)
 8001576:	6013      	str	r3, [r2, #0]
	uchyb = uchyb/luks_ustawione;
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <main+0x150>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <main+0x14c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fb92 f3f3 	sdiv	r3, r2, r3
 8001584:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <main+0x150>)
 8001586:	6013      	str	r3, [r2, #0]
	RED_procent += (int)(k*uchyb);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <main+0x150>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <main+0x154>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a2:	ee17 2a90 	vmov	r2, s15
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <main+0x144>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <main+0x144>)
 80015ae:	6013      	str	r3, [r2, #0]
	if(RED_procent > 1000){
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <main+0x144>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015b8:	dd03      	ble.n	80015c2 <main+0xd2>
		RED_procent = 1000;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <main+0x144>)
 80015bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c0:	601a      	str	r2, [r3, #0]
	}
	if(RED_procent < 0){
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <main+0x144>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da02      	bge.n	80015d0 <main+0xe0>
			RED_procent = 0;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <main+0x144>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, RED_procent);
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <main+0x144>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <main+0x130>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
	BLUE_procent = __HAL_TIM_GET_COUNTER(&htim4);
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <main+0x134>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <main+0x158>)
 80015e4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, BLUE_procent);
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <main+0x158>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <main+0x130>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38

	if(connected == 1){
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <main+0x15c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10f      	bne.n	8001618 <main+0x128>
		int n=sprintf (new_Json_Data, "{\"lux\":%d,\"percent\":%d}", luks_odczytane, luks_ustawione);
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <main+0x148>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <main+0x14c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4638      	mov	r0, r7
 8001602:	4913      	ldr	r1, [pc, #76]	; (8001650 <main+0x160>)
 8001604:	f005 fde0 	bl	80071c8 <siprintf>
 8001608:	61f8      	str	r0, [r7, #28]

		HAL_UART_Transmit(&huart3, (uint8_t*)new_Json_Data, n, 100);
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	b29a      	uxth	r2, r3
 800160e:	4639      	mov	r1, r7
 8001610:	2364      	movs	r3, #100	; 0x64
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <main+0x140>)
 8001614:	f004 fabe 	bl	8005b94 <HAL_UART_Transmit>
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(250);
 8001618:	20fa      	movs	r0, #250	; 0xfa
 800161a:	f000 fc87 	bl	8001f2c <HAL_Delay>
	luks_odczytane = (int)(BH1750_ReadLux(&hbh1750_1));
 800161e:	e795      	b.n	800154c <main+0x5c>
 8001620:	2000031c 	.word	0x2000031c
 8001624:	200002dc 	.word	0x200002dc
 8001628:	20000000 	.word	0x20000000
 800162c:	200002c0 	.word	0x200002c0
 8001630:	2000035c 	.word	0x2000035c
 8001634:	20000210 	.word	0x20000210
 8001638:	20000010 	.word	0x20000010
 800163c:	2000000c 	.word	0x2000000c
 8001640:	20000218 	.word	0x20000218
 8001644:	20000014 	.word	0x20000014
 8001648:	20000214 	.word	0x20000214
 800164c:	2000021c 	.word	0x2000021c
 8001650:	08008488 	.word	0x08008488

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0b4      	sub	sp, #208	; 0xd0
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800165e:	2230      	movs	r2, #48	; 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fda8 	bl	80071b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	2284      	movs	r2, #132	; 0x84
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fd99 	bl	80071b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001686:	f002 fa11 	bl	8003aac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <SystemClock_Config+0x118>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <SystemClock_Config+0x118>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <SystemClock_Config+0x118>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <SystemClock_Config+0x11c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <SystemClock_Config+0x11c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <SystemClock_Config+0x11c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016da:	2304      	movs	r3, #4
 80016dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016e0:	2348      	movs	r3, #72	; 0x48
 80016e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 f9e8 	bl	8003acc <HAL_RCC_OscConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001702:	f000 f839 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001706:	230f      	movs	r3, #15
 8001708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001726:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fc71 	bl	8004014 <HAL_RCC_ClockConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001738:	f000 f81e 	bl	8001778 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <SystemClock_Config+0x120>)
 800173e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001740:	2300      	movs	r3, #0
 8001742:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001744:	2300      	movs	r3, #0
 8001746:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fe56 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800175e:	f000 f80b 	bl	8001778 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	37d0      	adds	r7, #208	; 0xd0
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000
 8001774:	00204100 	.word	0x00204100

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x44>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_MspInit+0x44>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x44>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x44>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x44>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 fb62 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <USART3_IRQHandler+0x10>)
 8001832:	f004 fb3f 	bl	8005eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000035c 	.word	0x2000035c

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f005 fc78 	bl	8007164 <__errno>
 8001874:	4602      	mov	r2, r0
 8001876:	230c      	movs	r3, #12
 8001878:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20050000 	.word	0x20050000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000220 	.word	0x20000220
 80018a8:	200007e8 	.word	0x200007e8

080018ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <SystemInit+0x28>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <SystemInit+0x28>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SystemInit+0x28>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	609a      	str	r2, [r3, #8]
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800190a:	4b38      	ldr	r3, [pc, #224]	; (80019ec <MX_TIM3_Init+0x114>)
 800190c:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <MX_TIM3_Init+0x118>)
 800190e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8001910:	4b36      	ldr	r3, [pc, #216]	; (80019ec <MX_TIM3_Init+0x114>)
 8001912:	2223      	movs	r2, #35	; 0x23
 8001914:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b35      	ldr	r3, [pc, #212]	; (80019ec <MX_TIM3_Init+0x114>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <MX_TIM3_Init+0x114>)
 800191e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001922:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <MX_TIM3_Init+0x114>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <MX_TIM3_Init+0x114>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001930:	482e      	ldr	r0, [pc, #184]	; (80019ec <MX_TIM3_Init+0x114>)
 8001932:	f003 f955 	bl	8004be0 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800193c:	f7ff ff1c 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	4619      	mov	r1, r3
 800194c:	4827      	ldr	r0, [pc, #156]	; (80019ec <MX_TIM3_Init+0x114>)
 800194e:	f003 fbcd 	bl	80050ec <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001958:	f7ff ff0e 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800195c:	4823      	ldr	r0, [pc, #140]	; (80019ec <MX_TIM3_Init+0x114>)
 800195e:	f003 f96a 	bl	8004c36 <HAL_TIM_PWM_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001968:	f7ff ff06 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <MX_TIM3_Init+0x114>)
 800197c:	f004 f82e 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001986:	f7ff fef7 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_TIM3_Init+0x114>)
 80019a2:	f003 fa8b 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019ac:	f7ff fee4 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	2204      	movs	r2, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_TIM3_Init+0x114>)
 80019b8:	f003 fa80 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019c2:	f7ff fed9 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	2208      	movs	r2, #8
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <MX_TIM3_Init+0x114>)
 80019ce:	f003 fa75 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80019d8:	f7ff fece 	bl	8001778 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <MX_TIM3_Init+0x114>)
 80019de:	f000 f8c3 	bl	8001b68 <HAL_TIM_MspPostInit>

}
 80019e2:	bf00      	nop
 80019e4:	3738      	adds	r7, #56	; 0x38
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000031c 	.word	0x2000031c
 80019f0:	40000400 	.word	0x40000400

080019f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	2224      	movs	r2, #36	; 0x24
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 fbd8 	bl	80071b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <MX_TIM4_Init+0xa8>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a50:	2301      	movs	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a64:	f003 f960 	bl	8004d28 <HAL_TIM_Encoder_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a6e:	f7ff fe83 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a80:	f003 ffac 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a8a:	f7ff fe75 	bl	8001778 <Error_Handler>
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3730      	adds	r7, #48	; 0x30
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200002dc 	.word	0x200002dc
 8001a9c:	40000800 	.word	0x40000800

08001aa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_TIM_Base_MspInit+0x38>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10b      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_Base_MspInit+0x3c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_TIM_Base_MspInit+0x3c>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_TIM_Base_MspInit+0x3c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d128      	bne.n	8001b54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b44:	2302      	movs	r3, #2
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b50:	f000 ffae 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020c00 	.word	0x40020c00

08001b68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_TIM_MspPostInit+0x9c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d138      	bne.n	8001bfc <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_TIM_MspPostInit+0xa0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_TIM_MspPostInit+0xa0>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_TIM_MspPostInit+0xa0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_TIM_MspPostInit+0xa0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_TIM_MspPostInit+0xa0>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_TIM_MspPostInit+0xa0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bba:	2340      	movs	r3, #64	; 0x40
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <HAL_TIM_MspPostInit+0xa4>)
 8001bd6:	f000 ff6b 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bec:	2302      	movs	r3, #2
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <HAL_TIM_MspPostInit+0xa8>)
 8001bf8:	f000 ff5a 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020800 	.word	0x40020800

08001c14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_USART3_UART_Init+0x5c>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART3_UART_Init+0x58>)
 8001c58:	f003 ff4e 	bl	8005af8 <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c62:	f7ff fd89 	bl	8001778 <Error_Handler>
  }

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000035c 	.word	0x2000035c
 8001c70:	40004800 	.word	0x40004800

08001c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_UART_MspInit+0x8c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d130      	bne.n	8001cf8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_UART_MspInit+0x90>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_UART_MspInit+0x90>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_UART_MspInit+0x90>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_MspInit+0x90>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_UART_MspInit+0x90>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_UART_MspInit+0x90>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4809      	ldr	r0, [pc, #36]	; (8001d08 <HAL_UART_MspInit+0x94>)
 8001ce4:	f000 fee4 	bl	8002ab0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2027      	movs	r0, #39	; 0x27
 8001cee:	f000 fa1a 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cf2:	2027      	movs	r0, #39	; 0x27
 8001cf4:	f000 fa33 	bl	800215e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40004800 	.word	0x40004800
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020c00 	.word	0x40020c00

08001d0c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1a:	2206      	movs	r2, #6
 8001d1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d50:	f001 fd63 	bl	800381a <HAL_PCD_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d5a:	f7ff fd0d 	bl	8001778 <Error_Handler>
  }

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200003dc 	.word	0x200003dc

08001d68 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d88:	d141      	bne.n	8001e0e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001da2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001db4:	230a      	movs	r3, #10
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <HAL_PCD_MspInit+0xb4>)
 8001dc0:	f000 fe76 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4810      	ldr	r0, [pc, #64]	; (8001e1c <HAL_PCD_MspInit+0xb4>)
 8001dda:	f000 fe69 	bl	8002ab0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	6353      	str	r3, [r2, #52]	; 0x34
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_PCD_MspInit+0xb0>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
  ldr  r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e40:	f842 3b04 	str.w	r3, [r2], #4

08001e44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff fd2f 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f005 f98f 	bl	8007170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff fb4d 	bl	80014f0 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001e5c:	08008690 	.word	0x08008690
  ldr  r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e64:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001e68:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001e6c:	200007e8 	.word	0x200007e8

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>

08001e72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e76:	2003      	movs	r0, #3
 8001e78:	f000 f94a 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 f805 	bl	8001e8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e82:	f7ff fc81 	bl	8001788 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x54>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x58>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f965 	bl	800217a <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f92d 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_InitTick+0x5c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000018 	.word	0x20000018
 8001ee4:	20000020 	.word	0x20000020
 8001ee8:	2000001c 	.word	0x2000001c

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000020 	.word	0x20000020
 8001f10:	200007e0 	.word	0x200007e0

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200007e0 	.word	0x200007e0

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_Delay+0x40>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000020 	.word	0x20000020

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	05fa0000 	.word	0x05fa0000

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff8e 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff29 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff3e 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff8e 	bl	8002064 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5d 	bl	8002010 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff31 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffa2 	bl	80020cc <SysTick_Config>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d004      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e00c      	b.n	80021ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2205      	movs	r2, #5
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80021e8:	4ba9      	ldr	r3, [pc, #676]	; (8002490 <HAL_ETH_Init+0x2b8>)
 80021ea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e183      	b.n	8002506 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fe9a 	bl	8000f4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b9e      	ldr	r3, [pc, #632]	; (8002494 <HAL_ETH_Init+0x2bc>)
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	4a9d      	ldr	r2, [pc, #628]	; (8002494 <HAL_ETH_Init+0x2bc>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002222:	6453      	str	r3, [r2, #68]	; 0x44
 8002224:	4b9b      	ldr	r3, [pc, #620]	; (8002494 <HAL_ETH_Init+0x2bc>)
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002230:	4b99      	ldr	r3, [pc, #612]	; (8002498 <HAL_ETH_Init+0x2c0>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a98      	ldr	r2, [pc, #608]	; (8002498 <HAL_ETH_Init+0x2c0>)
 8002236:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800223a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800223c:	4b96      	ldr	r3, [pc, #600]	; (8002498 <HAL_ETH_Init+0x2c0>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4994      	ldr	r1, [pc, #592]	; (8002498 <HAL_ETH_Init+0x2c0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002260:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002262:	f7ff fe57 	bl	8001f14 <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002268:	e011      	b.n	800228e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800226a:	f7ff fe53 	bl	8001f14 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002278:	d909      	bls.n	800228e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e13b      	b.n	8002506 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e4      	bne.n	800226a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f023 031c 	bic.w	r3, r3, #28
 80022ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022b0:	f002 f874 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80022b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4a78      	ldr	r2, [pc, #480]	; (800249c <HAL_ETH_Init+0x2c4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d908      	bls.n	80022d0 <HAL_ETH_Init+0xf8>
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_ETH_Init+0x2c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d804      	bhi.n	80022d0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e027      	b.n	8002320 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4a73      	ldr	r2, [pc, #460]	; (80024a0 <HAL_ETH_Init+0x2c8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d908      	bls.n	80022ea <HAL_ETH_Init+0x112>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4a72      	ldr	r2, [pc, #456]	; (80024a4 <HAL_ETH_Init+0x2cc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d804      	bhi.n	80022ea <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f043 030c 	orr.w	r3, r3, #12
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	e01a      	b.n	8002320 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4a6d      	ldr	r2, [pc, #436]	; (80024a4 <HAL_ETH_Init+0x2cc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d903      	bls.n	80022fa <HAL_ETH_Init+0x122>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4a6c      	ldr	r2, [pc, #432]	; (80024a8 <HAL_ETH_Init+0x2d0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d911      	bls.n	800231e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_ETH_Init+0x2d0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d908      	bls.n	8002314 <HAL_ETH_Init+0x13c>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4a69      	ldr	r2, [pc, #420]	; (80024ac <HAL_ETH_Init+0x2d4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d804      	bhi.n	8002314 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e005      	b.n	8002320 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	e000      	b.n	8002320 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800231e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800232c:	2100      	movs	r1, #0
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f956 	bl	80025e0 <HAL_ETH_WritePHYRegister>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f9b3 	bl	80026ac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0d9      	b.n	8002506 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002352:	20ff      	movs	r0, #255	; 0xff
 8002354:	f7ff fdea 	bl	8001f2c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a7 	beq.w	80024b0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002362:	f7ff fdd7 	bl	8001f14 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	461a      	mov	r2, r3
 800236e:	2101      	movs	r1, #1
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8cd 	bl	8002510 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002376:	f7ff fdcd 	bl	8001f14 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d90f      	bls.n	80023a8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800238c:	6939      	ldr	r1, [r7, #16]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f98c 	bl	80026ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0ae      	b.n	8002506 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0da      	beq.n	8002368 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80023b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b6:	2100      	movs	r1, #0
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f911 	bl	80025e0 <HAL_ETH_WritePHYRegister>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f96e 	bl	80026ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80023d8:	2301      	movs	r3, #1
 80023da:	e094      	b.n	8002506 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80023dc:	f7ff fd9a 	bl	8001f14 <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	461a      	mov	r2, r3
 80023e8:	2101      	movs	r1, #1
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f890 	bl	8002510 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023f0:	f7ff fd90 	bl	8001f14 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d90f      	bls.n	8002422 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f94f 	bl	80026ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e071      	b.n	8002506 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0da      	beq.n	80023e2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	461a      	mov	r2, r3
 8002432:	211f      	movs	r1, #31
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f86b 	bl	8002510 <HAL_ETH_ReadPHYRegister>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002444:	6939      	ldr	r1, [r7, #16]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f930 	bl	80026ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002454:	2301      	movs	r3, #1
 8002456:	e056      	b.n	8002506 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	e002      	b.n	8002472 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	e037      	b.n	80024f4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e032      	b.n	80024f4 <HAL_ETH_Init+0x31c>
 800248e:	bf00      	nop
 8002490:	03938700 	.word	0x03938700
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	01312cff 	.word	0x01312cff
 80024a0:	02160ebf 	.word	0x02160ebf
 80024a4:	039386ff 	.word	0x039386ff
 80024a8:	05f5e0ff 	.word	0x05f5e0ff
 80024ac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	2100      	movs	r1, #0
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f889 	bl	80025e0 <HAL_ETH_WritePHYRegister>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8e6 	bl	80026ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e00c      	b.n	8002506 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80024ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80024f0:	f7ff fd1c 	bl	8001f2c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80024f4:	6939      	ldr	r1, [r7, #16]
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8d8 	bl	80026ac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	460b      	mov	r3, r1
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b82      	cmp	r3, #130	; 0x82
 8002530:	d101      	bne.n	8002536 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	e050      	b.n	80025d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2282      	movs	r2, #130	; 0x82
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 031c 	and.w	r3, r3, #28
 800254c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8a1b      	ldrh	r3, [r3, #16]
 8002552:	02db      	lsls	r3, r3, #11
 8002554:	b29b      	uxth	r3, r3
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	019b      	lsls	r3, r3, #6
 8002560:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f023 0302 	bic.w	r3, r3, #2
 8002570:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002582:	f7ff fcc7 	bl	8001f14 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002588:	e015      	b.n	80025b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800258a:	f7ff fcc3 	bl	8001f14 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d309      	bcc.n	80025ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e014      	b.n	80025d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e4      	bne.n	800258a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	460b      	mov	r3, r1
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b42      	cmp	r3, #66	; 0x42
 8002600:	d101      	bne.n	8002606 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	e04e      	b.n	80026a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2242      	movs	r2, #66	; 0x42
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 031c 	and.w	r3, r3, #28
 800261c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8a1b      	ldrh	r3, [r3, #16]
 8002622:	02db      	lsls	r3, r3, #11
 8002624:	b29b      	uxth	r3, r3
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	019b      	lsls	r3, r3, #6
 8002630:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800265c:	f7ff fc5a 	bl	8001f14 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002662:	e015      	b.n	8002690 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002664:	f7ff fc56 	bl	8001f14 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d309      	bcc.n	8002688 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e00d      	b.n	80026a4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e4      	bne.n	8002664 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0b0      	sub	sp, #192	; 0xc0
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80026da:	2300      	movs	r3, #0
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80026f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f6:	663b      	str	r3, [r7, #96]	; 0x60
 80026f8:	e001      	b.n	80026fe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002708:	2300      	movs	r3, #0
 800270a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002780:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002784:	4bab      	ldr	r3, [pc, #684]	; (8002a34 <ETH_MACDMAConfig+0x388>)
 8002786:	4013      	ands	r3, r2
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800278c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002790:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002794:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002798:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800279e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80027a2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80027a6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80027ac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80027ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80027b0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80027b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80027b4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80027b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80027b8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80027ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80027bc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80027be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80027c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80027c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7ff fba3 	bl	8001f2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80027f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80027f4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80027f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80027f8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80027fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80027fe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002804:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800280a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002810:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002814:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800281c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800281e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800282a:	2001      	movs	r0, #1
 800282c:	f7ff fb7e 	bl	8001f2c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002838:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002842:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800284c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002858:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800285c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002860:	4013      	ands	r3, r2
 8002862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800286a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800286c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002870:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002876:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800287c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800287e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002882:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002888:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800288a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800289c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff fb3f 	bl	8001f2c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028b6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028b8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80028bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7ff fb2a 	bl	8001f2c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028e0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80028f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028f4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002906:	2304      	movs	r3, #4
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800291c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002926:	2300      	movs	r3, #0
 8002928:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800292a:	2300      	movs	r3, #0
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f241 0318 	movw	r3, #4120	; 0x1018
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800293e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <ETH_MACDMAConfig+0x38c>)
 8002944:	4013      	ands	r3, r2
 8002946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800294a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800294c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800294e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002950:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002952:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002954:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002956:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002958:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800295a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800295c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800295e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002960:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002962:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002966:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800296a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800296c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	f241 0318 	movw	r3, #4120	; 0x1018
 800297e:	4413      	add	r3, r2
 8002980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002984:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f241 0318 	movw	r3, #4120	; 0x1018
 800298e:	4413      	add	r3, r2
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff fac8 	bl	8001f2c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80029a4:	4413      	add	r3, r2
 80029a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029aa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029b0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80029b4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80029b8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80029bc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80029be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80029c2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80029c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80029c6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7ff faa1 	bl	8001f2c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10d      	bne.n	8002a1c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a08:	4413      	add	r3, r2
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6811      	ldr	r1, [r2, #0]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <ETH_MACDMAConfig+0x390>)
 8002a12:	431a      	orrs	r2, r3
 8002a14:	f241 031c 	movw	r3, #4124	; 0x101c
 8002a18:	440b      	add	r3, r1
 8002a1a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2100      	movs	r1, #0
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f80b 	bl	8002a40 <ETH_MACAddressConfig>
}
 8002a2a:	bf00      	nop
 8002a2c:	37c0      	adds	r7, #192	; 0xc0
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	ff20810f 	.word	0xff20810f
 8002a38:	f8de3f23 	.word	0xf8de3f23
 8002a3c:	00010040 	.word	0x00010040

08002a40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3305      	adds	r3, #5
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	3204      	adds	r2, #4
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <ETH_MACAddressConfig+0x68>)
 8002a62:	4413      	add	r3, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	061a      	lsls	r2, r3, #24
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3302      	adds	r3, #2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	4313      	orrs	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <ETH_MACAddressConfig+0x6c>)
 8002a92:	4413      	add	r3, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6013      	str	r3, [r2, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40028040 	.word	0x40028040
 8002aac:	40028044 	.word	0x40028044

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	e175      	b.n	8002dbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	f040 8164 	bne.w	8002db6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d00b      	beq.n	8002b0e <HAL_GPIO_Init+0x5e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b02:	2b11      	cmp	r3, #17
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d130      	bne.n	8002b70 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 0201 	and.w	r2, r3, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x100>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d123      	bne.n	8002bf8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	08da      	lsrs	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0203 	and.w	r2, r3, #3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80be 	beq.w	8002db6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	4a64      	ldr	r2, [pc, #400]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	; 0x44
 8002c46:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c52:	4a60      	ldr	r2, [pc, #384]	; (8002dd4 <HAL_GPIO_Init+0x324>)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_GPIO_Init+0x328>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d037      	beq.n	8002cee <HAL_GPIO_Init+0x23e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_GPIO_Init+0x32c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d031      	beq.n	8002cea <HAL_GPIO_Init+0x23a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02b      	beq.n	8002ce6 <HAL_GPIO_Init+0x236>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d025      	beq.n	8002ce2 <HAL_GPIO_Init+0x232>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_GPIO_Init+0x338>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x22e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x33c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x22a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <HAL_GPIO_Init+0x340>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x226>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_GPIO_Init+0x344>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x222>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x348>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x21e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4e      	ldr	r2, [pc, #312]	; (8002dfc <HAL_GPIO_Init+0x34c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x21a>
 8002cc6:	2309      	movs	r3, #9
 8002cc8:	e012      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cca:	230a      	movs	r3, #10
 8002ccc:	e010      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cce:	2308      	movs	r3, #8
 8002cd0:	e00e      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00c      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00a      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cda:	2305      	movs	r3, #5
 8002cdc:	e008      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e004      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e002      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_GPIO_Init+0x240>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f002 0203 	and.w	r2, r2, #3
 8002cf6:	0092      	lsls	r2, r2, #2
 8002cf8:	4093      	lsls	r3, r2
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d00:	4934      	ldr	r1, [pc, #208]	; (8002dd4 <HAL_GPIO_Init+0x324>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	3302      	adds	r3, #2
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d0e:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d32:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5c:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	f67f ae86 	bls.w	8002ad0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3724      	adds	r7, #36	; 0x24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40021800 	.word	0x40021800
 8002df4:	40021c00 	.word	0x40021c00
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	40022400 	.word	0x40022400
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07f      	b.n	8002f4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fa0e 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	e006      	b.n	8002ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d104      	bne.n	8002ed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_I2C_Init+0x11c>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	ea42 0103 	orr.w	r1, r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69d9      	ldr	r1, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	02008000 	.word	0x02008000

08002f58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 80da 	bne.w	800312e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_I2C_Master_Transmit+0x30>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0d3      	b.n	8003130 <HAL_I2C_Master_Transmit+0x1d8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe ffc0 	bl	8001f14 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f9e6 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0be      	b.n	8003130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	; 0x21
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	893a      	ldrh	r2, [r7, #8]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2bff      	cmp	r3, #255	; 0xff
 8002fe2:	d90e      	bls.n	8003002 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	8979      	ldrh	r1, [r7, #10]
 8002ff2:	4b51      	ldr	r3, [pc, #324]	; (8003138 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fb48 	bl	8003690 <I2C_TransferConfig>
 8003000:	e06c      	b.n	80030dc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	b2da      	uxtb	r2, r3
 8003012:	8979      	ldrh	r1, [r7, #10]
 8003014:	4b48      	ldr	r3, [pc, #288]	; (8003138 <HAL_I2C_Master_Transmit+0x1e0>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fb37 	bl	8003690 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003022:	e05b      	b.n	80030dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	6a39      	ldr	r1, [r7, #32]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f9e3 	bl	80033f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e07b      	b.n	8003130 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d034      	beq.n	80030dc <HAL_I2C_Master_Transmit+0x184>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d130      	bne.n	80030dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f975 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e04d      	b.n	8003130 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d90e      	bls.n	80030bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 faeb 	bl	8003690 <I2C_TransferConfig>
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fada 	bl	8003690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d19e      	bne.n	8003024 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f9c2 	bl	8003474 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e01a      	b.n	8003130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_I2C_Master_Transmit+0x1e4>)
 800310e:	400b      	ands	r3, r1
 8003110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	80002000 	.word	0x80002000
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	461a      	mov	r2, r3
 800314c:	460b      	mov	r3, r1
 800314e:	817b      	strh	r3, [r7, #10]
 8003150:	4613      	mov	r3, r2
 8003152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	f040 80db 	bne.w	8003318 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2C_Master_Receive+0x30>
 800316c:	2302      	movs	r3, #2
 800316e:	e0d4      	b.n	800331a <HAL_I2C_Master_Receive+0x1da>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003178:	f7fe fecc 	bl	8001f14 <HAL_GetTick>
 800317c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	2319      	movs	r3, #25
 8003184:	2201      	movs	r2, #1
 8003186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f8f2 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0bf      	b.n	800331a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2222      	movs	r2, #34	; 0x22
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2210      	movs	r2, #16
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	893a      	ldrh	r2, [r7, #8]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2bff      	cmp	r3, #255	; 0xff
 80031ca:	d90e      	bls.n	80031ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	8979      	ldrh	r1, [r7, #10]
 80031da:	4b52      	ldr	r3, [pc, #328]	; (8003324 <HAL_I2C_Master_Receive+0x1e4>)
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa54 	bl	8003690 <I2C_TransferConfig>
 80031e8:	e06d      	b.n	80032c6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	8979      	ldrh	r1, [r7, #10]
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_I2C_Master_Receive+0x1e4>)
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fa43 	bl	8003690 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800320a:	e05c      	b.n	80032c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f96b 	bl	80034ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e07c      	b.n	800331a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d034      	beq.n	80032c6 <HAL_I2C_Master_Receive+0x186>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d130      	bne.n	80032c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f880 	bl	8003374 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e04d      	b.n	800331a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2bff      	cmp	r3, #255	; 0xff
 8003286:	d90e      	bls.n	80032a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	22ff      	movs	r2, #255	; 0xff
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	b2da      	uxtb	r2, r3
 8003294:	8979      	ldrh	r1, [r7, #10]
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9f6 	bl	8003690 <I2C_TransferConfig>
 80032a4:	e00f      	b.n	80032c6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f9e5 	bl	8003690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d19d      	bne.n	800320c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	6a39      	ldr	r1, [r7, #32]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f8cd 	bl	8003474 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e01a      	b.n	800331a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2220      	movs	r2, #32
 80032ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_I2C_Master_Receive+0x1e8>)
 80032f8:	400b      	ands	r3, r1
 80032fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	80002400 	.word	0x80002400
 8003328:	fe00e800 	.word	0xfe00e800

0800332c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d103      	bne.n	800334a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d007      	beq.n	8003368 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	619a      	str	r2, [r3, #24]
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003384:	e022      	b.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d01e      	beq.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe fdc1 	bl	8001f14 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d113      	bne.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e00f      	b.n	80033ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d0cd      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003400:	e02c      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8dc 	bl	80035c4 <I2C_IsAcknowledgeFailed>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e02a      	b.n	800346c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d01e      	beq.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fe fd79 	bl	8001f14 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d113      	bne.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d1cb      	bne.n	8003402 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003480:	e028      	b.n	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f89c 	bl	80035c4 <I2C_IsAcknowledgeFailed>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e026      	b.n	80034e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fe fd3d 	bl	8001f14 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e007      	b.n	80034e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d1cf      	bne.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034f8:	e055      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f860 	bl	80035c4 <I2C_IsAcknowledgeFailed>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e053      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d129      	bne.n	8003570 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d105      	bne.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e03f      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2220      	movs	r2, #32
 800353c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800354a:	400b      	ands	r3, r1
 800354c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e022      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003570:	f7fe fcd0 	bl	8001f14 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d1a2      	bne.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	fe00e800 	.word	0xfe00e800

080035c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d151      	bne.n	8003682 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035de:	e022      	b.n	8003626 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d01e      	beq.n	8003626 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fe fc94 	bl	8001f14 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <I2C_IsAcknowledgeFailed+0x3a>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02e      	b.n	8003684 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d1d5      	bne.n	80035e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2210      	movs	r2, #16
 800363a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2220      	movs	r2, #32
 8003642:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fe71 	bl	800332c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <I2C_IsAcknowledgeFailed+0xc8>)
 8003656:	400b      	ands	r3, r1
 8003658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0204 	orr.w	r2, r3, #4
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	fe00e800 	.word	0xfe00e800

08003690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	4613      	mov	r3, r2
 80036a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	0d5b      	lsrs	r3, r3, #21
 80036ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <I2C_TransferConfig+0x58>)
 80036b2:	430b      	orrs	r3, r1
 80036b4:	43db      	mvns	r3, r3
 80036b6:	ea02 0103 	and.w	r1, r2, r3
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036c0:	7a7b      	ldrb	r3, [r7, #9]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	03ff63ff 	.word	0x03ff63ff

080036ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d138      	bne.n	8003774 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800370c:	2302      	movs	r3, #2
 800370e:	e032      	b.n	8003776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800373e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b20      	cmp	r3, #32
 8003796:	d139      	bne.n	800380c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e033      	b.n	800380e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2224      	movs	r2, #36	; 0x24
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800381a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381c:	b08f      	sub	sp, #60	; 0x3c
 800381e:	af0a      	add	r7, sp, #40	; 0x28
 8003820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e116      	b.n	8003a5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fa8e 	bl	8001d68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2203      	movs	r2, #3
 8003850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f003 fa22 	bl	8006cb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	687e      	ldr	r6, [r7, #4]
 8003878:	466d      	mov	r5, sp
 800387a:	f106 0410 	add.w	r4, r6, #16
 800387e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388a:	e885 0003 	stmia.w	r5, {r0, r1}
 800388e:	1d33      	adds	r3, r6, #4
 8003890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003892:	6838      	ldr	r0, [r7, #0]
 8003894:	f003 f9b6 	bl	8006c04 <USB_CoreInit>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0d7      	b.n	8003a5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fa10 	bl	8006cd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e04a      	b.n	8003952 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	333d      	adds	r3, #61	; 0x3d
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	333c      	adds	r3, #60	; 0x3c
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	b298      	uxth	r0, r3
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3342      	adds	r3, #66	; 0x42
 80038f8:	4602      	mov	r2, r0
 80038fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	333f      	adds	r3, #63	; 0x3f
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3344      	adds	r3, #68	; 0x44
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003924:	7bfa      	ldrb	r2, [r7, #15]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	3348      	adds	r3, #72	; 0x48
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3350      	adds	r3, #80	; 0x50
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	3301      	adds	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3af      	bcc.n	80038bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	e044      	b.n	80039ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3301      	adds	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3b5      	bcc.n	8003962 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	687e      	ldr	r6, [r7, #4]
 80039fe:	466d      	mov	r5, sp
 8003a00:	f106 0410 	add.w	r4, r6, #16
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a14:	1d33      	adds	r3, r6, #4
 8003a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f003 f987 	bl	8006d2c <USB_DevInit>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e014      	b.n	8003a5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f80b 	bl	8003a64 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fb39 	bl	80070ca <USB_DevDisconnect>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	10000003 	.word	0x10000003

08003aac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40007000 	.word	0x40007000

08003acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e291      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af0:	4b96      	ldr	r3, [pc, #600]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afc:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d112      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b08:	4b90      	ldr	r3, [pc, #576]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d06c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x130>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e26b      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x7a>
 8003b38:	4b84      	ldr	r3, [pc, #528]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a83      	ldr	r2, [pc, #524]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e02e      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x9c>
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b7c      	ldr	r3, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7b      	ldr	r2, [pc, #492]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0xc0>
 8003b72:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a75      	ldr	r2, [pc, #468]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b73      	ldr	r3, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a72      	ldr	r2, [pc, #456]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b8c:	4b6f      	ldr	r3, [pc, #444]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6e      	ldr	r2, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6b      	ldr	r2, [pc, #428]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f9b2 	bl	8001f14 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f9ae 	bl	8001f14 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e21f      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f99e 	bl	8001f14 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe f99a 	bl	8001f14 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e20b      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x110>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d069      	beq.n	8003cde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c16:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x190>
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1df      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	493d      	ldr	r1, [pc, #244]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e040      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe f950 	bl	8001f14 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe f94c 	bl	8001f14 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1bd      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f92c 	bl	8001f14 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fe f928 	bl	8001f14 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e199      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d038      	beq.n	8003d5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d019      	beq.n	8003d26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe f909 	bl	8001f14 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe f905 	bl	8001f14 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e176      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x23a>
 8003d24:	e01a      	b.n	8003d5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fe f8ef 	bl	8001f14 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe f8eb 	bl	8001f14 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d903      	bls.n	8003d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e15c      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
 8003d4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ee      	bne.n	8003d3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a4 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a87      	ldr	r2, [pc, #540]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b85      	ldr	r3, [pc, #532]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	4b82      	ldr	r3, [pc, #520]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7e      	ldr	r2, [pc, #504]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fe f8b3 	bl	8001f14 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fe f8af 	bl	8001f14 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e120      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	4b75      	ldr	r3, [pc, #468]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x31a>
 8003dd8:	4b6f      	ldr	r3, [pc, #444]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e02d      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x33c>
 8003dee:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a69      	ldr	r2, [pc, #420]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a66      	ldr	r2, [pc, #408]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	e01c      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x35e>
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a60      	ldr	r2, [pc, #384]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a5d      	ldr	r2, [pc, #372]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e00b      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003e2a:	4b5b      	ldr	r3, [pc, #364]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5a      	ldr	r2, [pc, #360]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	4b58      	ldr	r3, [pc, #352]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a57      	ldr	r2, [pc, #348]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe f863 	bl	8001f14 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe f85f 	bl	8001f14 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0ce      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	4b4b      	ldr	r3, [pc, #300]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RCC_OscConfig+0x386>
 8003e74:	e014      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fe f84d 	bl	8001f14 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe f849 	bl	8001f14 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a3b      	ldr	r2, [pc, #236]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a4 	beq.w	8004004 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d06b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d149      	bne.n	8003f64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a30      	ldr	r2, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe f81a 	bl	8001f14 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe f816 	bl	8001f14 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e087      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	4313      	orrs	r3, r2
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd ffea 	bl	8001f14 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd ffe6 	bl	8001f14 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e057      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x478>
 8003f62:	e04f      	b.n	8004004 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fd ffd0 	bl	8001f14 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd ffcc 	bl	8001f14 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03d      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4ac>
 8003f96:	e035      	b.n	8004004 <HAL_RCC_OscConfig+0x538>
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_OscConfig+0x544>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d028      	beq.n	8004000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d121      	bne.n	8004000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11a      	bne.n	8004000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0d0      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800402c:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d910      	bls.n	800405c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b67      	ldr	r3, [pc, #412]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 020f 	bic.w	r2, r3, #15
 8004042:	4965      	ldr	r1, [pc, #404]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	494d      	ldr	r1, [pc, #308]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d040      	beq.n	8004138 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d115      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e07f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d6:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e073      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06b      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0203 	bic.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4936      	ldr	r1, [pc, #216]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fd ff04 	bl	8001f14 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	e00a      	b.n	8004126 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fd ff00 	bl	8001f14 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e053      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 020c 	and.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	429a      	cmp	r2, r3
 8004136:	d1eb      	bne.n	8004110 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d210      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 020f 	bic.w	r2, r3, #15
 800414e:	4922      	ldr	r1, [pc, #136]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4916      	ldr	r1, [pc, #88]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490e      	ldr	r1, [pc, #56]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041a6:	f000 f821 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x1cc>)
 80041b8:	5cd3      	ldrb	r3, [r2, r3]
 80041ba:	fa21 f303 	lsr.w	r3, r1, r3
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1d0>)
 80041c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_ClockConfig+0x1d4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd fe60 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	080084ac 	.word	0x080084ac
 80041e4:	20000018 	.word	0x20000018
 80041e8:	2000001c 	.word	0x2000001c

080041ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	2300      	movs	r3, #0
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b04      	cmp	r3, #4
 800420c:	d007      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x32>
 800420e:	2b08      	cmp	r3, #8
 8004210:	d008      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x38>
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 80b4 	bne.w	8004380 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800421a:	60bb      	str	r3, [r7, #8]
      break;
 800421c:	e0b3      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421e:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004220:	60bb      	str	r3, [r7, #8]
      break;
 8004222:	e0b0      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004224:	4b5a      	ldr	r3, [pc, #360]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800422c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800422e:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04a      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b55      	ldr	r3, [pc, #340]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	f04f 0400 	mov.w	r4, #0
 8004244:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea03 0501 	and.w	r5, r3, r1
 8004250:	ea04 0602 	and.w	r6, r4, r2
 8004254:	4629      	mov	r1, r5
 8004256:	4632      	mov	r2, r6
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f04f 0400 	mov.w	r4, #0
 8004260:	0154      	lsls	r4, r2, #5
 8004262:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004266:	014b      	lsls	r3, r1, #5
 8004268:	4619      	mov	r1, r3
 800426a:	4622      	mov	r2, r4
 800426c:	1b49      	subs	r1, r1, r5
 800426e:	eb62 0206 	sbc.w	r2, r2, r6
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f04f 0400 	mov.w	r4, #0
 800427a:	0194      	lsls	r4, r2, #6
 800427c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004280:	018b      	lsls	r3, r1, #6
 8004282:	1a5b      	subs	r3, r3, r1
 8004284:	eb64 0402 	sbc.w	r4, r4, r2
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	00e2      	lsls	r2, r4, #3
 8004292:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004296:	00d9      	lsls	r1, r3, #3
 8004298:	460b      	mov	r3, r1
 800429a:	4614      	mov	r4, r2
 800429c:	195b      	adds	r3, r3, r5
 800429e:	eb44 0406 	adc.w	r4, r4, r6
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	0262      	lsls	r2, r4, #9
 80042ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042b0:	0259      	lsls	r1, r3, #9
 80042b2:	460b      	mov	r3, r1
 80042b4:	4614      	mov	r4, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	4621      	mov	r1, r4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	461a      	mov	r2, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	f7fc fc2a 	bl	8000b1c <__aeabi_uldivmod>
 80042c8:	4603      	mov	r3, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e049      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	f04f 0400 	mov.w	r4, #0
 80042da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	ea03 0501 	and.w	r5, r3, r1
 80042e6:	ea04 0602 	and.w	r6, r4, r2
 80042ea:	4629      	mov	r1, r5
 80042ec:	4632      	mov	r2, r6
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f04f 0400 	mov.w	r4, #0
 80042f6:	0154      	lsls	r4, r2, #5
 80042f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042fc:	014b      	lsls	r3, r1, #5
 80042fe:	4619      	mov	r1, r3
 8004300:	4622      	mov	r2, r4
 8004302:	1b49      	subs	r1, r1, r5
 8004304:	eb62 0206 	sbc.w	r2, r2, r6
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	f04f 0400 	mov.w	r4, #0
 8004310:	0194      	lsls	r4, r2, #6
 8004312:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004316:	018b      	lsls	r3, r1, #6
 8004318:	1a5b      	subs	r3, r3, r1
 800431a:	eb64 0402 	sbc.w	r4, r4, r2
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800432c:	00d9      	lsls	r1, r3, #3
 800432e:	460b      	mov	r3, r1
 8004330:	4614      	mov	r4, r2
 8004332:	195b      	adds	r3, r3, r5
 8004334:	eb44 0406 	adc.w	r4, r4, r6
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	02a2      	lsls	r2, r4, #10
 8004342:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004346:	0299      	lsls	r1, r3, #10
 8004348:	460b      	mov	r3, r1
 800434a:	4614      	mov	r4, r2
 800434c:	4618      	mov	r0, r3
 800434e:	4621      	mov	r1, r4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	461a      	mov	r2, r3
 8004358:	4623      	mov	r3, r4
 800435a:	f7fc fbdf 	bl	8000b1c <__aeabi_uldivmod>
 800435e:	4603      	mov	r3, r0
 8004360:	460c      	mov	r4, r1
 8004362:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	60bb      	str	r3, [r7, #8]
      break;
 800437e:	e002      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004382:	60bb      	str	r3, [r7, #8]
      break;
 8004384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004386:	68bb      	ldr	r3, [r7, #8]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200

0800439c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000018 	.word	0x20000018

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff0 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043bc:	4601      	mov	r1, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0a9b      	lsrs	r3, r3, #10
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	080084bc 	.word	0x080084bc

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e0:	f7ff ffdc 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043e4:	4601      	mov	r1, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0b5b      	lsrs	r3, r3, #13
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4a03      	ldr	r2, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	080084bc 	.word	0x080084bc

08004404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800442c:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a68      	ldr	r2, [pc, #416]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	4964      	ldr	r1, [pc, #400]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d017      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445e:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	4959      	ldr	r1, [pc, #356]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800449a:	4b4e      	ldr	r3, [pc, #312]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	494a      	ldr	r1, [pc, #296]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b8:	d101      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 808b 	beq.w	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	4a39      	ldr	r2, [pc, #228]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6413      	str	r3, [r2, #64]	; 0x40
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd fd02 	bl	8001f14 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fd fcfe 	bl	8001f14 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e355      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d035      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d02e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004566:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004578:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d114      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd fcc6 	bl	8001f14 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fd fcc2 	bl	8001f14 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e317      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ee      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ba:	d111      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ca:	400b      	ands	r3, r1
 80045cc:	4901      	ldr	r1, [pc, #4]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
 80045d2:	e00b      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	0ffffcff 	.word	0x0ffffcff
 80045e0:	4bb0      	ldr	r3, [pc, #704]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4aaf      	ldr	r2, [pc, #700]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ea:	6093      	str	r3, [r2, #8]
 80045ec:	4bad      	ldr	r3, [pc, #692]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f8:	49aa      	ldr	r1, [pc, #680]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800460a:	4ba6      	ldr	r3, [pc, #664]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	4aa4      	ldr	r2, [pc, #656]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800461a:	4ba2      	ldr	r3, [pc, #648]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800461c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	499f      	ldr	r1, [pc, #636]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004638:	4b9a      	ldr	r3, [pc, #616]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004646:	4997      	ldr	r1, [pc, #604]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465a:	4b92      	ldr	r3, [pc, #584]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004668:	498e      	ldr	r1, [pc, #568]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467c:	4b89      	ldr	r3, [pc, #548]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468a:	4986      	ldr	r1, [pc, #536]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800469e:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	497d      	ldr	r1, [pc, #500]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c0:	4b78      	ldr	r3, [pc, #480]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	4975      	ldr	r1, [pc, #468]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e2:	4b70      	ldr	r3, [pc, #448]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f023 020c 	bic.w	r2, r3, #12
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	496c      	ldr	r1, [pc, #432]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004704:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	4964      	ldr	r1, [pc, #400]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004726:	4b5f      	ldr	r3, [pc, #380]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	495b      	ldr	r1, [pc, #364]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004748:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	4953      	ldr	r1, [pc, #332]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800476a:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	494a      	ldr	r1, [pc, #296]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800478c:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	4942      	ldr	r1, [pc, #264]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	4939      	ldr	r1, [pc, #228]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047de:	4931      	ldr	r1, [pc, #196]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047f2:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004800:	4928      	ldr	r1, [pc, #160]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004810:	d101      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	4918      	ldr	r1, [pc, #96]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004864:	490f      	ldr	r1, [pc, #60]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d005      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800487a:	f040 80d8 	bne.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fd fb43 	bl	8001f14 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004892:	f7fd fb3f 	bl	8001f14 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b64      	cmp	r3, #100	; 0x64
 800489e:	d903      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e196      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80048a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a8:	4b6c      	ldr	r3, [pc, #432]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ee      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d021      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11d      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048c8:	4b64      	ldr	r3, [pc, #400]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d6:	4b61      	ldr	r3, [pc, #388]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	0e1b      	lsrs	r3, r3, #24
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	019a      	lsls	r2, r3, #6
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	071b      	lsls	r3, r3, #28
 80048fc:	4957      	ldr	r1, [pc, #348]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02e      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492e:	d129      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004930:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004944:	0f1b      	lsrs	r3, r3, #28
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	019a      	lsls	r2, r3, #6
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	431a      	orrs	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	071b      	lsls	r3, r3, #28
 8004964:	493d      	ldr	r1, [pc, #244]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800496e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004972:	f023 021f 	bic.w	r2, r3, #31
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	3b01      	subs	r3, #1
 800497c:	4937      	ldr	r1, [pc, #220]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004990:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004996:	0e1b      	lsrs	r3, r3, #24
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800499e:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a4:	0f1b      	lsrs	r3, r3, #28
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	019a      	lsls	r2, r3, #6
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	071b      	lsls	r3, r3, #28
 80049c4:	4925      	ldr	r1, [pc, #148]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d011      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	019a      	lsls	r2, r3, #6
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	061b      	lsls	r3, r3, #24
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	071b      	lsls	r3, r3, #28
 80049f4:	4919      	ldr	r1, [pc, #100]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049fc:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fd fa84 	bl	8001f14 <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a10:	f7fd fa80 	bl	8001f14 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0d7      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 80cd 	bne.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fd fa67 	bl	8001f14 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a4a:	f7fd fa63 	bl	8001f14 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b64      	cmp	r3, #100	; 0x64
 8004a56:	d903      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e0ba      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a60:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6c:	d0ed      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02e      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d12a      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a96:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aa4:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	0f1b      	lsrs	r3, r3, #28
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	019a      	lsls	r2, r3, #6
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	061b      	lsls	r3, r3, #24
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	071b      	lsls	r3, r3, #28
 8004aca:	4944      	ldr	r1, [pc, #272]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ad2:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	493d      	ldr	r1, [pc, #244]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d022      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b00:	d11d      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b10:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	0f1b      	lsrs	r3, r3, #28
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	4929      	ldr	r1, [pc, #164]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d028      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4a:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	0e1b      	lsrs	r3, r3, #24
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b58:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4917      	ldr	r1, [pc, #92]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4911      	ldr	r1, [pc, #68]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba8:	f7fd f9b4 	bl	8001f14 <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bb0:	f7fd f9b0 	bl	8001f14 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e007      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bce:	d1ef      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e01d      	b.n	8004c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc ff4a 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fb1e 	bl	8005260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e01d      	b.n	8004c84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f815 	bl	8004c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 faf3 	bl	8005260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fe6c 	bl	8005990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_TIM_PWM_Start+0x7c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_PWM_Start+0x2c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <HAL_TIM_PWM_Start+0x80>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x30>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x32>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <HAL_TIM_PWM_Start+0x84>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d00b      	beq.n	8004d10 <HAL_TIM_PWM_Start+0x70>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400
 8004d24:	00010007 	.word	0x00010007

08004d28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e07b      	b.n	8004e34 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fc fec5 	bl	8001ae0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_TIM_Encoder_Init+0x114>)
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 fa71 	bl	8005260 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <HAL_TIM_Encoder_Init+0x118>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	4313      	orrs	r3, r2
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_TIM_Encoder_Init+0x11c>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <HAL_TIM_Encoder_Init+0x120>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	4313      	orrs	r3, r2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	fffebff8 	.word	0xfffebff8
 8004e40:	fffffcfc 	.word	0xfffffcfc
 8004e44:	fffff3f3 	.word	0xfffff3f3
 8004e48:	ffff0f0f 	.word	0xffff0f0f

08004e4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_TIM_Encoder_Start+0x16>
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d008      	beq.n	8004e72 <HAL_TIM_Encoder_Start+0x26>
 8004e60:	e00f      	b.n	8004e82 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2201      	movs	r2, #1
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fd90 	bl	8005990 <TIM_CCxChannelCmd>
      break;
 8004e70:	e016      	b.n	8004ea0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2201      	movs	r2, #1
 8004e78:	2104      	movs	r1, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fd88 	bl	8005990 <TIM_CCxChannelCmd>
      break;
 8004e80:	e00e      	b.n	8004ea0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fd80 	bl	8005990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2201      	movs	r2, #1
 8004e96:	2104      	movs	r1, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fd79 	bl	8005990 <TIM_CCxChannelCmd>
      break;
 8004e9e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e105      	b.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b14      	cmp	r3, #20
 8004eea:	f200 80f0 	bhi.w	80050ce <HAL_TIM_PWM_ConfigChannel+0x212>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f49 	.word	0x08004f49
 8004ef8:	080050cf 	.word	0x080050cf
 8004efc:	080050cf 	.word	0x080050cf
 8004f00:	080050cf 	.word	0x080050cf
 8004f04:	08004f89 	.word	0x08004f89
 8004f08:	080050cf 	.word	0x080050cf
 8004f0c:	080050cf 	.word	0x080050cf
 8004f10:	080050cf 	.word	0x080050cf
 8004f14:	08004fcb 	.word	0x08004fcb
 8004f18:	080050cf 	.word	0x080050cf
 8004f1c:	080050cf 	.word	0x080050cf
 8004f20:	080050cf 	.word	0x080050cf
 8004f24:	0800500b 	.word	0x0800500b
 8004f28:	080050cf 	.word	0x080050cf
 8004f2c:	080050cf 	.word	0x080050cf
 8004f30:	080050cf 	.word	0x080050cf
 8004f34:	0800504d 	.word	0x0800504d
 8004f38:	080050cf 	.word	0x080050cf
 8004f3c:	080050cf 	.word	0x080050cf
 8004f40:	080050cf 	.word	0x080050cf
 8004f44:	0800508d 	.word	0x0800508d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fa26 	bl	80053a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0208 	orr.w	r2, r2, #8
 8004f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0204 	bic.w	r2, r2, #4
 8004f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	619a      	str	r2, [r3, #24]
      break;
 8004f86:	e0a3      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fa78 	bl	8005484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	619a      	str	r2, [r3, #24]
      break;
 8004fc8:	e082      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 facf 	bl	8005574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0208 	orr.w	r2, r2, #8
 8004fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0204 	bic.w	r2, r2, #4
 8004ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	61da      	str	r2, [r3, #28]
      break;
 8005008:	e062      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fb25 	bl	8005660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	021a      	lsls	r2, r3, #8
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	61da      	str	r2, [r3, #28]
      break;
 800504a:	e041      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fb5c 	bl	8005710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0208 	orr.w	r2, r2, #8
 8005066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800508a:	e021      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fb8e 	bl	80057b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80050ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop

080050ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_ConfigClockSource+0x18>
 8005100:	2302      	movs	r3, #2
 8005102:	e0a6      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x166>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4b4f      	ldr	r3, [pc, #316]	; (800525c <HAL_TIM_ConfigClockSource+0x170>)
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d067      	beq.n	800520c <HAL_TIM_ConfigClockSource+0x120>
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d80b      	bhi.n	8005158 <HAL_TIM_ConfigClockSource+0x6c>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d073      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
 8005144:	2b10      	cmp	r3, #16
 8005146:	d802      	bhi.n	800514e <HAL_TIM_ConfigClockSource+0x62>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d06f      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800514c:	e078      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800514e:	2b20      	cmp	r3, #32
 8005150:	d06c      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	d06a      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005156:	e073      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005158:	2b70      	cmp	r3, #112	; 0x70
 800515a:	d00d      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x8c>
 800515c:	2b70      	cmp	r3, #112	; 0x70
 800515e:	d804      	bhi.n	800516a <HAL_TIM_ConfigClockSource+0x7e>
 8005160:	2b50      	cmp	r3, #80	; 0x50
 8005162:	d033      	beq.n	80051cc <HAL_TIM_ConfigClockSource+0xe0>
 8005164:	2b60      	cmp	r3, #96	; 0x60
 8005166:	d041      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005168:	e06a      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d066      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x152>
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005174:	d017      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005176:	e063      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6899      	ldr	r1, [r3, #8]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f000 fbe2 	bl	8005950 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800519a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]
      break;
 80051a4:	e04c      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f000 fbcb 	bl	8005950 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c8:	609a      	str	r2, [r3, #8]
      break;
 80051ca:	e039      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	461a      	mov	r2, r3
 80051da:	f000 fb3f 	bl	800585c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2150      	movs	r1, #80	; 0x50
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fb98 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 80051ea:	e029      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f000 fb5e 	bl	80058ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2160      	movs	r1, #96	; 0x60
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fb88 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 800520a:	e019      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	461a      	mov	r2, r3
 800521a:	f000 fb1f 	bl	800585c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2140      	movs	r1, #64	; 0x40
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fb78 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 800522a:	e009      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 fb6f 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 800523c:	e000      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800523e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	fffeff88 	.word	0xfffeff88

08005260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a40      	ldr	r2, [pc, #256]	; (8005374 <TIM_Base_SetConfig+0x114>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527e:	d00f      	beq.n	80052a0 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3d      	ldr	r2, [pc, #244]	; (8005378 <TIM_Base_SetConfig+0x118>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00b      	beq.n	80052a0 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3c      	ldr	r2, [pc, #240]	; (800537c <TIM_Base_SetConfig+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a3b      	ldr	r2, [pc, #236]	; (8005380 <TIM_Base_SetConfig+0x120>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <TIM_Base_SetConfig+0x124>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d108      	bne.n	80052b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2f      	ldr	r2, [pc, #188]	; (8005374 <TIM_Base_SetConfig+0x114>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d02b      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c0:	d027      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <TIM_Base_SetConfig+0x118>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d023      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2b      	ldr	r2, [pc, #172]	; (800537c <TIM_Base_SetConfig+0x11c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01f      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <TIM_Base_SetConfig+0x120>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a29      	ldr	r2, [pc, #164]	; (8005384 <TIM_Base_SetConfig+0x124>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a28      	ldr	r2, [pc, #160]	; (8005388 <TIM_Base_SetConfig+0x128>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a27      	ldr	r2, [pc, #156]	; (800538c <TIM_Base_SetConfig+0x12c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a26      	ldr	r2, [pc, #152]	; (8005390 <TIM_Base_SetConfig+0x130>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <TIM_Base_SetConfig+0x134>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a24      	ldr	r2, [pc, #144]	; (8005398 <TIM_Base_SetConfig+0x138>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a23      	ldr	r2, [pc, #140]	; (800539c <TIM_Base_SetConfig+0x13c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <TIM_Base_SetConfig+0x114>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0xf8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <TIM_Base_SetConfig+0x124>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d103      	bne.n	8005360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	615a      	str	r2, [r3, #20]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40010400 	.word	0x40010400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	40001800 	.word	0x40001800
 8005398:	40001c00 	.word	0x40001c00
 800539c:	40002000 	.word	0x40002000

080053a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <TIM_OC1_SetConfig+0xd8>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 0302 	bic.w	r3, r3, #2
 80053e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a21      	ldr	r2, [pc, #132]	; (800547c <TIM_OC1_SetConfig+0xdc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC1_SetConfig+0x64>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a20      	ldr	r2, [pc, #128]	; (8005480 <TIM_OC1_SetConfig+0xe0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0308 	bic.w	r3, r3, #8
 800540a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0304 	bic.w	r3, r3, #4
 800541c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <TIM_OC1_SetConfig+0xdc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC1_SetConfig+0x8e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <TIM_OC1_SetConfig+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d111      	bne.n	8005452 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	621a      	str	r2, [r3, #32]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	fffeff8f 	.word	0xfffeff8f
 800547c:	40010000 	.word	0x40010000
 8005480:	40010400 	.word	0x40010400

08005484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0210 	bic.w	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <TIM_OC2_SetConfig+0xe4>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0320 	bic.w	r3, r3, #32
 80054ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a23      	ldr	r2, [pc, #140]	; (800556c <TIM_OC2_SetConfig+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_OC2_SetConfig+0x68>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a22      	ldr	r2, [pc, #136]	; (8005570 <TIM_OC2_SetConfig+0xec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10d      	bne.n	8005508 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_OC2_SetConfig+0xe8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC2_SetConfig+0x94>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <TIM_OC2_SetConfig+0xec>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d113      	bne.n	8005540 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800551e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	feff8fff 	.word	0xfeff8fff
 800556c:	40010000 	.word	0x40010000
 8005570:	40010400 	.word	0x40010400

08005574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <TIM_OC3_SetConfig+0xe0>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <TIM_OC3_SetConfig+0xe4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_OC3_SetConfig+0x66>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <TIM_OC3_SetConfig+0xe8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d10d      	bne.n	80055f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a17      	ldr	r2, [pc, #92]	; (8005658 <TIM_OC3_SetConfig+0xe4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC3_SetConfig+0x92>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a16      	ldr	r2, [pc, #88]	; (800565c <TIM_OC3_SetConfig+0xe8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d113      	bne.n	800562e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	fffeff8f 	.word	0xfffeff8f
 8005658:	40010000 	.word	0x40010000
 800565c:	40010400 	.word	0x40010400

08005660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <TIM_OC4_SetConfig+0xa4>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	031b      	lsls	r3, r3, #12
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <TIM_OC4_SetConfig+0xa8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC4_SetConfig+0x68>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a12      	ldr	r2, [pc, #72]	; (800570c <TIM_OC4_SetConfig+0xac>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	019b      	lsls	r3, r3, #6
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	feff8fff 	.word	0xfeff8fff
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <TIM_OC5_SetConfig+0x98>)
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a12      	ldr	r2, [pc, #72]	; (80057ac <TIM_OC5_SetConfig+0x9c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC5_SetConfig+0x5e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <TIM_OC5_SetConfig+0xa0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d109      	bne.n	8005782 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	fffeff8f 	.word	0xfffeff8f
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <TIM_OC6_SetConfig+0x9c>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	051b      	lsls	r3, r3, #20
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <TIM_OC6_SetConfig+0xa0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC6_SetConfig+0x60>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a12      	ldr	r2, [pc, #72]	; (8005858 <TIM_OC6_SetConfig+0xa4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d109      	bne.n	8005828 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	feff8fff 	.word	0xfeff8fff
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 030a 	bic.w	r3, r3, #10
 8005898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0210 	bic.w	r2, r3, #16
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	f043 0307 	orr.w	r3, r3, #7
 800593c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	431a      	orrs	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2201      	movs	r2, #1
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e06d      	b.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a30      	ldr	r2, [pc, #192]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2f      	ldr	r2, [pc, #188]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a20      	ldr	r2, [pc, #128]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d022      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d01d      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40001800 	.word	0x40001800

08005af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e040      	b.n	8005b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc f8aa 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	; 0x24
 8005b24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb02 	bl	8006140 <UART_SetConfig>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e022      	b.n	8005b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fda0 	bl	8006694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fe27 	bl	80067d8 <UART_CheckIdleState>
 8005b8a:	4603      	mov	r3, r0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d17f      	bne.n	8005cac <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Transmit+0x24>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e078      	b.n	8005cae <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Transmit+0x36>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e071      	b.n	8005cae <HAL_UART_Transmit+0x11a>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2221      	movs	r2, #33	; 0x21
 8005bdc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005bde:	f7fc f999 	bl	8001f14 <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88fa      	ldrh	r2, [r7, #6]
 8005be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d108      	bne.n	8005c10 <HAL_UART_Transmit+0x7c>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	e003      	b.n	8005c18 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c20:	e02c      	b.n	8005c7c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fe02 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e038      	b.n	8005cae <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	3302      	adds	r3, #2
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	e007      	b.n	8005c6a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1cc      	bne.n	8005c22 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2140      	movs	r1, #64	; 0x40
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fdcf 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e005      	b.n	8005cae <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e000      	b.n	8005cae <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d144      	bne.n	8005d58 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_UART_Transmit_IT+0x22>
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e03d      	b.n	8005d5a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_UART_Transmit_IT+0x34>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e036      	b.n	8005d5a <HAL_UART_Transmit_IT+0xa2>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2221      	movs	r2, #33	; 0x21
 8005d1a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d24:	d107      	bne.n	8005d36 <HAL_UART_Transmit_IT+0x7e>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_UART_Transmit_IT+0xb0>)
 8005d32:	665a      	str	r2, [r3, #100]	; 0x64
 8005d34:	e002      	b.n	8005d3c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_UART_Transmit_IT+0xb4>)
 8005d3a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d52:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	08006a0b 	.word	0x08006a0b
 8005d6c:	08006999 	.word	0x08006999

08005d70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	f040 808a 	bne.w	8005e9c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_UART_Receive_IT+0x24>
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e082      	b.n	8005e9e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Receive_IT+0x36>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e07b      	b.n	8005e9e <HAL_UART_Receive_IT+0x12e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	d10e      	bne.n	8005df2 <HAL_UART_Receive_IT+0x82>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_UART_Receive_IT+0x78>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005de2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005de6:	e02d      	b.n	8005e44 <HAL_UART_Receive_IT+0xd4>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	22ff      	movs	r2, #255	; 0xff
 8005dec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005df0:	e028      	b.n	8005e44 <HAL_UART_Receive_IT+0xd4>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10d      	bne.n	8005e16 <HAL_UART_Receive_IT+0xa6>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <HAL_UART_Receive_IT+0x9c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e0a:	e01b      	b.n	8005e44 <HAL_UART_Receive_IT+0xd4>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	227f      	movs	r2, #127	; 0x7f
 8005e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e14:	e016      	b.n	8005e44 <HAL_UART_Receive_IT+0xd4>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e1e:	d10d      	bne.n	8005e3c <HAL_UART_Receive_IT+0xcc>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_UART_Receive_IT+0xc2>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	227f      	movs	r2, #127	; 0x7f
 8005e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e30:	e008      	b.n	8005e44 <HAL_UART_Receive_IT+0xd4>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	223f      	movs	r2, #63	; 0x3f
 8005e36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e3a:	e003      	b.n	8005e44 <HAL_UART_Receive_IT+0xd4>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2222      	movs	r2, #34	; 0x22
 8005e4e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e68:	d107      	bne.n	8005e7a <HAL_UART_Receive_IT+0x10a>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a0d      	ldr	r2, [pc, #52]	; (8005eac <HAL_UART_Receive_IT+0x13c>)
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60
 8005e78:	e002      	b.n	8005e80 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a0c      	ldr	r2, [pc, #48]	; (8005eb0 <HAL_UART_Receive_IT+0x140>)
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005e96:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e000      	b.n	8005e9e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
  }
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	08006b5f 	.word	0x08006b5f
 8005eb0:	08006ab9 	.word	0x08006ab9

08005eb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d113      	bne.n	8005f0c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00e      	beq.n	8005f0c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8100 	beq.w	8006102 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
      }
      return;
 8005f0a:	e0fa      	b.n	8006102 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80d5 	beq.w	80060be <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80ca 	beq.w	80060be <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <HAL_UART_IRQHandler+0x9e>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <HAL_UART_IRQHandler+0xc6>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f72:	f043 0204 	orr.w	r2, r3, #4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xee>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2204      	movs	r2, #4
 8005f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d013      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d104      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fcc:	f043 0208 	orr.w	r2, r3, #8
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00f      	beq.n	8005ffe <HAL_UART_IRQHandler+0x14a>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d07f      	beq.n	8006106 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d004      	beq.n	8006048 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006044:	2b00      	cmp	r3, #0
 8006046:	d031      	beq.n	80060ac <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fc6f 	bl	800692c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d123      	bne.n	80060a4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800606a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d013      	beq.n	800609c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <HAL_UART_IRQHandler+0x260>)
 800607a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006080:	4618      	mov	r0, r3
 8006082:	f7fc f886 	bl	8002192 <HAL_DMA_Abort_IT>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d016      	beq.n	80060ba <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006096:	4610      	mov	r0, r2
 8006098:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609a:	e00e      	b.n	80060ba <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f845 	bl	800612c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a2:	e00a      	b.n	80060ba <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f841 	bl	800612c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060aa:	e006      	b.n	80060ba <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f83d 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80060b8:	e025      	b.n	8006106 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ba:	bf00      	nop
    return;
 80060bc:	e023      	b.n	8006106 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
    }
    return;
 80060e2:	e012      	b.n	800610a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <HAL_UART_IRQHandler+0x258>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fcc4 	bl	8006a86 <UART_EndTransmit_IT>
    return;
 80060fe:	bf00      	nop
 8006100:	e004      	b.n	800610c <HAL_UART_IRQHandler+0x258>
      return;
 8006102:	bf00      	nop
 8006104:	e002      	b.n	800610c <HAL_UART_IRQHandler+0x258>
    return;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <HAL_UART_IRQHandler+0x258>
    return;
 800610a:	bf00      	nop
  }

}
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	0800696d 	.word	0x0800696d

08006118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4bb1      	ldr	r3, [pc, #708]	; (8006434 <UART_SetConfig+0x2f4>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	6939      	ldr	r1, [r7, #16]
 8006178:	430b      	orrs	r3, r1
 800617a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a9f      	ldr	r2, [pc, #636]	; (8006438 <UART_SetConfig+0x2f8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d121      	bne.n	8006204 <UART_SetConfig+0xc4>
 80061c0:	4b9e      	ldr	r3, [pc, #632]	; (800643c <UART_SetConfig+0x2fc>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d816      	bhi.n	80061fc <UART_SetConfig+0xbc>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0x94>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061eb 	.word	0x080061eb
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	2301      	movs	r3, #1
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e151      	b.n	800648e <UART_SetConfig+0x34e>
 80061ea:	2302      	movs	r3, #2
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e14e      	b.n	800648e <UART_SetConfig+0x34e>
 80061f0:	2304      	movs	r3, #4
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e14b      	b.n	800648e <UART_SetConfig+0x34e>
 80061f6:	2308      	movs	r3, #8
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e148      	b.n	800648e <UART_SetConfig+0x34e>
 80061fc:	2310      	movs	r3, #16
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	bf00      	nop
 8006202:	e144      	b.n	800648e <UART_SetConfig+0x34e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a8d      	ldr	r2, [pc, #564]	; (8006440 <UART_SetConfig+0x300>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d134      	bne.n	8006278 <UART_SetConfig+0x138>
 800620e:	4b8b      	ldr	r3, [pc, #556]	; (800643c <UART_SetConfig+0x2fc>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d829      	bhi.n	8006270 <UART_SetConfig+0x130>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0xe4>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006259 	.word	0x08006259
 8006228:	08006271 	.word	0x08006271
 800622c:	08006271 	.word	0x08006271
 8006230:	08006271 	.word	0x08006271
 8006234:	08006265 	.word	0x08006265
 8006238:	08006271 	.word	0x08006271
 800623c:	08006271 	.word	0x08006271
 8006240:	08006271 	.word	0x08006271
 8006244:	0800625f 	.word	0x0800625f
 8006248:	08006271 	.word	0x08006271
 800624c:	08006271 	.word	0x08006271
 8006250:	08006271 	.word	0x08006271
 8006254:	0800626b 	.word	0x0800626b
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e117      	b.n	800648e <UART_SetConfig+0x34e>
 800625e:	2302      	movs	r3, #2
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e114      	b.n	800648e <UART_SetConfig+0x34e>
 8006264:	2304      	movs	r3, #4
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e111      	b.n	800648e <UART_SetConfig+0x34e>
 800626a:	2308      	movs	r3, #8
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e10e      	b.n	800648e <UART_SetConfig+0x34e>
 8006270:	2310      	movs	r3, #16
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	bf00      	nop
 8006276:	e10a      	b.n	800648e <UART_SetConfig+0x34e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a71      	ldr	r2, [pc, #452]	; (8006444 <UART_SetConfig+0x304>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d120      	bne.n	80062c4 <UART_SetConfig+0x184>
 8006282:	4b6e      	ldr	r3, [pc, #440]	; (800643c <UART_SetConfig+0x2fc>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800628c:	2b10      	cmp	r3, #16
 800628e:	d00f      	beq.n	80062b0 <UART_SetConfig+0x170>
 8006290:	2b10      	cmp	r3, #16
 8006292:	d802      	bhi.n	800629a <UART_SetConfig+0x15a>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <UART_SetConfig+0x164>
 8006298:	e010      	b.n	80062bc <UART_SetConfig+0x17c>
 800629a:	2b20      	cmp	r3, #32
 800629c:	d005      	beq.n	80062aa <UART_SetConfig+0x16a>
 800629e:	2b30      	cmp	r3, #48	; 0x30
 80062a0:	d009      	beq.n	80062b6 <UART_SetConfig+0x176>
 80062a2:	e00b      	b.n	80062bc <UART_SetConfig+0x17c>
 80062a4:	2300      	movs	r3, #0
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e0f1      	b.n	800648e <UART_SetConfig+0x34e>
 80062aa:	2302      	movs	r3, #2
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e0ee      	b.n	800648e <UART_SetConfig+0x34e>
 80062b0:	2304      	movs	r3, #4
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e0eb      	b.n	800648e <UART_SetConfig+0x34e>
 80062b6:	2308      	movs	r3, #8
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e0e8      	b.n	800648e <UART_SetConfig+0x34e>
 80062bc:	2310      	movs	r3, #16
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	bf00      	nop
 80062c2:	e0e4      	b.n	800648e <UART_SetConfig+0x34e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5f      	ldr	r2, [pc, #380]	; (8006448 <UART_SetConfig+0x308>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d120      	bne.n	8006310 <UART_SetConfig+0x1d0>
 80062ce:	4b5b      	ldr	r3, [pc, #364]	; (800643c <UART_SetConfig+0x2fc>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d00f      	beq.n	80062fc <UART_SetConfig+0x1bc>
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d802      	bhi.n	80062e6 <UART_SetConfig+0x1a6>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <UART_SetConfig+0x1b0>
 80062e4:	e010      	b.n	8006308 <UART_SetConfig+0x1c8>
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d005      	beq.n	80062f6 <UART_SetConfig+0x1b6>
 80062ea:	2bc0      	cmp	r3, #192	; 0xc0
 80062ec:	d009      	beq.n	8006302 <UART_SetConfig+0x1c2>
 80062ee:	e00b      	b.n	8006308 <UART_SetConfig+0x1c8>
 80062f0:	2300      	movs	r3, #0
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e0cb      	b.n	800648e <UART_SetConfig+0x34e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	77fb      	strb	r3, [r7, #31]
 80062fa:	e0c8      	b.n	800648e <UART_SetConfig+0x34e>
 80062fc:	2304      	movs	r3, #4
 80062fe:	77fb      	strb	r3, [r7, #31]
 8006300:	e0c5      	b.n	800648e <UART_SetConfig+0x34e>
 8006302:	2308      	movs	r3, #8
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e0c2      	b.n	800648e <UART_SetConfig+0x34e>
 8006308:	2310      	movs	r3, #16
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	bf00      	nop
 800630e:	e0be      	b.n	800648e <UART_SetConfig+0x34e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a4d      	ldr	r2, [pc, #308]	; (800644c <UART_SetConfig+0x30c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d124      	bne.n	8006364 <UART_SetConfig+0x224>
 800631a:	4b48      	ldr	r3, [pc, #288]	; (800643c <UART_SetConfig+0x2fc>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006328:	d012      	beq.n	8006350 <UART_SetConfig+0x210>
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d802      	bhi.n	8006336 <UART_SetConfig+0x1f6>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <UART_SetConfig+0x204>
 8006334:	e012      	b.n	800635c <UART_SetConfig+0x21c>
 8006336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633a:	d006      	beq.n	800634a <UART_SetConfig+0x20a>
 800633c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006340:	d009      	beq.n	8006356 <UART_SetConfig+0x216>
 8006342:	e00b      	b.n	800635c <UART_SetConfig+0x21c>
 8006344:	2300      	movs	r3, #0
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e0a1      	b.n	800648e <UART_SetConfig+0x34e>
 800634a:	2302      	movs	r3, #2
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e09e      	b.n	800648e <UART_SetConfig+0x34e>
 8006350:	2304      	movs	r3, #4
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e09b      	b.n	800648e <UART_SetConfig+0x34e>
 8006356:	2308      	movs	r3, #8
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e098      	b.n	800648e <UART_SetConfig+0x34e>
 800635c:	2310      	movs	r3, #16
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	bf00      	nop
 8006362:	e094      	b.n	800648e <UART_SetConfig+0x34e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a39      	ldr	r2, [pc, #228]	; (8006450 <UART_SetConfig+0x310>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d124      	bne.n	80063b8 <UART_SetConfig+0x278>
 800636e:	4b33      	ldr	r3, [pc, #204]	; (800643c <UART_SetConfig+0x2fc>)
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637c:	d012      	beq.n	80063a4 <UART_SetConfig+0x264>
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006382:	d802      	bhi.n	800638a <UART_SetConfig+0x24a>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <UART_SetConfig+0x258>
 8006388:	e012      	b.n	80063b0 <UART_SetConfig+0x270>
 800638a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638e:	d006      	beq.n	800639e <UART_SetConfig+0x25e>
 8006390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006394:	d009      	beq.n	80063aa <UART_SetConfig+0x26a>
 8006396:	e00b      	b.n	80063b0 <UART_SetConfig+0x270>
 8006398:	2301      	movs	r3, #1
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e077      	b.n	800648e <UART_SetConfig+0x34e>
 800639e:	2302      	movs	r3, #2
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e074      	b.n	800648e <UART_SetConfig+0x34e>
 80063a4:	2304      	movs	r3, #4
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e071      	b.n	800648e <UART_SetConfig+0x34e>
 80063aa:	2308      	movs	r3, #8
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e06e      	b.n	800648e <UART_SetConfig+0x34e>
 80063b0:	2310      	movs	r3, #16
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	bf00      	nop
 80063b6:	e06a      	b.n	800648e <UART_SetConfig+0x34e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <UART_SetConfig+0x314>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d124      	bne.n	800640c <UART_SetConfig+0x2cc>
 80063c2:	4b1e      	ldr	r3, [pc, #120]	; (800643c <UART_SetConfig+0x2fc>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d0:	d012      	beq.n	80063f8 <UART_SetConfig+0x2b8>
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	d802      	bhi.n	80063de <UART_SetConfig+0x29e>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <UART_SetConfig+0x2ac>
 80063dc:	e012      	b.n	8006404 <UART_SetConfig+0x2c4>
 80063de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e2:	d006      	beq.n	80063f2 <UART_SetConfig+0x2b2>
 80063e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063e8:	d009      	beq.n	80063fe <UART_SetConfig+0x2be>
 80063ea:	e00b      	b.n	8006404 <UART_SetConfig+0x2c4>
 80063ec:	2300      	movs	r3, #0
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e04d      	b.n	800648e <UART_SetConfig+0x34e>
 80063f2:	2302      	movs	r3, #2
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e04a      	b.n	800648e <UART_SetConfig+0x34e>
 80063f8:	2304      	movs	r3, #4
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e047      	b.n	800648e <UART_SetConfig+0x34e>
 80063fe:	2308      	movs	r3, #8
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e044      	b.n	800648e <UART_SetConfig+0x34e>
 8006404:	2310      	movs	r3, #16
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	bf00      	nop
 800640a:	e040      	b.n	800648e <UART_SetConfig+0x34e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a11      	ldr	r2, [pc, #68]	; (8006458 <UART_SetConfig+0x318>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d139      	bne.n	800648a <UART_SetConfig+0x34a>
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <UART_SetConfig+0x2fc>)
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006424:	d027      	beq.n	8006476 <UART_SetConfig+0x336>
 8006426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642a:	d817      	bhi.n	800645c <UART_SetConfig+0x31c>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <UART_SetConfig+0x32a>
 8006430:	e027      	b.n	8006482 <UART_SetConfig+0x342>
 8006432:	bf00      	nop
 8006434:	efff69f3 	.word	0xefff69f3
 8006438:	40011000 	.word	0x40011000
 800643c:	40023800 	.word	0x40023800
 8006440:	40004400 	.word	0x40004400
 8006444:	40004800 	.word	0x40004800
 8006448:	40004c00 	.word	0x40004c00
 800644c:	40005000 	.word	0x40005000
 8006450:	40011400 	.word	0x40011400
 8006454:	40007800 	.word	0x40007800
 8006458:	40007c00 	.word	0x40007c00
 800645c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006460:	d006      	beq.n	8006470 <UART_SetConfig+0x330>
 8006462:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006466:	d009      	beq.n	800647c <UART_SetConfig+0x33c>
 8006468:	e00b      	b.n	8006482 <UART_SetConfig+0x342>
 800646a:	2300      	movs	r3, #0
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e00e      	b.n	800648e <UART_SetConfig+0x34e>
 8006470:	2302      	movs	r3, #2
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e00b      	b.n	800648e <UART_SetConfig+0x34e>
 8006476:	2304      	movs	r3, #4
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e008      	b.n	800648e <UART_SetConfig+0x34e>
 800647c:	2308      	movs	r3, #8
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e005      	b.n	800648e <UART_SetConfig+0x34e>
 8006482:	2310      	movs	r3, #16
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	bf00      	nop
 8006488:	e001      	b.n	800648e <UART_SetConfig+0x34e>
 800648a:	2310      	movs	r3, #16
 800648c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006496:	d17f      	bne.n	8006598 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006498:	7ffb      	ldrb	r3, [r7, #31]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d85c      	bhi.n	8006558 <UART_SetConfig+0x418>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x364>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	08006509 	.word	0x08006509
 80064b0:	08006559 	.word	0x08006559
 80064b4:	08006521 	.word	0x08006521
 80064b8:	08006559 	.word	0x08006559
 80064bc:	08006559 	.word	0x08006559
 80064c0:	08006559 	.word	0x08006559
 80064c4:	08006541 	.word	0x08006541
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c8:	f7fd ff74 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80064cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	005a      	lsls	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	441a      	add	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	61bb      	str	r3, [r7, #24]
        break;
 80064e6:	e03a      	b.n	800655e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fd ff78 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 80064ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	005a      	lsls	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	441a      	add	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	61bb      	str	r3, [r7, #24]
        break;
 8006506:	e02a      	b.n	800655e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	085a      	lsrs	r2, r3, #1
 800650e:	4b5f      	ldr	r3, [pc, #380]	; (800668c <UART_SetConfig+0x54c>)
 8006510:	4413      	add	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6852      	ldr	r2, [r2, #4]
 8006516:	fbb3 f3f2 	udiv	r3, r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	61bb      	str	r3, [r7, #24]
        break;
 800651e:	e01e      	b.n	800655e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006520:	f7fd fe64 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 8006524:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	005a      	lsls	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	441a      	add	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	b29b      	uxth	r3, r3
 800653c:	61bb      	str	r3, [r7, #24]
        break;
 800653e:	e00e      	b.n	800655e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006552:	b29b      	uxth	r3, r3
 8006554:	61bb      	str	r3, [r7, #24]
        break;
 8006556:	e002      	b.n	800655e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
        break;
 800655c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b0f      	cmp	r3, #15
 8006562:	d916      	bls.n	8006592 <UART_SetConfig+0x452>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656a:	d212      	bcs.n	8006592 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f023 030f 	bic.w	r3, r3, #15
 8006574:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	b29b      	uxth	r3, r3
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	b29a      	uxth	r2, r3
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	4313      	orrs	r3, r2
 8006586:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	897a      	ldrh	r2, [r7, #10]
 800658e:	60da      	str	r2, [r3, #12]
 8006590:	e070      	b.n	8006674 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
 8006596:	e06d      	b.n	8006674 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006598:	7ffb      	ldrb	r3, [r7, #31]
 800659a:	2b08      	cmp	r3, #8
 800659c:	d859      	bhi.n	8006652 <UART_SetConfig+0x512>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <UART_SetConfig+0x464>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065e7 	.word	0x080065e7
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006653 	.word	0x08006653
 80065b4:	0800661d 	.word	0x0800661d
 80065b8:	08006653 	.word	0x08006653
 80065bc:	08006653 	.word	0x08006653
 80065c0:	08006653 	.word	0x08006653
 80065c4:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fd fef4 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80065cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	085a      	lsrs	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	441a      	add	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	61bb      	str	r3, [r7, #24]
        break;
 80065e4:	e038      	b.n	8006658 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e6:	f7fd fef9 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 80065ea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	085a      	lsrs	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	b29b      	uxth	r3, r3
 8006600:	61bb      	str	r3, [r7, #24]
        break;
 8006602:	e029      	b.n	8006658 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	085a      	lsrs	r2, r3, #1
 800660a:	4b21      	ldr	r3, [pc, #132]	; (8006690 <UART_SetConfig+0x550>)
 800660c:	4413      	add	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6852      	ldr	r2, [r2, #4]
 8006612:	fbb3 f3f2 	udiv	r3, r3, r2
 8006616:	b29b      	uxth	r3, r3
 8006618:	61bb      	str	r3, [r7, #24]
        break;
 800661a:	e01d      	b.n	8006658 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661c:	f7fd fde6 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 8006620:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085a      	lsrs	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	441a      	add	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	b29b      	uxth	r3, r3
 8006636:	61bb      	str	r3, [r7, #24]
        break;
 8006638:	e00e      	b.n	8006658 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	b29b      	uxth	r3, r3
 800664e:	61bb      	str	r3, [r7, #24]
        break;
 8006650:	e002      	b.n	8006658 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	75fb      	strb	r3, [r7, #23]
        break;
 8006656:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b0f      	cmp	r3, #15
 800665c:	d908      	bls.n	8006670 <UART_SetConfig+0x530>
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006664:	d204      	bcs.n	8006670 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	e001      	b.n	8006674 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	01e84800 	.word	0x01e84800
 8006690:	00f42400 	.word	0x00f42400

08006694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006792:	d10a      	bne.n	80067aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af02      	add	r7, sp, #8
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80067e6:	f7fb fb95 	bl	8001f14 <HAL_GetTick>
 80067ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d10e      	bne.n	8006818 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f814 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e00a      	b.n	800682e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4613      	mov	r3, r2
 8006844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006846:	e05d      	b.n	8006904 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d059      	beq.n	8006904 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006850:	f7fb fb60 	bl	8001f14 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	429a      	cmp	r2, r3
 800685e:	d302      	bcc.n	8006866 <UART_WaitOnFlagUntilTimeout+0x30>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d11b      	bne.n	800689e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006874:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e042      	b.n	8006924 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d02b      	beq.n	8006904 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ba:	d123      	bne.n	8006904 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e00f      	b.n	8006924 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4013      	ands	r3, r2
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	429a      	cmp	r2, r3
 8006912:	bf0c      	ite	eq
 8006914:	2301      	moveq	r3, #1
 8006916:	2300      	movne	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	429a      	cmp	r2, r3
 8006920:	d092      	beq.n	8006848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006942:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fbce 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a4:	2b21      	cmp	r3, #33	; 0x21
 80069a6:	d12a      	bne.n	80069fe <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d110      	bne.n	80069d6 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80069d4:	e013      	b.n	80069fe <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a16:	2b21      	cmp	r3, #33	; 0x21
 8006a18:	d12f      	bne.n	8006a7a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d110      	bne.n	8006a48 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a34:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a44:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006a46:	e018      	b.n	8006a7a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a5c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff fb34 	bl	8006118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ac6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006acc:	2b22      	cmp	r3, #34	; 0x22
 8006ace:	d13a      	bne.n	8006b46 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ad8:	89bb      	ldrh	r3, [r7, #12]
 8006ada:	b2d9      	uxtb	r1, r3
 8006adc:	89fb      	ldrh	r3, [r7, #14]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae4:	400a      	ands	r2, r1
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d121      	bne.n	8006b56 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b20:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fa fbe2 	bl	8001308 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b44:	e007      	b.n	8006b56 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0208 	orr.w	r2, r2, #8
 8006b54:	619a      	str	r2, [r3, #24]
}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b6c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b72:	2b22      	cmp	r3, #34	; 0x22
 8006b74:	d13a      	bne.n	8006bec <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b84:	89ba      	ldrh	r2, [r7, #12]
 8006b86:	89fb      	ldrh	r3, [r7, #14]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	1c9a      	adds	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d121      	bne.n	8006bfc <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bc6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7fa fb8f 	bl	8001308 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bea:	e007      	b.n	8006bfc <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0208 	orr.w	r2, r2, #8
 8006bfa:	619a      	str	r2, [r3, #24]
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c04:	b084      	sub	sp, #16
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	f107 001c 	add.w	r0, r7, #28
 8006c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d120      	bne.n	8006c5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <USB_CoreInit+0xac>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d105      	bne.n	8006c52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa52 	bl	80070fc <USB_CoreReset>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e010      	b.n	8006c80 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa46 	bl	80070fc <USB_CoreReset>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10b      	bne.n	8006c9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f043 0206 	orr.w	r2, r3, #6
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006caa:	b004      	add	sp, #16
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	ffbdffbf 	.word	0xffbdffbf

08006cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f023 0201 	bic.w	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d106      	bne.n	8006d02 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	e00b      	b.n	8006d1a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60da      	str	r2, [r3, #12]
 8006d14:	e001      	b.n	8006d1a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e003      	b.n	8006d22 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d1a:	2032      	movs	r0, #50	; 0x32
 8006d1c:	f7fb f906 	bl	8001f2c <HAL_Delay>

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e009      	b.n	8006d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3340      	adds	r3, #64	; 0x40
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b0e      	cmp	r3, #14
 8006d64:	d9f2      	bls.n	8006d4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11c      	bne.n	8006da6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d7a:	f043 0302 	orr.w	r3, r3, #2
 8006d7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e005      	b.n	8006db2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dcc:	461a      	mov	r2, r3
 8006dce:	680b      	ldr	r3, [r1, #0]
 8006dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10c      	bne.n	8006df2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d104      	bne.n	8006de8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dde:	2100      	movs	r1, #0
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f959 	bl	8007098 <USB_SetDevSpeed>
 8006de6:	e018      	b.n	8006e1a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f954 	bl	8007098 <USB_SetDevSpeed>
 8006df0:	e013      	b.n	8006e1a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d10c      	bne.n	8006e12 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f949 	bl	8007098 <USB_SetDevSpeed>
 8006e06:	e008      	b.n	8006e1a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e08:	2101      	movs	r1, #1
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f944 	bl	8007098 <USB_SetDevSpeed>
 8006e10:	e003      	b.n	8006e1a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e12:	2103      	movs	r1, #3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f93f 	bl	8007098 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e1a:	2110      	movs	r1, #16
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f8f3 	bl	8007008 <USB_FlushTxFifo>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f911 	bl	8007054 <USB_FlushRxFifo>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	e043      	b.n	8006eee <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e7c:	d118      	bne.n	8006eb0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	461a      	mov	r2, r3
 8006e92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e013      	b.n	8006ec2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e008      	b.n	8006ec2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	461a      	mov	r2, r3
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ee6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3301      	adds	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d3b7      	bcc.n	8006e66 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	e043      	b.n	8006f84 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f12:	d118      	bne.n	8006f46 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	461a      	mov	r2, r3
 8006f28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e013      	b.n	8006f58 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e008      	b.n	8006f58 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	461a      	mov	r2, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	461a      	mov	r2, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3301      	adds	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3b7      	bcc.n	8006efc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f043 0210 	orr.w	r2, r3, #16
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699a      	ldr	r2, [r3, #24]
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <USB_DevInit+0x2d4>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f043 0208 	orr.w	r2, r3, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d105      	bne.n	8006ff0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <USB_DevInit+0x2d8>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ffc:	b004      	add	sp, #16
 8006ffe:	4770      	bx	lr
 8007000:	803c3800 	.word	0x803c3800
 8007004:	40000004 	.word	0x40000004

08007008 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	f043 0220 	orr.w	r2, r3, #32
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <USB_FlushTxFifo+0x48>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d901      	bls.n	8007034 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e006      	b.n	8007042 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b20      	cmp	r3, #32
 800703e:	d0f0      	beq.n	8007022 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	00030d40 	.word	0x00030d40

08007054 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2210      	movs	r2, #16
 8007064:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <USB_FlushRxFifo+0x40>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d901      	bls.n	8007078 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e006      	b.n	8007086 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b10      	cmp	r3, #16
 8007082:	d0f0      	beq.n	8007066 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	00030d40 	.word	0x00030d40

08007098 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	68f9      	ldr	r1, [r7, #12]
 80070b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b8:	4313      	orrs	r3, r2
 80070ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e4:	f043 0302 	orr.w	r3, r3, #2
 80070e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80070ea:	2003      	movs	r0, #3
 80070ec:	f7fa ff1e 	bl	8001f2c <HAL_Delay>

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4a13      	ldr	r2, [pc, #76]	; (8007160 <USB_CoreReset+0x64>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e01b      	b.n	8007152 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	daf2      	bge.n	8007108 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f043 0201 	orr.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a09      	ldr	r2, [pc, #36]	; (8007160 <USB_CoreReset+0x64>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d901      	bls.n	8007144 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e006      	b.n	8007152 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b01      	cmp	r3, #1
 800714e:	d0f0      	beq.n	8007132 <USB_CoreReset+0x36>

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	00030d40 	.word	0x00030d40

08007164 <__errno>:
 8007164:	4b01      	ldr	r3, [pc, #4]	; (800716c <__errno+0x8>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000024 	.word	0x20000024

08007170 <__libc_init_array>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4e0d      	ldr	r6, [pc, #52]	; (80071a8 <__libc_init_array+0x38>)
 8007174:	4c0d      	ldr	r4, [pc, #52]	; (80071ac <__libc_init_array+0x3c>)
 8007176:	1ba4      	subs	r4, r4, r6
 8007178:	10a4      	asrs	r4, r4, #2
 800717a:	2500      	movs	r5, #0
 800717c:	42a5      	cmp	r5, r4
 800717e:	d109      	bne.n	8007194 <__libc_init_array+0x24>
 8007180:	4e0b      	ldr	r6, [pc, #44]	; (80071b0 <__libc_init_array+0x40>)
 8007182:	4c0c      	ldr	r4, [pc, #48]	; (80071b4 <__libc_init_array+0x44>)
 8007184:	f001 f968 	bl	8008458 <_init>
 8007188:	1ba4      	subs	r4, r4, r6
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	2500      	movs	r5, #0
 800718e:	42a5      	cmp	r5, r4
 8007190:	d105      	bne.n	800719e <__libc_init_array+0x2e>
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007198:	4798      	blx	r3
 800719a:	3501      	adds	r5, #1
 800719c:	e7ee      	b.n	800717c <__libc_init_array+0xc>
 800719e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071a2:	4798      	blx	r3
 80071a4:	3501      	adds	r5, #1
 80071a6:	e7f2      	b.n	800718e <__libc_init_array+0x1e>
 80071a8:	08008688 	.word	0x08008688
 80071ac:	08008688 	.word	0x08008688
 80071b0:	08008688 	.word	0x08008688
 80071b4:	0800868c 	.word	0x0800868c

080071b8 <memset>:
 80071b8:	4402      	add	r2, r0
 80071ba:	4603      	mov	r3, r0
 80071bc:	4293      	cmp	r3, r2
 80071be:	d100      	bne.n	80071c2 <memset+0xa>
 80071c0:	4770      	bx	lr
 80071c2:	f803 1b01 	strb.w	r1, [r3], #1
 80071c6:	e7f9      	b.n	80071bc <memset+0x4>

080071c8 <siprintf>:
 80071c8:	b40e      	push	{r1, r2, r3}
 80071ca:	b500      	push	{lr}
 80071cc:	b09c      	sub	sp, #112	; 0x70
 80071ce:	ab1d      	add	r3, sp, #116	; 0x74
 80071d0:	9002      	str	r0, [sp, #8]
 80071d2:	9006      	str	r0, [sp, #24]
 80071d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071d8:	4809      	ldr	r0, [pc, #36]	; (8007200 <siprintf+0x38>)
 80071da:	9107      	str	r1, [sp, #28]
 80071dc:	9104      	str	r1, [sp, #16]
 80071de:	4909      	ldr	r1, [pc, #36]	; (8007204 <siprintf+0x3c>)
 80071e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e4:	9105      	str	r1, [sp, #20]
 80071e6:	6800      	ldr	r0, [r0, #0]
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	a902      	add	r1, sp, #8
 80071ec:	f000 f996 	bl	800751c <_svfiprintf_r>
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	b01c      	add	sp, #112	; 0x70
 80071f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071fc:	b003      	add	sp, #12
 80071fe:	4770      	bx	lr
 8007200:	20000024 	.word	0x20000024
 8007204:	ffff0208 	.word	0xffff0208

08007208 <siscanf>:
 8007208:	b40e      	push	{r1, r2, r3}
 800720a:	b530      	push	{r4, r5, lr}
 800720c:	b09c      	sub	sp, #112	; 0x70
 800720e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007210:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007214:	f854 5b04 	ldr.w	r5, [r4], #4
 8007218:	f8ad 2014 	strh.w	r2, [sp, #20]
 800721c:	9002      	str	r0, [sp, #8]
 800721e:	9006      	str	r0, [sp, #24]
 8007220:	f7f9 f800 	bl	8000224 <strlen>
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <siscanf+0x4c>)
 8007226:	9003      	str	r0, [sp, #12]
 8007228:	9007      	str	r0, [sp, #28]
 800722a:	930b      	str	r3, [sp, #44]	; 0x2c
 800722c:	480a      	ldr	r0, [pc, #40]	; (8007258 <siscanf+0x50>)
 800722e:	9401      	str	r4, [sp, #4]
 8007230:	2300      	movs	r3, #0
 8007232:	930f      	str	r3, [sp, #60]	; 0x3c
 8007234:	9314      	str	r3, [sp, #80]	; 0x50
 8007236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800723a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800723e:	462a      	mov	r2, r5
 8007240:	4623      	mov	r3, r4
 8007242:	a902      	add	r1, sp, #8
 8007244:	6800      	ldr	r0, [r0, #0]
 8007246:	f000 fabb 	bl	80077c0 <__ssvfiscanf_r>
 800724a:	b01c      	add	sp, #112	; 0x70
 800724c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007250:	b003      	add	sp, #12
 8007252:	4770      	bx	lr
 8007254:	0800725d 	.word	0x0800725d
 8007258:	20000024 	.word	0x20000024

0800725c <__seofread>:
 800725c:	2000      	movs	r0, #0
 800725e:	4770      	bx	lr

08007260 <strtok>:
 8007260:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <strtok+0x50>)
 8007262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	681d      	ldr	r5, [r3, #0]
 8007268:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800726a:	4606      	mov	r6, r0
 800726c:	460f      	mov	r7, r1
 800726e:	b9b4      	cbnz	r4, 800729e <strtok+0x3e>
 8007270:	2050      	movs	r0, #80	; 0x50
 8007272:	f000 f849 	bl	8007308 <malloc>
 8007276:	65a8      	str	r0, [r5, #88]	; 0x58
 8007278:	e9c0 4400 	strd	r4, r4, [r0]
 800727c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007280:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007284:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007288:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800728c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007290:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007294:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007298:	6184      	str	r4, [r0, #24]
 800729a:	7704      	strb	r4, [r0, #28]
 800729c:	6244      	str	r4, [r0, #36]	; 0x24
 800729e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80072a0:	4639      	mov	r1, r7
 80072a2:	4630      	mov	r0, r6
 80072a4:	2301      	movs	r3, #1
 80072a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	f000 b803 	b.w	80072b4 <__strtok_r>
 80072ae:	bf00      	nop
 80072b0:	20000024 	.word	0x20000024

080072b4 <__strtok_r>:
 80072b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b6:	b918      	cbnz	r0, 80072c0 <__strtok_r+0xc>
 80072b8:	6810      	ldr	r0, [r2, #0]
 80072ba:	b908      	cbnz	r0, 80072c0 <__strtok_r+0xc>
 80072bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072be:	4620      	mov	r0, r4
 80072c0:	4604      	mov	r4, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80072c8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80072cc:	b91e      	cbnz	r6, 80072d6 <__strtok_r+0x22>
 80072ce:	b96d      	cbnz	r5, 80072ec <__strtok_r+0x38>
 80072d0:	6015      	str	r5, [r2, #0]
 80072d2:	4628      	mov	r0, r5
 80072d4:	e7f2      	b.n	80072bc <__strtok_r+0x8>
 80072d6:	42b5      	cmp	r5, r6
 80072d8:	d1f6      	bne.n	80072c8 <__strtok_r+0x14>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ef      	bne.n	80072be <__strtok_r+0xa>
 80072de:	6014      	str	r4, [r2, #0]
 80072e0:	7003      	strb	r3, [r0, #0]
 80072e2:	e7eb      	b.n	80072bc <__strtok_r+0x8>
 80072e4:	462b      	mov	r3, r5
 80072e6:	e00d      	b.n	8007304 <__strtok_r+0x50>
 80072e8:	b926      	cbnz	r6, 80072f4 <__strtok_r+0x40>
 80072ea:	461c      	mov	r4, r3
 80072ec:	4623      	mov	r3, r4
 80072ee:	460f      	mov	r7, r1
 80072f0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80072f4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80072f8:	42b5      	cmp	r5, r6
 80072fa:	d1f5      	bne.n	80072e8 <__strtok_r+0x34>
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	d0f1      	beq.n	80072e4 <__strtok_r+0x30>
 8007300:	2100      	movs	r1, #0
 8007302:	7021      	strb	r1, [r4, #0]
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e7d9      	b.n	80072bc <__strtok_r+0x8>

08007308 <malloc>:
 8007308:	4b02      	ldr	r3, [pc, #8]	; (8007314 <malloc+0xc>)
 800730a:	4601      	mov	r1, r0
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	f000 b851 	b.w	80073b4 <_malloc_r>
 8007312:	bf00      	nop
 8007314:	20000024 	.word	0x20000024

08007318 <_free_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4605      	mov	r5, r0
 800731c:	2900      	cmp	r1, #0
 800731e:	d045      	beq.n	80073ac <_free_r+0x94>
 8007320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007324:	1f0c      	subs	r4, r1, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	bfb8      	it	lt
 800732a:	18e4      	addlt	r4, r4, r3
 800732c:	f001 f856 	bl	80083dc <__malloc_lock>
 8007330:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <_free_r+0x98>)
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	4610      	mov	r0, r2
 8007336:	b933      	cbnz	r3, 8007346 <_free_r+0x2e>
 8007338:	6063      	str	r3, [r4, #4]
 800733a:	6014      	str	r4, [r2, #0]
 800733c:	4628      	mov	r0, r5
 800733e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007342:	f001 b84c 	b.w	80083de <__malloc_unlock>
 8007346:	42a3      	cmp	r3, r4
 8007348:	d90c      	bls.n	8007364 <_free_r+0x4c>
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	1862      	adds	r2, r4, r1
 800734e:	4293      	cmp	r3, r2
 8007350:	bf04      	itt	eq
 8007352:	681a      	ldreq	r2, [r3, #0]
 8007354:	685b      	ldreq	r3, [r3, #4]
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	bf04      	itt	eq
 800735a:	1852      	addeq	r2, r2, r1
 800735c:	6022      	streq	r2, [r4, #0]
 800735e:	6004      	str	r4, [r0, #0]
 8007360:	e7ec      	b.n	800733c <_free_r+0x24>
 8007362:	4613      	mov	r3, r2
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	b10a      	cbz	r2, 800736c <_free_r+0x54>
 8007368:	42a2      	cmp	r2, r4
 800736a:	d9fa      	bls.n	8007362 <_free_r+0x4a>
 800736c:	6819      	ldr	r1, [r3, #0]
 800736e:	1858      	adds	r0, r3, r1
 8007370:	42a0      	cmp	r0, r4
 8007372:	d10b      	bne.n	800738c <_free_r+0x74>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	4401      	add	r1, r0
 8007378:	1858      	adds	r0, r3, r1
 800737a:	4282      	cmp	r2, r0
 800737c:	6019      	str	r1, [r3, #0]
 800737e:	d1dd      	bne.n	800733c <_free_r+0x24>
 8007380:	6810      	ldr	r0, [r2, #0]
 8007382:	6852      	ldr	r2, [r2, #4]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	4401      	add	r1, r0
 8007388:	6019      	str	r1, [r3, #0]
 800738a:	e7d7      	b.n	800733c <_free_r+0x24>
 800738c:	d902      	bls.n	8007394 <_free_r+0x7c>
 800738e:	230c      	movs	r3, #12
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	e7d3      	b.n	800733c <_free_r+0x24>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	1821      	adds	r1, r4, r0
 8007398:	428a      	cmp	r2, r1
 800739a:	bf04      	itt	eq
 800739c:	6811      	ldreq	r1, [r2, #0]
 800739e:	6852      	ldreq	r2, [r2, #4]
 80073a0:	6062      	str	r2, [r4, #4]
 80073a2:	bf04      	itt	eq
 80073a4:	1809      	addeq	r1, r1, r0
 80073a6:	6021      	streq	r1, [r4, #0]
 80073a8:	605c      	str	r4, [r3, #4]
 80073aa:	e7c7      	b.n	800733c <_free_r+0x24>
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	bf00      	nop
 80073b0:	20000224 	.word	0x20000224

080073b4 <_malloc_r>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	1ccd      	adds	r5, r1, #3
 80073b8:	f025 0503 	bic.w	r5, r5, #3
 80073bc:	3508      	adds	r5, #8
 80073be:	2d0c      	cmp	r5, #12
 80073c0:	bf38      	it	cc
 80073c2:	250c      	movcc	r5, #12
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	4606      	mov	r6, r0
 80073c8:	db01      	blt.n	80073ce <_malloc_r+0x1a>
 80073ca:	42a9      	cmp	r1, r5
 80073cc:	d903      	bls.n	80073d6 <_malloc_r+0x22>
 80073ce:	230c      	movs	r3, #12
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	2000      	movs	r0, #0
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	f001 f801 	bl	80083dc <__malloc_lock>
 80073da:	4a21      	ldr	r2, [pc, #132]	; (8007460 <_malloc_r+0xac>)
 80073dc:	6814      	ldr	r4, [r2, #0]
 80073de:	4621      	mov	r1, r4
 80073e0:	b991      	cbnz	r1, 8007408 <_malloc_r+0x54>
 80073e2:	4c20      	ldr	r4, [pc, #128]	; (8007464 <_malloc_r+0xb0>)
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	b91b      	cbnz	r3, 80073f0 <_malloc_r+0x3c>
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 fe19 	bl	8008020 <_sbrk_r>
 80073ee:	6020      	str	r0, [r4, #0]
 80073f0:	4629      	mov	r1, r5
 80073f2:	4630      	mov	r0, r6
 80073f4:	f000 fe14 	bl	8008020 <_sbrk_r>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d124      	bne.n	8007446 <_malloc_r+0x92>
 80073fc:	230c      	movs	r3, #12
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	4630      	mov	r0, r6
 8007402:	f000 ffec 	bl	80083de <__malloc_unlock>
 8007406:	e7e4      	b.n	80073d2 <_malloc_r+0x1e>
 8007408:	680b      	ldr	r3, [r1, #0]
 800740a:	1b5b      	subs	r3, r3, r5
 800740c:	d418      	bmi.n	8007440 <_malloc_r+0x8c>
 800740e:	2b0b      	cmp	r3, #11
 8007410:	d90f      	bls.n	8007432 <_malloc_r+0x7e>
 8007412:	600b      	str	r3, [r1, #0]
 8007414:	50cd      	str	r5, [r1, r3]
 8007416:	18cc      	adds	r4, r1, r3
 8007418:	4630      	mov	r0, r6
 800741a:	f000 ffe0 	bl	80083de <__malloc_unlock>
 800741e:	f104 000b 	add.w	r0, r4, #11
 8007422:	1d23      	adds	r3, r4, #4
 8007424:	f020 0007 	bic.w	r0, r0, #7
 8007428:	1ac3      	subs	r3, r0, r3
 800742a:	d0d3      	beq.n	80073d4 <_malloc_r+0x20>
 800742c:	425a      	negs	r2, r3
 800742e:	50e2      	str	r2, [r4, r3]
 8007430:	e7d0      	b.n	80073d4 <_malloc_r+0x20>
 8007432:	428c      	cmp	r4, r1
 8007434:	684b      	ldr	r3, [r1, #4]
 8007436:	bf16      	itet	ne
 8007438:	6063      	strne	r3, [r4, #4]
 800743a:	6013      	streq	r3, [r2, #0]
 800743c:	460c      	movne	r4, r1
 800743e:	e7eb      	b.n	8007418 <_malloc_r+0x64>
 8007440:	460c      	mov	r4, r1
 8007442:	6849      	ldr	r1, [r1, #4]
 8007444:	e7cc      	b.n	80073e0 <_malloc_r+0x2c>
 8007446:	1cc4      	adds	r4, r0, #3
 8007448:	f024 0403 	bic.w	r4, r4, #3
 800744c:	42a0      	cmp	r0, r4
 800744e:	d005      	beq.n	800745c <_malloc_r+0xa8>
 8007450:	1a21      	subs	r1, r4, r0
 8007452:	4630      	mov	r0, r6
 8007454:	f000 fde4 	bl	8008020 <_sbrk_r>
 8007458:	3001      	adds	r0, #1
 800745a:	d0cf      	beq.n	80073fc <_malloc_r+0x48>
 800745c:	6025      	str	r5, [r4, #0]
 800745e:	e7db      	b.n	8007418 <_malloc_r+0x64>
 8007460:	20000224 	.word	0x20000224
 8007464:	20000228 	.word	0x20000228

08007468 <__ssputs_r>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	688e      	ldr	r6, [r1, #8]
 800746e:	429e      	cmp	r6, r3
 8007470:	4682      	mov	sl, r0
 8007472:	460c      	mov	r4, r1
 8007474:	4690      	mov	r8, r2
 8007476:	4699      	mov	r9, r3
 8007478:	d837      	bhi.n	80074ea <__ssputs_r+0x82>
 800747a:	898a      	ldrh	r2, [r1, #12]
 800747c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007480:	d031      	beq.n	80074e6 <__ssputs_r+0x7e>
 8007482:	6825      	ldr	r5, [r4, #0]
 8007484:	6909      	ldr	r1, [r1, #16]
 8007486:	1a6f      	subs	r7, r5, r1
 8007488:	6965      	ldr	r5, [r4, #20]
 800748a:	2302      	movs	r3, #2
 800748c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007490:	fb95 f5f3 	sdiv	r5, r5, r3
 8007494:	f109 0301 	add.w	r3, r9, #1
 8007498:	443b      	add	r3, r7
 800749a:	429d      	cmp	r5, r3
 800749c:	bf38      	it	cc
 800749e:	461d      	movcc	r5, r3
 80074a0:	0553      	lsls	r3, r2, #21
 80074a2:	d530      	bpl.n	8007506 <__ssputs_r+0x9e>
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7ff ff85 	bl	80073b4 <_malloc_r>
 80074aa:	4606      	mov	r6, r0
 80074ac:	b950      	cbnz	r0, 80074c4 <__ssputs_r+0x5c>
 80074ae:	230c      	movs	r3, #12
 80074b0:	f8ca 3000 	str.w	r3, [sl]
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	463a      	mov	r2, r7
 80074c6:	6921      	ldr	r1, [r4, #16]
 80074c8:	f000 ff64 	bl	8008394 <memcpy>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	6126      	str	r6, [r4, #16]
 80074da:	6165      	str	r5, [r4, #20]
 80074dc:	443e      	add	r6, r7
 80074de:	1bed      	subs	r5, r5, r7
 80074e0:	6026      	str	r6, [r4, #0]
 80074e2:	60a5      	str	r5, [r4, #8]
 80074e4:	464e      	mov	r6, r9
 80074e6:	454e      	cmp	r6, r9
 80074e8:	d900      	bls.n	80074ec <__ssputs_r+0x84>
 80074ea:	464e      	mov	r6, r9
 80074ec:	4632      	mov	r2, r6
 80074ee:	4641      	mov	r1, r8
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	f000 ff5a 	bl	80083aa <memmove>
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	1b9b      	subs	r3, r3, r6
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	441e      	add	r6, r3
 8007500:	6026      	str	r6, [r4, #0]
 8007502:	2000      	movs	r0, #0
 8007504:	e7dc      	b.n	80074c0 <__ssputs_r+0x58>
 8007506:	462a      	mov	r2, r5
 8007508:	f000 ff6a 	bl	80083e0 <_realloc_r>
 800750c:	4606      	mov	r6, r0
 800750e:	2800      	cmp	r0, #0
 8007510:	d1e2      	bne.n	80074d8 <__ssputs_r+0x70>
 8007512:	6921      	ldr	r1, [r4, #16]
 8007514:	4650      	mov	r0, sl
 8007516:	f7ff feff 	bl	8007318 <_free_r>
 800751a:	e7c8      	b.n	80074ae <__ssputs_r+0x46>

0800751c <_svfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	461d      	mov	r5, r3
 8007522:	898b      	ldrh	r3, [r1, #12]
 8007524:	061f      	lsls	r7, r3, #24
 8007526:	b09d      	sub	sp, #116	; 0x74
 8007528:	4680      	mov	r8, r0
 800752a:	460c      	mov	r4, r1
 800752c:	4616      	mov	r6, r2
 800752e:	d50f      	bpl.n	8007550 <_svfiprintf_r+0x34>
 8007530:	690b      	ldr	r3, [r1, #16]
 8007532:	b96b      	cbnz	r3, 8007550 <_svfiprintf_r+0x34>
 8007534:	2140      	movs	r1, #64	; 0x40
 8007536:	f7ff ff3d 	bl	80073b4 <_malloc_r>
 800753a:	6020      	str	r0, [r4, #0]
 800753c:	6120      	str	r0, [r4, #16]
 800753e:	b928      	cbnz	r0, 800754c <_svfiprintf_r+0x30>
 8007540:	230c      	movs	r3, #12
 8007542:	f8c8 3000 	str.w	r3, [r8]
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	e0c8      	b.n	80076de <_svfiprintf_r+0x1c2>
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	6163      	str	r3, [r4, #20]
 8007550:	2300      	movs	r3, #0
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	2320      	movs	r3, #32
 8007556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800755a:	2330      	movs	r3, #48	; 0x30
 800755c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007560:	9503      	str	r5, [sp, #12]
 8007562:	f04f 0b01 	mov.w	fp, #1
 8007566:	4637      	mov	r7, r6
 8007568:	463d      	mov	r5, r7
 800756a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800756e:	b10b      	cbz	r3, 8007574 <_svfiprintf_r+0x58>
 8007570:	2b25      	cmp	r3, #37	; 0x25
 8007572:	d13e      	bne.n	80075f2 <_svfiprintf_r+0xd6>
 8007574:	ebb7 0a06 	subs.w	sl, r7, r6
 8007578:	d00b      	beq.n	8007592 <_svfiprintf_r+0x76>
 800757a:	4653      	mov	r3, sl
 800757c:	4632      	mov	r2, r6
 800757e:	4621      	mov	r1, r4
 8007580:	4640      	mov	r0, r8
 8007582:	f7ff ff71 	bl	8007468 <__ssputs_r>
 8007586:	3001      	adds	r0, #1
 8007588:	f000 80a4 	beq.w	80076d4 <_svfiprintf_r+0x1b8>
 800758c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758e:	4453      	add	r3, sl
 8007590:	9309      	str	r3, [sp, #36]	; 0x24
 8007592:	783b      	ldrb	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 809d 	beq.w	80076d4 <_svfiprintf_r+0x1b8>
 800759a:	2300      	movs	r3, #0
 800759c:	f04f 32ff 	mov.w	r2, #4294967295
 80075a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	9307      	str	r3, [sp, #28]
 80075a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075ac:	931a      	str	r3, [sp, #104]	; 0x68
 80075ae:	462f      	mov	r7, r5
 80075b0:	2205      	movs	r2, #5
 80075b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075b6:	4850      	ldr	r0, [pc, #320]	; (80076f8 <_svfiprintf_r+0x1dc>)
 80075b8:	f7f8 fe42 	bl	8000240 <memchr>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	b9d0      	cbnz	r0, 80075f6 <_svfiprintf_r+0xda>
 80075c0:	06d9      	lsls	r1, r3, #27
 80075c2:	bf44      	itt	mi
 80075c4:	2220      	movmi	r2, #32
 80075c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075ca:	071a      	lsls	r2, r3, #28
 80075cc:	bf44      	itt	mi
 80075ce:	222b      	movmi	r2, #43	; 0x2b
 80075d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075d4:	782a      	ldrb	r2, [r5, #0]
 80075d6:	2a2a      	cmp	r2, #42	; 0x2a
 80075d8:	d015      	beq.n	8007606 <_svfiprintf_r+0xea>
 80075da:	9a07      	ldr	r2, [sp, #28]
 80075dc:	462f      	mov	r7, r5
 80075de:	2000      	movs	r0, #0
 80075e0:	250a      	movs	r5, #10
 80075e2:	4639      	mov	r1, r7
 80075e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e8:	3b30      	subs	r3, #48	; 0x30
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	d94d      	bls.n	800768a <_svfiprintf_r+0x16e>
 80075ee:	b1b8      	cbz	r0, 8007620 <_svfiprintf_r+0x104>
 80075f0:	e00f      	b.n	8007612 <_svfiprintf_r+0xf6>
 80075f2:	462f      	mov	r7, r5
 80075f4:	e7b8      	b.n	8007568 <_svfiprintf_r+0x4c>
 80075f6:	4a40      	ldr	r2, [pc, #256]	; (80076f8 <_svfiprintf_r+0x1dc>)
 80075f8:	1a80      	subs	r0, r0, r2
 80075fa:	fa0b f000 	lsl.w	r0, fp, r0
 80075fe:	4318      	orrs	r0, r3
 8007600:	9004      	str	r0, [sp, #16]
 8007602:	463d      	mov	r5, r7
 8007604:	e7d3      	b.n	80075ae <_svfiprintf_r+0x92>
 8007606:	9a03      	ldr	r2, [sp, #12]
 8007608:	1d11      	adds	r1, r2, #4
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	9103      	str	r1, [sp, #12]
 800760e:	2a00      	cmp	r2, #0
 8007610:	db01      	blt.n	8007616 <_svfiprintf_r+0xfa>
 8007612:	9207      	str	r2, [sp, #28]
 8007614:	e004      	b.n	8007620 <_svfiprintf_r+0x104>
 8007616:	4252      	negs	r2, r2
 8007618:	f043 0302 	orr.w	r3, r3, #2
 800761c:	9207      	str	r2, [sp, #28]
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	783b      	ldrb	r3, [r7, #0]
 8007622:	2b2e      	cmp	r3, #46	; 0x2e
 8007624:	d10c      	bne.n	8007640 <_svfiprintf_r+0x124>
 8007626:	787b      	ldrb	r3, [r7, #1]
 8007628:	2b2a      	cmp	r3, #42	; 0x2a
 800762a:	d133      	bne.n	8007694 <_svfiprintf_r+0x178>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	9203      	str	r2, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfb8      	it	lt
 8007638:	f04f 33ff 	movlt.w	r3, #4294967295
 800763c:	3702      	adds	r7, #2
 800763e:	9305      	str	r3, [sp, #20]
 8007640:	4d2e      	ldr	r5, [pc, #184]	; (80076fc <_svfiprintf_r+0x1e0>)
 8007642:	7839      	ldrb	r1, [r7, #0]
 8007644:	2203      	movs	r2, #3
 8007646:	4628      	mov	r0, r5
 8007648:	f7f8 fdfa 	bl	8000240 <memchr>
 800764c:	b138      	cbz	r0, 800765e <_svfiprintf_r+0x142>
 800764e:	2340      	movs	r3, #64	; 0x40
 8007650:	1b40      	subs	r0, r0, r5
 8007652:	fa03 f000 	lsl.w	r0, r3, r0
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	4303      	orrs	r3, r0
 800765a:	3701      	adds	r7, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	7839      	ldrb	r1, [r7, #0]
 8007660:	4827      	ldr	r0, [pc, #156]	; (8007700 <_svfiprintf_r+0x1e4>)
 8007662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007666:	2206      	movs	r2, #6
 8007668:	1c7e      	adds	r6, r7, #1
 800766a:	f7f8 fde9 	bl	8000240 <memchr>
 800766e:	2800      	cmp	r0, #0
 8007670:	d038      	beq.n	80076e4 <_svfiprintf_r+0x1c8>
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <_svfiprintf_r+0x1e8>)
 8007674:	bb13      	cbnz	r3, 80076bc <_svfiprintf_r+0x1a0>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	3307      	adds	r3, #7
 800767a:	f023 0307 	bic.w	r3, r3, #7
 800767e:	3308      	adds	r3, #8
 8007680:	9303      	str	r3, [sp, #12]
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	444b      	add	r3, r9
 8007686:	9309      	str	r3, [sp, #36]	; 0x24
 8007688:	e76d      	b.n	8007566 <_svfiprintf_r+0x4a>
 800768a:	fb05 3202 	mla	r2, r5, r2, r3
 800768e:	2001      	movs	r0, #1
 8007690:	460f      	mov	r7, r1
 8007692:	e7a6      	b.n	80075e2 <_svfiprintf_r+0xc6>
 8007694:	2300      	movs	r3, #0
 8007696:	3701      	adds	r7, #1
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	4619      	mov	r1, r3
 800769c:	250a      	movs	r5, #10
 800769e:	4638      	mov	r0, r7
 80076a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a4:	3a30      	subs	r2, #48	; 0x30
 80076a6:	2a09      	cmp	r2, #9
 80076a8:	d903      	bls.n	80076b2 <_svfiprintf_r+0x196>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0c8      	beq.n	8007640 <_svfiprintf_r+0x124>
 80076ae:	9105      	str	r1, [sp, #20]
 80076b0:	e7c6      	b.n	8007640 <_svfiprintf_r+0x124>
 80076b2:	fb05 2101 	mla	r1, r5, r1, r2
 80076b6:	2301      	movs	r3, #1
 80076b8:	4607      	mov	r7, r0
 80076ba:	e7f0      	b.n	800769e <_svfiprintf_r+0x182>
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	4622      	mov	r2, r4
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <_svfiprintf_r+0x1ec>)
 80076c4:	a904      	add	r1, sp, #16
 80076c6:	4640      	mov	r0, r8
 80076c8:	f3af 8000 	nop.w
 80076cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076d0:	4681      	mov	r9, r0
 80076d2:	d1d6      	bne.n	8007682 <_svfiprintf_r+0x166>
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	065b      	lsls	r3, r3, #25
 80076d8:	f53f af35 	bmi.w	8007546 <_svfiprintf_r+0x2a>
 80076dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076de:	b01d      	add	sp, #116	; 0x74
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	ab03      	add	r3, sp, #12
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4622      	mov	r2, r4
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <_svfiprintf_r+0x1ec>)
 80076ec:	a904      	add	r1, sp, #16
 80076ee:	4640      	mov	r0, r8
 80076f0:	f000 fa2c 	bl	8007b4c <_printf_i>
 80076f4:	e7ea      	b.n	80076cc <_svfiprintf_r+0x1b0>
 80076f6:	bf00      	nop
 80076f8:	080084c4 	.word	0x080084c4
 80076fc:	080084ca 	.word	0x080084ca
 8007700:	080084ce 	.word	0x080084ce
 8007704:	00000000 	.word	0x00000000
 8007708:	08007469 	.word	0x08007469

0800770c <_sungetc_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	1c4b      	adds	r3, r1, #1
 8007710:	4614      	mov	r4, r2
 8007712:	d103      	bne.n	800771c <_sungetc_r+0x10>
 8007714:	f04f 35ff 	mov.w	r5, #4294967295
 8007718:	4628      	mov	r0, r5
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	8993      	ldrh	r3, [r2, #12]
 800771e:	f023 0320 	bic.w	r3, r3, #32
 8007722:	8193      	strh	r3, [r2, #12]
 8007724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	b2cd      	uxtb	r5, r1
 800772a:	b18b      	cbz	r3, 8007750 <_sungetc_r+0x44>
 800772c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800772e:	4293      	cmp	r3, r2
 8007730:	dd08      	ble.n	8007744 <_sungetc_r+0x38>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	1e5a      	subs	r2, r3, #1
 8007736:	6022      	str	r2, [r4, #0]
 8007738:	f803 5c01 	strb.w	r5, [r3, #-1]
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	3301      	adds	r3, #1
 8007740:	6063      	str	r3, [r4, #4]
 8007742:	e7e9      	b.n	8007718 <_sungetc_r+0xc>
 8007744:	4621      	mov	r1, r4
 8007746:	f000 fdc7 	bl	80082d8 <__submore>
 800774a:	2800      	cmp	r0, #0
 800774c:	d0f1      	beq.n	8007732 <_sungetc_r+0x26>
 800774e:	e7e1      	b.n	8007714 <_sungetc_r+0x8>
 8007750:	6921      	ldr	r1, [r4, #16]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	b151      	cbz	r1, 800776c <_sungetc_r+0x60>
 8007756:	4299      	cmp	r1, r3
 8007758:	d208      	bcs.n	800776c <_sungetc_r+0x60>
 800775a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800775e:	42a9      	cmp	r1, r5
 8007760:	d104      	bne.n	800776c <_sungetc_r+0x60>
 8007762:	3b01      	subs	r3, #1
 8007764:	3201      	adds	r2, #1
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	6062      	str	r2, [r4, #4]
 800776a:	e7d5      	b.n	8007718 <_sungetc_r+0xc>
 800776c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007774:	6363      	str	r3, [r4, #52]	; 0x34
 8007776:	2303      	movs	r3, #3
 8007778:	63a3      	str	r3, [r4, #56]	; 0x38
 800777a:	4623      	mov	r3, r4
 800777c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	2301      	movs	r3, #1
 8007784:	e7dc      	b.n	8007740 <_sungetc_r+0x34>

08007786 <__ssrefill_r>:
 8007786:	b510      	push	{r4, lr}
 8007788:	460c      	mov	r4, r1
 800778a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800778c:	b169      	cbz	r1, 80077aa <__ssrefill_r+0x24>
 800778e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007792:	4299      	cmp	r1, r3
 8007794:	d001      	beq.n	800779a <__ssrefill_r+0x14>
 8007796:	f7ff fdbf 	bl	8007318 <_free_r>
 800779a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800779c:	6063      	str	r3, [r4, #4]
 800779e:	2000      	movs	r0, #0
 80077a0:	6360      	str	r0, [r4, #52]	; 0x34
 80077a2:	b113      	cbz	r3, 80077aa <__ssrefill_r+0x24>
 80077a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	f043 0320 	orr.w	r3, r3, #32
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	f04f 30ff 	mov.w	r0, #4294967295
 80077be:	e7f3      	b.n	80077a8 <__ssrefill_r+0x22>

080077c0 <__ssvfiscanf_r>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80077c8:	460c      	mov	r4, r1
 80077ca:	2100      	movs	r1, #0
 80077cc:	9144      	str	r1, [sp, #272]	; 0x110
 80077ce:	9145      	str	r1, [sp, #276]	; 0x114
 80077d0:	499f      	ldr	r1, [pc, #636]	; (8007a50 <__ssvfiscanf_r+0x290>)
 80077d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80077d4:	f10d 0804 	add.w	r8, sp, #4
 80077d8:	499e      	ldr	r1, [pc, #632]	; (8007a54 <__ssvfiscanf_r+0x294>)
 80077da:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8007a58 <__ssvfiscanf_r+0x298>
 80077de:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80077e2:	4606      	mov	r6, r0
 80077e4:	4692      	mov	sl, r2
 80077e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	270a      	movs	r7, #10
 80077ec:	f89a 3000 	ldrb.w	r3, [sl]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 812a 	beq.w	8007a4a <__ssvfiscanf_r+0x28a>
 80077f6:	4655      	mov	r5, sl
 80077f8:	f000 fdac 	bl	8008354 <__locale_ctype_ptr>
 80077fc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007800:	4458      	add	r0, fp
 8007802:	7843      	ldrb	r3, [r0, #1]
 8007804:	f013 0308 	ands.w	r3, r3, #8
 8007808:	d01c      	beq.n	8007844 <__ssvfiscanf_r+0x84>
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd12      	ble.n	8007836 <__ssvfiscanf_r+0x76>
 8007810:	f000 fda0 	bl	8008354 <__locale_ctype_ptr>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	4410      	add	r0, r2
 800781a:	7842      	ldrb	r2, [r0, #1]
 800781c:	0712      	lsls	r2, r2, #28
 800781e:	d401      	bmi.n	8007824 <__ssvfiscanf_r+0x64>
 8007820:	46aa      	mov	sl, r5
 8007822:	e7e3      	b.n	80077ec <__ssvfiscanf_r+0x2c>
 8007824:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007826:	3201      	adds	r2, #1
 8007828:	9245      	str	r2, [sp, #276]	; 0x114
 800782a:	6862      	ldr	r2, [r4, #4]
 800782c:	3301      	adds	r3, #1
 800782e:	3a01      	subs	r2, #1
 8007830:	6062      	str	r2, [r4, #4]
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	e7e9      	b.n	800780a <__ssvfiscanf_r+0x4a>
 8007836:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007838:	4621      	mov	r1, r4
 800783a:	4630      	mov	r0, r6
 800783c:	4798      	blx	r3
 800783e:	2800      	cmp	r0, #0
 8007840:	d0e6      	beq.n	8007810 <__ssvfiscanf_r+0x50>
 8007842:	e7ed      	b.n	8007820 <__ssvfiscanf_r+0x60>
 8007844:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007848:	f040 8082 	bne.w	8007950 <__ssvfiscanf_r+0x190>
 800784c:	9343      	str	r3, [sp, #268]	; 0x10c
 800784e:	9341      	str	r3, [sp, #260]	; 0x104
 8007850:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007854:	2b2a      	cmp	r3, #42	; 0x2a
 8007856:	d103      	bne.n	8007860 <__ssvfiscanf_r+0xa0>
 8007858:	2310      	movs	r3, #16
 800785a:	9341      	str	r3, [sp, #260]	; 0x104
 800785c:	f10a 0502 	add.w	r5, sl, #2
 8007860:	46aa      	mov	sl, r5
 8007862:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007866:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800786a:	2a09      	cmp	r2, #9
 800786c:	d922      	bls.n	80078b4 <__ssvfiscanf_r+0xf4>
 800786e:	2203      	movs	r2, #3
 8007870:	4879      	ldr	r0, [pc, #484]	; (8007a58 <__ssvfiscanf_r+0x298>)
 8007872:	f7f8 fce5 	bl	8000240 <memchr>
 8007876:	b138      	cbz	r0, 8007888 <__ssvfiscanf_r+0xc8>
 8007878:	eba0 0309 	sub.w	r3, r0, r9
 800787c:	2001      	movs	r0, #1
 800787e:	4098      	lsls	r0, r3
 8007880:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007882:	4318      	orrs	r0, r3
 8007884:	9041      	str	r0, [sp, #260]	; 0x104
 8007886:	46aa      	mov	sl, r5
 8007888:	f89a 3000 	ldrb.w	r3, [sl]
 800788c:	2b67      	cmp	r3, #103	; 0x67
 800788e:	f10a 0501 	add.w	r5, sl, #1
 8007892:	d82b      	bhi.n	80078ec <__ssvfiscanf_r+0x12c>
 8007894:	2b65      	cmp	r3, #101	; 0x65
 8007896:	f080 809f 	bcs.w	80079d8 <__ssvfiscanf_r+0x218>
 800789a:	2b47      	cmp	r3, #71	; 0x47
 800789c:	d810      	bhi.n	80078c0 <__ssvfiscanf_r+0x100>
 800789e:	2b45      	cmp	r3, #69	; 0x45
 80078a0:	f080 809a 	bcs.w	80079d8 <__ssvfiscanf_r+0x218>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d06c      	beq.n	8007982 <__ssvfiscanf_r+0x1c2>
 80078a8:	2b25      	cmp	r3, #37	; 0x25
 80078aa:	d051      	beq.n	8007950 <__ssvfiscanf_r+0x190>
 80078ac:	2303      	movs	r3, #3
 80078ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80078b0:	9742      	str	r7, [sp, #264]	; 0x108
 80078b2:	e027      	b.n	8007904 <__ssvfiscanf_r+0x144>
 80078b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80078b6:	fb07 1303 	mla	r3, r7, r3, r1
 80078ba:	3b30      	subs	r3, #48	; 0x30
 80078bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80078be:	e7cf      	b.n	8007860 <__ssvfiscanf_r+0xa0>
 80078c0:	2b5b      	cmp	r3, #91	; 0x5b
 80078c2:	d06a      	beq.n	800799a <__ssvfiscanf_r+0x1da>
 80078c4:	d80c      	bhi.n	80078e0 <__ssvfiscanf_r+0x120>
 80078c6:	2b58      	cmp	r3, #88	; 0x58
 80078c8:	d1f0      	bne.n	80078ac <__ssvfiscanf_r+0xec>
 80078ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80078cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d0:	9241      	str	r2, [sp, #260]	; 0x104
 80078d2:	2210      	movs	r2, #16
 80078d4:	9242      	str	r2, [sp, #264]	; 0x108
 80078d6:	2b6e      	cmp	r3, #110	; 0x6e
 80078d8:	bf8c      	ite	hi
 80078da:	2304      	movhi	r3, #4
 80078dc:	2303      	movls	r3, #3
 80078de:	e010      	b.n	8007902 <__ssvfiscanf_r+0x142>
 80078e0:	2b63      	cmp	r3, #99	; 0x63
 80078e2:	d065      	beq.n	80079b0 <__ssvfiscanf_r+0x1f0>
 80078e4:	2b64      	cmp	r3, #100	; 0x64
 80078e6:	d1e1      	bne.n	80078ac <__ssvfiscanf_r+0xec>
 80078e8:	9742      	str	r7, [sp, #264]	; 0x108
 80078ea:	e7f4      	b.n	80078d6 <__ssvfiscanf_r+0x116>
 80078ec:	2b70      	cmp	r3, #112	; 0x70
 80078ee:	d04b      	beq.n	8007988 <__ssvfiscanf_r+0x1c8>
 80078f0:	d826      	bhi.n	8007940 <__ssvfiscanf_r+0x180>
 80078f2:	2b6e      	cmp	r3, #110	; 0x6e
 80078f4:	d062      	beq.n	80079bc <__ssvfiscanf_r+0x1fc>
 80078f6:	d84c      	bhi.n	8007992 <__ssvfiscanf_r+0x1d2>
 80078f8:	2b69      	cmp	r3, #105	; 0x69
 80078fa:	d1d7      	bne.n	80078ac <__ssvfiscanf_r+0xec>
 80078fc:	2300      	movs	r3, #0
 80078fe:	9342      	str	r3, [sp, #264]	; 0x108
 8007900:	2303      	movs	r3, #3
 8007902:	9347      	str	r3, [sp, #284]	; 0x11c
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	dd68      	ble.n	80079dc <__ssvfiscanf_r+0x21c>
 800790a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800790c:	0659      	lsls	r1, r3, #25
 800790e:	d407      	bmi.n	8007920 <__ssvfiscanf_r+0x160>
 8007910:	f000 fd20 	bl	8008354 <__locale_ctype_ptr>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	4410      	add	r0, r2
 800791a:	7842      	ldrb	r2, [r0, #1]
 800791c:	0712      	lsls	r2, r2, #28
 800791e:	d464      	bmi.n	80079ea <__ssvfiscanf_r+0x22a>
 8007920:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007922:	2b02      	cmp	r3, #2
 8007924:	dc73      	bgt.n	8007a0e <__ssvfiscanf_r+0x24e>
 8007926:	466b      	mov	r3, sp
 8007928:	4622      	mov	r2, r4
 800792a:	a941      	add	r1, sp, #260	; 0x104
 800792c:	4630      	mov	r0, r6
 800792e:	f000 fa1f 	bl	8007d70 <_scanf_chars>
 8007932:	2801      	cmp	r0, #1
 8007934:	f000 8089 	beq.w	8007a4a <__ssvfiscanf_r+0x28a>
 8007938:	2802      	cmp	r0, #2
 800793a:	f47f af71 	bne.w	8007820 <__ssvfiscanf_r+0x60>
 800793e:	e01d      	b.n	800797c <__ssvfiscanf_r+0x1bc>
 8007940:	2b75      	cmp	r3, #117	; 0x75
 8007942:	d0d1      	beq.n	80078e8 <__ssvfiscanf_r+0x128>
 8007944:	2b78      	cmp	r3, #120	; 0x78
 8007946:	d0c0      	beq.n	80078ca <__ssvfiscanf_r+0x10a>
 8007948:	2b73      	cmp	r3, #115	; 0x73
 800794a:	d1af      	bne.n	80078ac <__ssvfiscanf_r+0xec>
 800794c:	2302      	movs	r3, #2
 800794e:	e7d8      	b.n	8007902 <__ssvfiscanf_r+0x142>
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dd0c      	ble.n	8007970 <__ssvfiscanf_r+0x1b0>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	455a      	cmp	r2, fp
 800795c:	d175      	bne.n	8007a4a <__ssvfiscanf_r+0x28a>
 800795e:	3301      	adds	r3, #1
 8007960:	6862      	ldr	r2, [r4, #4]
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007966:	3a01      	subs	r2, #1
 8007968:	3301      	adds	r3, #1
 800796a:	6062      	str	r2, [r4, #4]
 800796c:	9345      	str	r3, [sp, #276]	; 0x114
 800796e:	e757      	b.n	8007820 <__ssvfiscanf_r+0x60>
 8007970:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007972:	4621      	mov	r1, r4
 8007974:	4630      	mov	r0, r6
 8007976:	4798      	blx	r3
 8007978:	2800      	cmp	r0, #0
 800797a:	d0ec      	beq.n	8007956 <__ssvfiscanf_r+0x196>
 800797c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800797e:	2800      	cmp	r0, #0
 8007980:	d159      	bne.n	8007a36 <__ssvfiscanf_r+0x276>
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	e05c      	b.n	8007a42 <__ssvfiscanf_r+0x282>
 8007988:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800798a:	f042 0220 	orr.w	r2, r2, #32
 800798e:	9241      	str	r2, [sp, #260]	; 0x104
 8007990:	e79b      	b.n	80078ca <__ssvfiscanf_r+0x10a>
 8007992:	2308      	movs	r3, #8
 8007994:	9342      	str	r3, [sp, #264]	; 0x108
 8007996:	2304      	movs	r3, #4
 8007998:	e7b3      	b.n	8007902 <__ssvfiscanf_r+0x142>
 800799a:	4629      	mov	r1, r5
 800799c:	4640      	mov	r0, r8
 800799e:	f000 fb4f 	bl	8008040 <__sccl>
 80079a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a8:	9341      	str	r3, [sp, #260]	; 0x104
 80079aa:	4605      	mov	r5, r0
 80079ac:	2301      	movs	r3, #1
 80079ae:	e7a8      	b.n	8007902 <__ssvfiscanf_r+0x142>
 80079b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b6:	9341      	str	r3, [sp, #260]	; 0x104
 80079b8:	2300      	movs	r3, #0
 80079ba:	e7a2      	b.n	8007902 <__ssvfiscanf_r+0x142>
 80079bc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80079be:	06c3      	lsls	r3, r0, #27
 80079c0:	f53f af2e 	bmi.w	8007820 <__ssvfiscanf_r+0x60>
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079c8:	1d19      	adds	r1, r3, #4
 80079ca:	9100      	str	r1, [sp, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	07c0      	lsls	r0, r0, #31
 80079d0:	bf4c      	ite	mi
 80079d2:	801a      	strhmi	r2, [r3, #0]
 80079d4:	601a      	strpl	r2, [r3, #0]
 80079d6:	e723      	b.n	8007820 <__ssvfiscanf_r+0x60>
 80079d8:	2305      	movs	r3, #5
 80079da:	e792      	b.n	8007902 <__ssvfiscanf_r+0x142>
 80079dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079de:	4621      	mov	r1, r4
 80079e0:	4630      	mov	r0, r6
 80079e2:	4798      	blx	r3
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d090      	beq.n	800790a <__ssvfiscanf_r+0x14a>
 80079e8:	e7c8      	b.n	800797c <__ssvfiscanf_r+0x1bc>
 80079ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079ec:	3201      	adds	r2, #1
 80079ee:	9245      	str	r2, [sp, #276]	; 0x114
 80079f0:	6862      	ldr	r2, [r4, #4]
 80079f2:	3a01      	subs	r2, #1
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	6062      	str	r2, [r4, #4]
 80079f8:	dd02      	ble.n	8007a00 <__ssvfiscanf_r+0x240>
 80079fa:	3301      	adds	r3, #1
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	e787      	b.n	8007910 <__ssvfiscanf_r+0x150>
 8007a00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a02:	4621      	mov	r1, r4
 8007a04:	4630      	mov	r0, r6
 8007a06:	4798      	blx	r3
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d081      	beq.n	8007910 <__ssvfiscanf_r+0x150>
 8007a0c:	e7b6      	b.n	800797c <__ssvfiscanf_r+0x1bc>
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	dc06      	bgt.n	8007a20 <__ssvfiscanf_r+0x260>
 8007a12:	466b      	mov	r3, sp
 8007a14:	4622      	mov	r2, r4
 8007a16:	a941      	add	r1, sp, #260	; 0x104
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f000 fa0d 	bl	8007e38 <_scanf_i>
 8007a1e:	e788      	b.n	8007932 <__ssvfiscanf_r+0x172>
 8007a20:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <__ssvfiscanf_r+0x29c>)
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f43f aefc 	beq.w	8007820 <__ssvfiscanf_r+0x60>
 8007a28:	466b      	mov	r3, sp
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	a941      	add	r1, sp, #260	; 0x104
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f3af 8000 	nop.w
 8007a34:	e77d      	b.n	8007932 <__ssvfiscanf_r+0x172>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a3c:	bf18      	it	ne
 8007a3e:	f04f 30ff 	movne.w	r0, #4294967295
 8007a42:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a4c:	e7f9      	b.n	8007a42 <__ssvfiscanf_r+0x282>
 8007a4e:	bf00      	nop
 8007a50:	0800770d 	.word	0x0800770d
 8007a54:	08007787 	.word	0x08007787
 8007a58:	080084ca 	.word	0x080084ca
 8007a5c:	00000000 	.word	0x00000000

08007a60 <_printf_common>:
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	4691      	mov	r9, r2
 8007a66:	461f      	mov	r7, r3
 8007a68:	688a      	ldr	r2, [r1, #8]
 8007a6a:	690b      	ldr	r3, [r1, #16]
 8007a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bfb8      	it	lt
 8007a74:	4613      	movlt	r3, r2
 8007a76:	f8c9 3000 	str.w	r3, [r9]
 8007a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a7e:	4606      	mov	r6, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	b112      	cbz	r2, 8007a8a <_printf_common+0x2a>
 8007a84:	3301      	adds	r3, #1
 8007a86:	f8c9 3000 	str.w	r3, [r9]
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	0699      	lsls	r1, r3, #26
 8007a8e:	bf42      	ittt	mi
 8007a90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a94:	3302      	addmi	r3, #2
 8007a96:	f8c9 3000 	strmi.w	r3, [r9]
 8007a9a:	6825      	ldr	r5, [r4, #0]
 8007a9c:	f015 0506 	ands.w	r5, r5, #6
 8007aa0:	d107      	bne.n	8007ab2 <_printf_common+0x52>
 8007aa2:	f104 0a19 	add.w	sl, r4, #25
 8007aa6:	68e3      	ldr	r3, [r4, #12]
 8007aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	42ab      	cmp	r3, r5
 8007ab0:	dc28      	bgt.n	8007b04 <_printf_common+0xa4>
 8007ab2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	3300      	adds	r3, #0
 8007aba:	bf18      	it	ne
 8007abc:	2301      	movne	r3, #1
 8007abe:	0692      	lsls	r2, r2, #26
 8007ac0:	d42d      	bmi.n	8007b1e <_printf_common+0xbe>
 8007ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4630      	mov	r0, r6
 8007aca:	47c0      	blx	r8
 8007acc:	3001      	adds	r0, #1
 8007ace:	d020      	beq.n	8007b12 <_printf_common+0xb2>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	68e5      	ldr	r5, [r4, #12]
 8007ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ad8:	f003 0306 	and.w	r3, r3, #6
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	bf08      	it	eq
 8007ae0:	1aad      	subeq	r5, r5, r2
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	6922      	ldr	r2, [r4, #16]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aec:	2500      	movne	r5, #0
 8007aee:	4293      	cmp	r3, r2
 8007af0:	bfc4      	itt	gt
 8007af2:	1a9b      	subgt	r3, r3, r2
 8007af4:	18ed      	addgt	r5, r5, r3
 8007af6:	f04f 0900 	mov.w	r9, #0
 8007afa:	341a      	adds	r4, #26
 8007afc:	454d      	cmp	r5, r9
 8007afe:	d11a      	bne.n	8007b36 <_printf_common+0xd6>
 8007b00:	2000      	movs	r0, #0
 8007b02:	e008      	b.n	8007b16 <_printf_common+0xb6>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4652      	mov	r2, sl
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	47c0      	blx	r8
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d103      	bne.n	8007b1a <_printf_common+0xba>
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	e7c3      	b.n	8007aa6 <_printf_common+0x46>
 8007b1e:	18e1      	adds	r1, r4, r3
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	2030      	movs	r0, #48	; 0x30
 8007b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b28:	4422      	add	r2, r4
 8007b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b32:	3302      	adds	r3, #2
 8007b34:	e7c5      	b.n	8007ac2 <_printf_common+0x62>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	47c0      	blx	r8
 8007b40:	3001      	adds	r0, #1
 8007b42:	d0e6      	beq.n	8007b12 <_printf_common+0xb2>
 8007b44:	f109 0901 	add.w	r9, r9, #1
 8007b48:	e7d8      	b.n	8007afc <_printf_common+0x9c>
	...

08007b4c <_printf_i>:
 8007b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b54:	460c      	mov	r4, r1
 8007b56:	7e09      	ldrb	r1, [r1, #24]
 8007b58:	b085      	sub	sp, #20
 8007b5a:	296e      	cmp	r1, #110	; 0x6e
 8007b5c:	4617      	mov	r7, r2
 8007b5e:	4606      	mov	r6, r0
 8007b60:	4698      	mov	r8, r3
 8007b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b64:	f000 80b3 	beq.w	8007cce <_printf_i+0x182>
 8007b68:	d822      	bhi.n	8007bb0 <_printf_i+0x64>
 8007b6a:	2963      	cmp	r1, #99	; 0x63
 8007b6c:	d036      	beq.n	8007bdc <_printf_i+0x90>
 8007b6e:	d80a      	bhi.n	8007b86 <_printf_i+0x3a>
 8007b70:	2900      	cmp	r1, #0
 8007b72:	f000 80b9 	beq.w	8007ce8 <_printf_i+0x19c>
 8007b76:	2958      	cmp	r1, #88	; 0x58
 8007b78:	f000 8083 	beq.w	8007c82 <_printf_i+0x136>
 8007b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b84:	e032      	b.n	8007bec <_printf_i+0xa0>
 8007b86:	2964      	cmp	r1, #100	; 0x64
 8007b88:	d001      	beq.n	8007b8e <_printf_i+0x42>
 8007b8a:	2969      	cmp	r1, #105	; 0x69
 8007b8c:	d1f6      	bne.n	8007b7c <_printf_i+0x30>
 8007b8e:	6820      	ldr	r0, [r4, #0]
 8007b90:	6813      	ldr	r3, [r2, #0]
 8007b92:	0605      	lsls	r5, r0, #24
 8007b94:	f103 0104 	add.w	r1, r3, #4
 8007b98:	d52a      	bpl.n	8007bf0 <_printf_i+0xa4>
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6011      	str	r1, [r2, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da03      	bge.n	8007baa <_printf_i+0x5e>
 8007ba2:	222d      	movs	r2, #45	; 0x2d
 8007ba4:	425b      	negs	r3, r3
 8007ba6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007baa:	486f      	ldr	r0, [pc, #444]	; (8007d68 <_printf_i+0x21c>)
 8007bac:	220a      	movs	r2, #10
 8007bae:	e039      	b.n	8007c24 <_printf_i+0xd8>
 8007bb0:	2973      	cmp	r1, #115	; 0x73
 8007bb2:	f000 809d 	beq.w	8007cf0 <_printf_i+0x1a4>
 8007bb6:	d808      	bhi.n	8007bca <_printf_i+0x7e>
 8007bb8:	296f      	cmp	r1, #111	; 0x6f
 8007bba:	d020      	beq.n	8007bfe <_printf_i+0xb2>
 8007bbc:	2970      	cmp	r1, #112	; 0x70
 8007bbe:	d1dd      	bne.n	8007b7c <_printf_i+0x30>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	f043 0320 	orr.w	r3, r3, #32
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	e003      	b.n	8007bd2 <_printf_i+0x86>
 8007bca:	2975      	cmp	r1, #117	; 0x75
 8007bcc:	d017      	beq.n	8007bfe <_printf_i+0xb2>
 8007bce:	2978      	cmp	r1, #120	; 0x78
 8007bd0:	d1d4      	bne.n	8007b7c <_printf_i+0x30>
 8007bd2:	2378      	movs	r3, #120	; 0x78
 8007bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bd8:	4864      	ldr	r0, [pc, #400]	; (8007d6c <_printf_i+0x220>)
 8007bda:	e055      	b.n	8007c88 <_printf_i+0x13c>
 8007bdc:	6813      	ldr	r3, [r2, #0]
 8007bde:	1d19      	adds	r1, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6011      	str	r1, [r2, #0]
 8007be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bec:	2301      	movs	r3, #1
 8007bee:	e08c      	b.n	8007d0a <_printf_i+0x1be>
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6011      	str	r1, [r2, #0]
 8007bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bf8:	bf18      	it	ne
 8007bfa:	b21b      	sxthne	r3, r3
 8007bfc:	e7cf      	b.n	8007b9e <_printf_i+0x52>
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	6825      	ldr	r5, [r4, #0]
 8007c02:	1d18      	adds	r0, r3, #4
 8007c04:	6010      	str	r0, [r2, #0]
 8007c06:	0628      	lsls	r0, r5, #24
 8007c08:	d501      	bpl.n	8007c0e <_printf_i+0xc2>
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	e002      	b.n	8007c14 <_printf_i+0xc8>
 8007c0e:	0668      	lsls	r0, r5, #25
 8007c10:	d5fb      	bpl.n	8007c0a <_printf_i+0xbe>
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	4854      	ldr	r0, [pc, #336]	; (8007d68 <_printf_i+0x21c>)
 8007c16:	296f      	cmp	r1, #111	; 0x6f
 8007c18:	bf14      	ite	ne
 8007c1a:	220a      	movne	r2, #10
 8007c1c:	2208      	moveq	r2, #8
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c24:	6865      	ldr	r5, [r4, #4]
 8007c26:	60a5      	str	r5, [r4, #8]
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	f2c0 8095 	blt.w	8007d58 <_printf_i+0x20c>
 8007c2e:	6821      	ldr	r1, [r4, #0]
 8007c30:	f021 0104 	bic.w	r1, r1, #4
 8007c34:	6021      	str	r1, [r4, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d13d      	bne.n	8007cb6 <_printf_i+0x16a>
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	f040 808e 	bne.w	8007d5c <_printf_i+0x210>
 8007c40:	4665      	mov	r5, ip
 8007c42:	2a08      	cmp	r2, #8
 8007c44:	d10b      	bne.n	8007c5e <_printf_i+0x112>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	07db      	lsls	r3, r3, #31
 8007c4a:	d508      	bpl.n	8007c5e <_printf_i+0x112>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	6862      	ldr	r2, [r4, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	bfde      	ittt	le
 8007c54:	2330      	movle	r3, #48	; 0x30
 8007c56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c5e:	ebac 0305 	sub.w	r3, ip, r5
 8007c62:	6123      	str	r3, [r4, #16]
 8007c64:	f8cd 8000 	str.w	r8, [sp]
 8007c68:	463b      	mov	r3, r7
 8007c6a:	aa03      	add	r2, sp, #12
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff fef6 	bl	8007a60 <_printf_common>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d14d      	bne.n	8007d14 <_printf_i+0x1c8>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	b005      	add	sp, #20
 8007c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c82:	4839      	ldr	r0, [pc, #228]	; (8007d68 <_printf_i+0x21c>)
 8007c84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c88:	6813      	ldr	r3, [r2, #0]
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	1d1d      	adds	r5, r3, #4
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6015      	str	r5, [r2, #0]
 8007c92:	060a      	lsls	r2, r1, #24
 8007c94:	d50b      	bpl.n	8007cae <_printf_i+0x162>
 8007c96:	07ca      	lsls	r2, r1, #31
 8007c98:	bf44      	itt	mi
 8007c9a:	f041 0120 	orrmi.w	r1, r1, #32
 8007c9e:	6021      	strmi	r1, [r4, #0]
 8007ca0:	b91b      	cbnz	r3, 8007caa <_printf_i+0x15e>
 8007ca2:	6822      	ldr	r2, [r4, #0]
 8007ca4:	f022 0220 	bic.w	r2, r2, #32
 8007ca8:	6022      	str	r2, [r4, #0]
 8007caa:	2210      	movs	r2, #16
 8007cac:	e7b7      	b.n	8007c1e <_printf_i+0xd2>
 8007cae:	064d      	lsls	r5, r1, #25
 8007cb0:	bf48      	it	mi
 8007cb2:	b29b      	uxthmi	r3, r3
 8007cb4:	e7ef      	b.n	8007c96 <_printf_i+0x14a>
 8007cb6:	4665      	mov	r5, ip
 8007cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cbc:	fb02 3311 	mls	r3, r2, r1, r3
 8007cc0:	5cc3      	ldrb	r3, [r0, r3]
 8007cc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d1f5      	bne.n	8007cb8 <_printf_i+0x16c>
 8007ccc:	e7b9      	b.n	8007c42 <_printf_i+0xf6>
 8007cce:	6813      	ldr	r3, [r2, #0]
 8007cd0:	6825      	ldr	r5, [r4, #0]
 8007cd2:	6961      	ldr	r1, [r4, #20]
 8007cd4:	1d18      	adds	r0, r3, #4
 8007cd6:	6010      	str	r0, [r2, #0]
 8007cd8:	0628      	lsls	r0, r5, #24
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	d501      	bpl.n	8007ce2 <_printf_i+0x196>
 8007cde:	6019      	str	r1, [r3, #0]
 8007ce0:	e002      	b.n	8007ce8 <_printf_i+0x19c>
 8007ce2:	066a      	lsls	r2, r5, #25
 8007ce4:	d5fb      	bpl.n	8007cde <_printf_i+0x192>
 8007ce6:	8019      	strh	r1, [r3, #0]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	4665      	mov	r5, ip
 8007cee:	e7b9      	b.n	8007c64 <_printf_i+0x118>
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	1d19      	adds	r1, r3, #4
 8007cf4:	6011      	str	r1, [r2, #0]
 8007cf6:	681d      	ldr	r5, [r3, #0]
 8007cf8:	6862      	ldr	r2, [r4, #4]
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f7f8 fa9f 	bl	8000240 <memchr>
 8007d02:	b108      	cbz	r0, 8007d08 <_printf_i+0x1bc>
 8007d04:	1b40      	subs	r0, r0, r5
 8007d06:	6060      	str	r0, [r4, #4]
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	6123      	str	r3, [r4, #16]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d12:	e7a7      	b.n	8007c64 <_printf_i+0x118>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	462a      	mov	r2, r5
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	47c0      	blx	r8
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d0aa      	beq.n	8007c78 <_printf_i+0x12c>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	079b      	lsls	r3, r3, #30
 8007d26:	d413      	bmi.n	8007d50 <_printf_i+0x204>
 8007d28:	68e0      	ldr	r0, [r4, #12]
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	4298      	cmp	r0, r3
 8007d2e:	bfb8      	it	lt
 8007d30:	4618      	movlt	r0, r3
 8007d32:	e7a3      	b.n	8007c7c <_printf_i+0x130>
 8007d34:	2301      	movs	r3, #1
 8007d36:	464a      	mov	r2, r9
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	47c0      	blx	r8
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d09a      	beq.n	8007c78 <_printf_i+0x12c>
 8007d42:	3501      	adds	r5, #1
 8007d44:	68e3      	ldr	r3, [r4, #12]
 8007d46:	9a03      	ldr	r2, [sp, #12]
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	42ab      	cmp	r3, r5
 8007d4c:	dcf2      	bgt.n	8007d34 <_printf_i+0x1e8>
 8007d4e:	e7eb      	b.n	8007d28 <_printf_i+0x1dc>
 8007d50:	2500      	movs	r5, #0
 8007d52:	f104 0919 	add.w	r9, r4, #25
 8007d56:	e7f5      	b.n	8007d44 <_printf_i+0x1f8>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1ac      	bne.n	8007cb6 <_printf_i+0x16a>
 8007d5c:	7803      	ldrb	r3, [r0, #0]
 8007d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d66:	e76c      	b.n	8007c42 <_printf_i+0xf6>
 8007d68:	080084d5 	.word	0x080084d5
 8007d6c:	080084e6 	.word	0x080084e6

08007d70 <_scanf_chars>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	4615      	mov	r5, r2
 8007d76:	688a      	ldr	r2, [r1, #8]
 8007d78:	4680      	mov	r8, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	b932      	cbnz	r2, 8007d8c <_scanf_chars+0x1c>
 8007d7e:	698a      	ldr	r2, [r1, #24]
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	bf14      	ite	ne
 8007d84:	f04f 32ff 	movne.w	r2, #4294967295
 8007d88:	2201      	moveq	r2, #1
 8007d8a:	608a      	str	r2, [r1, #8]
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	06d1      	lsls	r1, r2, #27
 8007d90:	bf5f      	itttt	pl
 8007d92:	681a      	ldrpl	r2, [r3, #0]
 8007d94:	1d11      	addpl	r1, r2, #4
 8007d96:	6019      	strpl	r1, [r3, #0]
 8007d98:	6817      	ldrpl	r7, [r2, #0]
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	69a3      	ldr	r3, [r4, #24]
 8007d9e:	b1db      	cbz	r3, 8007dd8 <_scanf_chars+0x68>
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d107      	bne.n	8007db4 <_scanf_chars+0x44>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	6962      	ldr	r2, [r4, #20]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	5cd3      	ldrb	r3, [r2, r3]
 8007dac:	b9a3      	cbnz	r3, 8007dd8 <_scanf_chars+0x68>
 8007dae:	2e00      	cmp	r6, #0
 8007db0:	d132      	bne.n	8007e18 <_scanf_chars+0xa8>
 8007db2:	e006      	b.n	8007dc2 <_scanf_chars+0x52>
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d007      	beq.n	8007dc8 <_scanf_chars+0x58>
 8007db8:	2e00      	cmp	r6, #0
 8007dba:	d12d      	bne.n	8007e18 <_scanf_chars+0xa8>
 8007dbc:	69a3      	ldr	r3, [r4, #24]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d12a      	bne.n	8007e18 <_scanf_chars+0xa8>
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc8:	f000 fac4 	bl	8008354 <__locale_ctype_ptr>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	4418      	add	r0, r3
 8007dd2:	7843      	ldrb	r3, [r0, #1]
 8007dd4:	071b      	lsls	r3, r3, #28
 8007dd6:	d4ef      	bmi.n	8007db8 <_scanf_chars+0x48>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	06da      	lsls	r2, r3, #27
 8007ddc:	bf5e      	ittt	pl
 8007dde:	682b      	ldrpl	r3, [r5, #0]
 8007de0:	781b      	ldrbpl	r3, [r3, #0]
 8007de2:	703b      	strbpl	r3, [r7, #0]
 8007de4:	682a      	ldr	r2, [r5, #0]
 8007de6:	686b      	ldr	r3, [r5, #4]
 8007de8:	f102 0201 	add.w	r2, r2, #1
 8007dec:	602a      	str	r2, [r5, #0]
 8007dee:	68a2      	ldr	r2, [r4, #8]
 8007df0:	f103 33ff 	add.w	r3, r3, #4294967295
 8007df4:	f102 32ff 	add.w	r2, r2, #4294967295
 8007df8:	606b      	str	r3, [r5, #4]
 8007dfa:	f106 0601 	add.w	r6, r6, #1
 8007dfe:	bf58      	it	pl
 8007e00:	3701      	addpl	r7, #1
 8007e02:	60a2      	str	r2, [r4, #8]
 8007e04:	b142      	cbz	r2, 8007e18 <_scanf_chars+0xa8>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	dcc8      	bgt.n	8007d9c <_scanf_chars+0x2c>
 8007e0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4640      	mov	r0, r8
 8007e12:	4798      	blx	r3
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d0c1      	beq.n	8007d9c <_scanf_chars+0x2c>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	f013 0310 	ands.w	r3, r3, #16
 8007e1e:	d105      	bne.n	8007e2c <_scanf_chars+0xbc>
 8007e20:	68e2      	ldr	r2, [r4, #12]
 8007e22:	3201      	adds	r2, #1
 8007e24:	60e2      	str	r2, [r4, #12]
 8007e26:	69a2      	ldr	r2, [r4, #24]
 8007e28:	b102      	cbz	r2, 8007e2c <_scanf_chars+0xbc>
 8007e2a:	703b      	strb	r3, [r7, #0]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	441e      	add	r6, r3
 8007e30:	6126      	str	r6, [r4, #16]
 8007e32:	2000      	movs	r0, #0
 8007e34:	e7c6      	b.n	8007dc4 <_scanf_chars+0x54>
	...

08007e38 <_scanf_i>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	469a      	mov	sl, r3
 8007e3e:	4b74      	ldr	r3, [pc, #464]	; (8008010 <_scanf_i+0x1d8>)
 8007e40:	460c      	mov	r4, r1
 8007e42:	4683      	mov	fp, r0
 8007e44:	4616      	mov	r6, r2
 8007e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	ab03      	add	r3, sp, #12
 8007e4e:	68a7      	ldr	r7, [r4, #8]
 8007e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007e54:	4b6f      	ldr	r3, [pc, #444]	; (8008014 <_scanf_i+0x1dc>)
 8007e56:	69a1      	ldr	r1, [r4, #24]
 8007e58:	4a6f      	ldr	r2, [pc, #444]	; (8008018 <_scanf_i+0x1e0>)
 8007e5a:	2903      	cmp	r1, #3
 8007e5c:	bf08      	it	eq
 8007e5e:	461a      	moveq	r2, r3
 8007e60:	1e7b      	subs	r3, r7, #1
 8007e62:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007e66:	bf84      	itt	hi
 8007e68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e6c:	60a3      	strhi	r3, [r4, #8]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	9200      	str	r2, [sp, #0]
 8007e72:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007e76:	bf88      	it	hi
 8007e78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e7c:	f104 091c 	add.w	r9, r4, #28
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bf8c      	ite	hi
 8007e84:	197f      	addhi	r7, r7, r5
 8007e86:	2700      	movls	r7, #0
 8007e88:	464b      	mov	r3, r9
 8007e8a:	f04f 0800 	mov.w	r8, #0
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	6831      	ldr	r1, [r6, #0]
 8007e92:	ab03      	add	r3, sp, #12
 8007e94:	2202      	movs	r2, #2
 8007e96:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007e9a:	7809      	ldrb	r1, [r1, #0]
 8007e9c:	f7f8 f9d0 	bl	8000240 <memchr>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	b330      	cbz	r0, 8007ef2 <_scanf_i+0xba>
 8007ea4:	f1b8 0f01 	cmp.w	r8, #1
 8007ea8:	d15a      	bne.n	8007f60 <_scanf_i+0x128>
 8007eaa:	6862      	ldr	r2, [r4, #4]
 8007eac:	b92a      	cbnz	r2, 8007eba <_scanf_i+0x82>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	2108      	movs	r1, #8
 8007eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eb6:	6061      	str	r1, [r4, #4]
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	68a2      	ldr	r2, [r4, #8]
 8007ec4:	1e51      	subs	r1, r2, #1
 8007ec6:	60a1      	str	r1, [r4, #8]
 8007ec8:	b19a      	cbz	r2, 8007ef2 <_scanf_i+0xba>
 8007eca:	6832      	ldr	r2, [r6, #0]
 8007ecc:	1c51      	adds	r1, r2, #1
 8007ece:	6031      	str	r1, [r6, #0]
 8007ed0:	7812      	ldrb	r2, [r2, #0]
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	1c5d      	adds	r5, r3, #1
 8007ed6:	6873      	ldr	r3, [r6, #4]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	6073      	str	r3, [r6, #4]
 8007ede:	dc07      	bgt.n	8007ef0 <_scanf_i+0xb8>
 8007ee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	4798      	blx	r3
 8007eea:	2800      	cmp	r0, #0
 8007eec:	f040 8086 	bne.w	8007ffc <_scanf_i+0x1c4>
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	f108 0801 	add.w	r8, r8, #1
 8007ef6:	f1b8 0f03 	cmp.w	r8, #3
 8007efa:	d1c8      	bne.n	8007e8e <_scanf_i+0x56>
 8007efc:	6862      	ldr	r2, [r4, #4]
 8007efe:	b90a      	cbnz	r2, 8007f04 <_scanf_i+0xcc>
 8007f00:	220a      	movs	r2, #10
 8007f02:	6062      	str	r2, [r4, #4]
 8007f04:	6862      	ldr	r2, [r4, #4]
 8007f06:	4945      	ldr	r1, [pc, #276]	; (800801c <_scanf_i+0x1e4>)
 8007f08:	6960      	ldr	r0, [r4, #20]
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	1a89      	subs	r1, r1, r2
 8007f0e:	f000 f897 	bl	8008040 <__sccl>
 8007f12:	9b01      	ldr	r3, [sp, #4]
 8007f14:	f04f 0800 	mov.w	r8, #0
 8007f18:	461d      	mov	r5, r3
 8007f1a:	68a3      	ldr	r3, [r4, #8]
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d03a      	beq.n	8007f98 <_scanf_i+0x160>
 8007f22:	6831      	ldr	r1, [r6, #0]
 8007f24:	6960      	ldr	r0, [r4, #20]
 8007f26:	f891 c000 	ldrb.w	ip, [r1]
 8007f2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d032      	beq.n	8007f98 <_scanf_i+0x160>
 8007f32:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007f36:	d121      	bne.n	8007f7c <_scanf_i+0x144>
 8007f38:	0510      	lsls	r0, r2, #20
 8007f3a:	d51f      	bpl.n	8007f7c <_scanf_i+0x144>
 8007f3c:	f108 0801 	add.w	r8, r8, #1
 8007f40:	b117      	cbz	r7, 8007f48 <_scanf_i+0x110>
 8007f42:	3301      	adds	r3, #1
 8007f44:	3f01      	subs	r7, #1
 8007f46:	60a3      	str	r3, [r4, #8]
 8007f48:	6873      	ldr	r3, [r6, #4]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	6073      	str	r3, [r6, #4]
 8007f50:	dd1b      	ble.n	8007f8a <_scanf_i+0x152>
 8007f52:	6833      	ldr	r3, [r6, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	60a3      	str	r3, [r4, #8]
 8007f5e:	e7dc      	b.n	8007f1a <_scanf_i+0xe2>
 8007f60:	f1b8 0f02 	cmp.w	r8, #2
 8007f64:	d1ad      	bne.n	8007ec2 <_scanf_i+0x8a>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007f6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007f70:	d1bf      	bne.n	8007ef2 <_scanf_i+0xba>
 8007f72:	2110      	movs	r1, #16
 8007f74:	6061      	str	r1, [r4, #4]
 8007f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f7a:	e7a1      	b.n	8007ec0 <_scanf_i+0x88>
 8007f7c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	780b      	ldrb	r3, [r1, #0]
 8007f84:	702b      	strb	r3, [r5, #0]
 8007f86:	3501      	adds	r5, #1
 8007f88:	e7de      	b.n	8007f48 <_scanf_i+0x110>
 8007f8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4658      	mov	r0, fp
 8007f92:	4798      	blx	r3
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d0df      	beq.n	8007f58 <_scanf_i+0x120>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	05d9      	lsls	r1, r3, #23
 8007f9c:	d50c      	bpl.n	8007fb8 <_scanf_i+0x180>
 8007f9e:	454d      	cmp	r5, r9
 8007fa0:	d908      	bls.n	8007fb4 <_scanf_i+0x17c>
 8007fa2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007faa:	4632      	mov	r2, r6
 8007fac:	4658      	mov	r0, fp
 8007fae:	4798      	blx	r3
 8007fb0:	1e6f      	subs	r7, r5, #1
 8007fb2:	463d      	mov	r5, r7
 8007fb4:	454d      	cmp	r5, r9
 8007fb6:	d029      	beq.n	800800c <_scanf_i+0x1d4>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	f012 0210 	ands.w	r2, r2, #16
 8007fbe:	d113      	bne.n	8007fe8 <_scanf_i+0x1b0>
 8007fc0:	702a      	strb	r2, [r5, #0]
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	9e00      	ldr	r6, [sp, #0]
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	4658      	mov	r0, fp
 8007fca:	47b0      	blx	r6
 8007fcc:	f8da 3000 	ldr.w	r3, [sl]
 8007fd0:	6821      	ldr	r1, [r4, #0]
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	f8ca 2000 	str.w	r2, [sl]
 8007fd8:	f011 0f20 	tst.w	r1, #32
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	d010      	beq.n	8008002 <_scanf_i+0x1ca>
 8007fe0:	6018      	str	r0, [r3, #0]
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60e3      	str	r3, [r4, #12]
 8007fe8:	eba5 0509 	sub.w	r5, r5, r9
 8007fec:	44a8      	add	r8, r5
 8007fee:	6925      	ldr	r5, [r4, #16]
 8007ff0:	4445      	add	r5, r8
 8007ff2:	6125      	str	r5, [r4, #16]
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	b007      	add	sp, #28
 8007ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffc:	f04f 0800 	mov.w	r8, #0
 8008000:	e7ca      	b.n	8007f98 <_scanf_i+0x160>
 8008002:	07ca      	lsls	r2, r1, #31
 8008004:	bf4c      	ite	mi
 8008006:	8018      	strhmi	r0, [r3, #0]
 8008008:	6018      	strpl	r0, [r3, #0]
 800800a:	e7ea      	b.n	8007fe2 <_scanf_i+0x1aa>
 800800c:	2001      	movs	r0, #1
 800800e:	e7f2      	b.n	8007ff6 <_scanf_i+0x1be>
 8008010:	080084a0 	.word	0x080084a0
 8008014:	0800819d 	.word	0x0800819d
 8008018:	080082b5 	.word	0x080082b5
 800801c:	08008507 	.word	0x08008507

08008020 <_sbrk_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4c06      	ldr	r4, [pc, #24]	; (800803c <_sbrk_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4605      	mov	r5, r0
 8008028:	4608      	mov	r0, r1
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	f7f9 fc08 	bl	8001840 <_sbrk>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_sbrk_r+0x1a>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	b103      	cbz	r3, 800803a <_sbrk_r+0x1a>
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	200007e4 	.word	0x200007e4

08008040 <__sccl>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	780b      	ldrb	r3, [r1, #0]
 8008044:	2b5e      	cmp	r3, #94	; 0x5e
 8008046:	bf13      	iteet	ne
 8008048:	1c4a      	addne	r2, r1, #1
 800804a:	1c8a      	addeq	r2, r1, #2
 800804c:	784b      	ldrbeq	r3, [r1, #1]
 800804e:	2100      	movne	r1, #0
 8008050:	bf08      	it	eq
 8008052:	2101      	moveq	r1, #1
 8008054:	1e44      	subs	r4, r0, #1
 8008056:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800805a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800805e:	42ac      	cmp	r4, r5
 8008060:	d1fb      	bne.n	800805a <__sccl+0x1a>
 8008062:	b913      	cbnz	r3, 800806a <__sccl+0x2a>
 8008064:	3a01      	subs	r2, #1
 8008066:	4610      	mov	r0, r2
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	f081 0401 	eor.w	r4, r1, #1
 800806e:	54c4      	strb	r4, [r0, r3]
 8008070:	1c51      	adds	r1, r2, #1
 8008072:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008076:	2d2d      	cmp	r5, #45	; 0x2d
 8008078:	f101 36ff 	add.w	r6, r1, #4294967295
 800807c:	460a      	mov	r2, r1
 800807e:	d006      	beq.n	800808e <__sccl+0x4e>
 8008080:	2d5d      	cmp	r5, #93	; 0x5d
 8008082:	d0f0      	beq.n	8008066 <__sccl+0x26>
 8008084:	b90d      	cbnz	r5, 800808a <__sccl+0x4a>
 8008086:	4632      	mov	r2, r6
 8008088:	e7ed      	b.n	8008066 <__sccl+0x26>
 800808a:	462b      	mov	r3, r5
 800808c:	e7ef      	b.n	800806e <__sccl+0x2e>
 800808e:	780e      	ldrb	r6, [r1, #0]
 8008090:	2e5d      	cmp	r6, #93	; 0x5d
 8008092:	d0fa      	beq.n	800808a <__sccl+0x4a>
 8008094:	42b3      	cmp	r3, r6
 8008096:	dcf8      	bgt.n	800808a <__sccl+0x4a>
 8008098:	3301      	adds	r3, #1
 800809a:	429e      	cmp	r6, r3
 800809c:	54c4      	strb	r4, [r0, r3]
 800809e:	dcfb      	bgt.n	8008098 <__sccl+0x58>
 80080a0:	3102      	adds	r1, #2
 80080a2:	e7e6      	b.n	8008072 <__sccl+0x32>

080080a4 <_strtol_l.isra.0>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	4680      	mov	r8, r0
 80080aa:	4689      	mov	r9, r1
 80080ac:	4692      	mov	sl, r2
 80080ae:	461e      	mov	r6, r3
 80080b0:	460f      	mov	r7, r1
 80080b2:	463d      	mov	r5, r7
 80080b4:	9808      	ldr	r0, [sp, #32]
 80080b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080ba:	f000 f947 	bl	800834c <__locale_ctype_ptr_l>
 80080be:	4420      	add	r0, r4
 80080c0:	7843      	ldrb	r3, [r0, #1]
 80080c2:	f013 0308 	ands.w	r3, r3, #8
 80080c6:	d132      	bne.n	800812e <_strtol_l.isra.0+0x8a>
 80080c8:	2c2d      	cmp	r4, #45	; 0x2d
 80080ca:	d132      	bne.n	8008132 <_strtol_l.isra.0+0x8e>
 80080cc:	787c      	ldrb	r4, [r7, #1]
 80080ce:	1cbd      	adds	r5, r7, #2
 80080d0:	2201      	movs	r2, #1
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	d05d      	beq.n	8008192 <_strtol_l.isra.0+0xee>
 80080d6:	2e10      	cmp	r6, #16
 80080d8:	d109      	bne.n	80080ee <_strtol_l.isra.0+0x4a>
 80080da:	2c30      	cmp	r4, #48	; 0x30
 80080dc:	d107      	bne.n	80080ee <_strtol_l.isra.0+0x4a>
 80080de:	782b      	ldrb	r3, [r5, #0]
 80080e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080e4:	2b58      	cmp	r3, #88	; 0x58
 80080e6:	d14f      	bne.n	8008188 <_strtol_l.isra.0+0xe4>
 80080e8:	786c      	ldrb	r4, [r5, #1]
 80080ea:	2610      	movs	r6, #16
 80080ec:	3502      	adds	r5, #2
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	bf14      	ite	ne
 80080f2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80080f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80080fa:	2700      	movs	r7, #0
 80080fc:	fbb1 fcf6 	udiv	ip, r1, r6
 8008100:	4638      	mov	r0, r7
 8008102:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008106:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800810a:	2b09      	cmp	r3, #9
 800810c:	d817      	bhi.n	800813e <_strtol_l.isra.0+0x9a>
 800810e:	461c      	mov	r4, r3
 8008110:	42a6      	cmp	r6, r4
 8008112:	dd23      	ble.n	800815c <_strtol_l.isra.0+0xb8>
 8008114:	1c7b      	adds	r3, r7, #1
 8008116:	d007      	beq.n	8008128 <_strtol_l.isra.0+0x84>
 8008118:	4584      	cmp	ip, r0
 800811a:	d31c      	bcc.n	8008156 <_strtol_l.isra.0+0xb2>
 800811c:	d101      	bne.n	8008122 <_strtol_l.isra.0+0x7e>
 800811e:	45a6      	cmp	lr, r4
 8008120:	db19      	blt.n	8008156 <_strtol_l.isra.0+0xb2>
 8008122:	fb00 4006 	mla	r0, r0, r6, r4
 8008126:	2701      	movs	r7, #1
 8008128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800812c:	e7eb      	b.n	8008106 <_strtol_l.isra.0+0x62>
 800812e:	462f      	mov	r7, r5
 8008130:	e7bf      	b.n	80080b2 <_strtol_l.isra.0+0xe>
 8008132:	2c2b      	cmp	r4, #43	; 0x2b
 8008134:	bf04      	itt	eq
 8008136:	1cbd      	addeq	r5, r7, #2
 8008138:	787c      	ldrbeq	r4, [r7, #1]
 800813a:	461a      	mov	r2, r3
 800813c:	e7c9      	b.n	80080d2 <_strtol_l.isra.0+0x2e>
 800813e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008142:	2b19      	cmp	r3, #25
 8008144:	d801      	bhi.n	800814a <_strtol_l.isra.0+0xa6>
 8008146:	3c37      	subs	r4, #55	; 0x37
 8008148:	e7e2      	b.n	8008110 <_strtol_l.isra.0+0x6c>
 800814a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800814e:	2b19      	cmp	r3, #25
 8008150:	d804      	bhi.n	800815c <_strtol_l.isra.0+0xb8>
 8008152:	3c57      	subs	r4, #87	; 0x57
 8008154:	e7dc      	b.n	8008110 <_strtol_l.isra.0+0x6c>
 8008156:	f04f 37ff 	mov.w	r7, #4294967295
 800815a:	e7e5      	b.n	8008128 <_strtol_l.isra.0+0x84>
 800815c:	1c7b      	adds	r3, r7, #1
 800815e:	d108      	bne.n	8008172 <_strtol_l.isra.0+0xce>
 8008160:	2322      	movs	r3, #34	; 0x22
 8008162:	f8c8 3000 	str.w	r3, [r8]
 8008166:	4608      	mov	r0, r1
 8008168:	f1ba 0f00 	cmp.w	sl, #0
 800816c:	d107      	bne.n	800817e <_strtol_l.isra.0+0xda>
 800816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008172:	b102      	cbz	r2, 8008176 <_strtol_l.isra.0+0xd2>
 8008174:	4240      	negs	r0, r0
 8008176:	f1ba 0f00 	cmp.w	sl, #0
 800817a:	d0f8      	beq.n	800816e <_strtol_l.isra.0+0xca>
 800817c:	b10f      	cbz	r7, 8008182 <_strtol_l.isra.0+0xde>
 800817e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008182:	f8ca 9000 	str.w	r9, [sl]
 8008186:	e7f2      	b.n	800816e <_strtol_l.isra.0+0xca>
 8008188:	2430      	movs	r4, #48	; 0x30
 800818a:	2e00      	cmp	r6, #0
 800818c:	d1af      	bne.n	80080ee <_strtol_l.isra.0+0x4a>
 800818e:	2608      	movs	r6, #8
 8008190:	e7ad      	b.n	80080ee <_strtol_l.isra.0+0x4a>
 8008192:	2c30      	cmp	r4, #48	; 0x30
 8008194:	d0a3      	beq.n	80080de <_strtol_l.isra.0+0x3a>
 8008196:	260a      	movs	r6, #10
 8008198:	e7a9      	b.n	80080ee <_strtol_l.isra.0+0x4a>
	...

0800819c <_strtol_r>:
 800819c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800819e:	4c06      	ldr	r4, [pc, #24]	; (80081b8 <_strtol_r+0x1c>)
 80081a0:	4d06      	ldr	r5, [pc, #24]	; (80081bc <_strtol_r+0x20>)
 80081a2:	6824      	ldr	r4, [r4, #0]
 80081a4:	6a24      	ldr	r4, [r4, #32]
 80081a6:	2c00      	cmp	r4, #0
 80081a8:	bf08      	it	eq
 80081aa:	462c      	moveq	r4, r5
 80081ac:	9400      	str	r4, [sp, #0]
 80081ae:	f7ff ff79 	bl	80080a4 <_strtol_l.isra.0>
 80081b2:	b003      	add	sp, #12
 80081b4:	bd30      	pop	{r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	20000024 	.word	0x20000024
 80081bc:	20000088 	.word	0x20000088

080081c0 <_strtoul_l.isra.0>:
 80081c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	4680      	mov	r8, r0
 80081c6:	4689      	mov	r9, r1
 80081c8:	4692      	mov	sl, r2
 80081ca:	461e      	mov	r6, r3
 80081cc:	460f      	mov	r7, r1
 80081ce:	463d      	mov	r5, r7
 80081d0:	9808      	ldr	r0, [sp, #32]
 80081d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081d6:	f000 f8b9 	bl	800834c <__locale_ctype_ptr_l>
 80081da:	4420      	add	r0, r4
 80081dc:	7843      	ldrb	r3, [r0, #1]
 80081de:	f013 0308 	ands.w	r3, r3, #8
 80081e2:	d130      	bne.n	8008246 <_strtoul_l.isra.0+0x86>
 80081e4:	2c2d      	cmp	r4, #45	; 0x2d
 80081e6:	d130      	bne.n	800824a <_strtoul_l.isra.0+0x8a>
 80081e8:	787c      	ldrb	r4, [r7, #1]
 80081ea:	1cbd      	adds	r5, r7, #2
 80081ec:	2101      	movs	r1, #1
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	d05c      	beq.n	80082ac <_strtoul_l.isra.0+0xec>
 80081f2:	2e10      	cmp	r6, #16
 80081f4:	d109      	bne.n	800820a <_strtoul_l.isra.0+0x4a>
 80081f6:	2c30      	cmp	r4, #48	; 0x30
 80081f8:	d107      	bne.n	800820a <_strtoul_l.isra.0+0x4a>
 80081fa:	782b      	ldrb	r3, [r5, #0]
 80081fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008200:	2b58      	cmp	r3, #88	; 0x58
 8008202:	d14e      	bne.n	80082a2 <_strtoul_l.isra.0+0xe2>
 8008204:	786c      	ldrb	r4, [r5, #1]
 8008206:	2610      	movs	r6, #16
 8008208:	3502      	adds	r5, #2
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	2300      	movs	r3, #0
 8008210:	fbb2 f2f6 	udiv	r2, r2, r6
 8008214:	fb06 fc02 	mul.w	ip, r6, r2
 8008218:	ea6f 0c0c 	mvn.w	ip, ip
 800821c:	4618      	mov	r0, r3
 800821e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008222:	2f09      	cmp	r7, #9
 8008224:	d817      	bhi.n	8008256 <_strtoul_l.isra.0+0x96>
 8008226:	463c      	mov	r4, r7
 8008228:	42a6      	cmp	r6, r4
 800822a:	dd23      	ble.n	8008274 <_strtoul_l.isra.0+0xb4>
 800822c:	2b00      	cmp	r3, #0
 800822e:	db1e      	blt.n	800826e <_strtoul_l.isra.0+0xae>
 8008230:	4282      	cmp	r2, r0
 8008232:	d31c      	bcc.n	800826e <_strtoul_l.isra.0+0xae>
 8008234:	d101      	bne.n	800823a <_strtoul_l.isra.0+0x7a>
 8008236:	45a4      	cmp	ip, r4
 8008238:	db19      	blt.n	800826e <_strtoul_l.isra.0+0xae>
 800823a:	fb00 4006 	mla	r0, r0, r6, r4
 800823e:	2301      	movs	r3, #1
 8008240:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008244:	e7eb      	b.n	800821e <_strtoul_l.isra.0+0x5e>
 8008246:	462f      	mov	r7, r5
 8008248:	e7c1      	b.n	80081ce <_strtoul_l.isra.0+0xe>
 800824a:	2c2b      	cmp	r4, #43	; 0x2b
 800824c:	bf04      	itt	eq
 800824e:	1cbd      	addeq	r5, r7, #2
 8008250:	787c      	ldrbeq	r4, [r7, #1]
 8008252:	4619      	mov	r1, r3
 8008254:	e7cb      	b.n	80081ee <_strtoul_l.isra.0+0x2e>
 8008256:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800825a:	2f19      	cmp	r7, #25
 800825c:	d801      	bhi.n	8008262 <_strtoul_l.isra.0+0xa2>
 800825e:	3c37      	subs	r4, #55	; 0x37
 8008260:	e7e2      	b.n	8008228 <_strtoul_l.isra.0+0x68>
 8008262:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008266:	2f19      	cmp	r7, #25
 8008268:	d804      	bhi.n	8008274 <_strtoul_l.isra.0+0xb4>
 800826a:	3c57      	subs	r4, #87	; 0x57
 800826c:	e7dc      	b.n	8008228 <_strtoul_l.isra.0+0x68>
 800826e:	f04f 33ff 	mov.w	r3, #4294967295
 8008272:	e7e5      	b.n	8008240 <_strtoul_l.isra.0+0x80>
 8008274:	2b00      	cmp	r3, #0
 8008276:	da09      	bge.n	800828c <_strtoul_l.isra.0+0xcc>
 8008278:	2322      	movs	r3, #34	; 0x22
 800827a:	f8c8 3000 	str.w	r3, [r8]
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	f1ba 0f00 	cmp.w	sl, #0
 8008286:	d107      	bne.n	8008298 <_strtoul_l.isra.0+0xd8>
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	b101      	cbz	r1, 8008290 <_strtoul_l.isra.0+0xd0>
 800828e:	4240      	negs	r0, r0
 8008290:	f1ba 0f00 	cmp.w	sl, #0
 8008294:	d0f8      	beq.n	8008288 <_strtoul_l.isra.0+0xc8>
 8008296:	b10b      	cbz	r3, 800829c <_strtoul_l.isra.0+0xdc>
 8008298:	f105 39ff 	add.w	r9, r5, #4294967295
 800829c:	f8ca 9000 	str.w	r9, [sl]
 80082a0:	e7f2      	b.n	8008288 <_strtoul_l.isra.0+0xc8>
 80082a2:	2430      	movs	r4, #48	; 0x30
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	d1b0      	bne.n	800820a <_strtoul_l.isra.0+0x4a>
 80082a8:	2608      	movs	r6, #8
 80082aa:	e7ae      	b.n	800820a <_strtoul_l.isra.0+0x4a>
 80082ac:	2c30      	cmp	r4, #48	; 0x30
 80082ae:	d0a4      	beq.n	80081fa <_strtoul_l.isra.0+0x3a>
 80082b0:	260a      	movs	r6, #10
 80082b2:	e7aa      	b.n	800820a <_strtoul_l.isra.0+0x4a>

080082b4 <_strtoul_r>:
 80082b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082b6:	4c06      	ldr	r4, [pc, #24]	; (80082d0 <_strtoul_r+0x1c>)
 80082b8:	4d06      	ldr	r5, [pc, #24]	; (80082d4 <_strtoul_r+0x20>)
 80082ba:	6824      	ldr	r4, [r4, #0]
 80082bc:	6a24      	ldr	r4, [r4, #32]
 80082be:	2c00      	cmp	r4, #0
 80082c0:	bf08      	it	eq
 80082c2:	462c      	moveq	r4, r5
 80082c4:	9400      	str	r4, [sp, #0]
 80082c6:	f7ff ff7b 	bl	80081c0 <_strtoul_l.isra.0>
 80082ca:	b003      	add	sp, #12
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	bf00      	nop
 80082d0:	20000024 	.word	0x20000024
 80082d4:	20000088 	.word	0x20000088

080082d8 <__submore>:
 80082d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	460c      	mov	r4, r1
 80082de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80082e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082e4:	4299      	cmp	r1, r3
 80082e6:	d11d      	bne.n	8008324 <__submore+0x4c>
 80082e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082ec:	f7ff f862 	bl	80073b4 <_malloc_r>
 80082f0:	b918      	cbnz	r0, 80082fa <__submore+0x22>
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8008300:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008304:	6360      	str	r0, [r4, #52]	; 0x34
 8008306:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800830a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800830e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008312:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008316:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800831a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800831e:	6020      	str	r0, [r4, #0]
 8008320:	2000      	movs	r0, #0
 8008322:	e7e8      	b.n	80082f6 <__submore+0x1e>
 8008324:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008326:	0077      	lsls	r7, r6, #1
 8008328:	463a      	mov	r2, r7
 800832a:	f000 f859 	bl	80083e0 <_realloc_r>
 800832e:	4605      	mov	r5, r0
 8008330:	2800      	cmp	r0, #0
 8008332:	d0de      	beq.n	80082f2 <__submore+0x1a>
 8008334:	eb00 0806 	add.w	r8, r0, r6
 8008338:	4601      	mov	r1, r0
 800833a:	4632      	mov	r2, r6
 800833c:	4640      	mov	r0, r8
 800833e:	f000 f829 	bl	8008394 <memcpy>
 8008342:	f8c4 8000 	str.w	r8, [r4]
 8008346:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800834a:	e7e9      	b.n	8008320 <__submore+0x48>

0800834c <__locale_ctype_ptr_l>:
 800834c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008350:	4770      	bx	lr
	...

08008354 <__locale_ctype_ptr>:
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <__locale_ctype_ptr+0x14>)
 8008356:	4a05      	ldr	r2, [pc, #20]	; (800836c <__locale_ctype_ptr+0x18>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf08      	it	eq
 8008360:	4613      	moveq	r3, r2
 8008362:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008366:	4770      	bx	lr
 8008368:	20000024 	.word	0x20000024
 800836c:	20000088 	.word	0x20000088

08008370 <__ascii_mbtowc>:
 8008370:	b082      	sub	sp, #8
 8008372:	b901      	cbnz	r1, 8008376 <__ascii_mbtowc+0x6>
 8008374:	a901      	add	r1, sp, #4
 8008376:	b142      	cbz	r2, 800838a <__ascii_mbtowc+0x1a>
 8008378:	b14b      	cbz	r3, 800838e <__ascii_mbtowc+0x1e>
 800837a:	7813      	ldrb	r3, [r2, #0]
 800837c:	600b      	str	r3, [r1, #0]
 800837e:	7812      	ldrb	r2, [r2, #0]
 8008380:	1c10      	adds	r0, r2, #0
 8008382:	bf18      	it	ne
 8008384:	2001      	movne	r0, #1
 8008386:	b002      	add	sp, #8
 8008388:	4770      	bx	lr
 800838a:	4610      	mov	r0, r2
 800838c:	e7fb      	b.n	8008386 <__ascii_mbtowc+0x16>
 800838e:	f06f 0001 	mvn.w	r0, #1
 8008392:	e7f8      	b.n	8008386 <__ascii_mbtowc+0x16>

08008394 <memcpy>:
 8008394:	b510      	push	{r4, lr}
 8008396:	1e43      	subs	r3, r0, #1
 8008398:	440a      	add	r2, r1
 800839a:	4291      	cmp	r1, r2
 800839c:	d100      	bne.n	80083a0 <memcpy+0xc>
 800839e:	bd10      	pop	{r4, pc}
 80083a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a8:	e7f7      	b.n	800839a <memcpy+0x6>

080083aa <memmove>:
 80083aa:	4288      	cmp	r0, r1
 80083ac:	b510      	push	{r4, lr}
 80083ae:	eb01 0302 	add.w	r3, r1, r2
 80083b2:	d807      	bhi.n	80083c4 <memmove+0x1a>
 80083b4:	1e42      	subs	r2, r0, #1
 80083b6:	4299      	cmp	r1, r3
 80083b8:	d00a      	beq.n	80083d0 <memmove+0x26>
 80083ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083c2:	e7f8      	b.n	80083b6 <memmove+0xc>
 80083c4:	4283      	cmp	r3, r0
 80083c6:	d9f5      	bls.n	80083b4 <memmove+0xa>
 80083c8:	1881      	adds	r1, r0, r2
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	42d3      	cmn	r3, r2
 80083ce:	d100      	bne.n	80083d2 <memmove+0x28>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083da:	e7f7      	b.n	80083cc <memmove+0x22>

080083dc <__malloc_lock>:
 80083dc:	4770      	bx	lr

080083de <__malloc_unlock>:
 80083de:	4770      	bx	lr

080083e0 <_realloc_r>:
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	4607      	mov	r7, r0
 80083e4:	4614      	mov	r4, r2
 80083e6:	460e      	mov	r6, r1
 80083e8:	b921      	cbnz	r1, 80083f4 <_realloc_r+0x14>
 80083ea:	4611      	mov	r1, r2
 80083ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083f0:	f7fe bfe0 	b.w	80073b4 <_malloc_r>
 80083f4:	b922      	cbnz	r2, 8008400 <_realloc_r+0x20>
 80083f6:	f7fe ff8f 	bl	8007318 <_free_r>
 80083fa:	4625      	mov	r5, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008400:	f000 f821 	bl	8008446 <_malloc_usable_size_r>
 8008404:	42a0      	cmp	r0, r4
 8008406:	d20f      	bcs.n	8008428 <_realloc_r+0x48>
 8008408:	4621      	mov	r1, r4
 800840a:	4638      	mov	r0, r7
 800840c:	f7fe ffd2 	bl	80073b4 <_malloc_r>
 8008410:	4605      	mov	r5, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d0f2      	beq.n	80083fc <_realloc_r+0x1c>
 8008416:	4631      	mov	r1, r6
 8008418:	4622      	mov	r2, r4
 800841a:	f7ff ffbb 	bl	8008394 <memcpy>
 800841e:	4631      	mov	r1, r6
 8008420:	4638      	mov	r0, r7
 8008422:	f7fe ff79 	bl	8007318 <_free_r>
 8008426:	e7e9      	b.n	80083fc <_realloc_r+0x1c>
 8008428:	4635      	mov	r5, r6
 800842a:	e7e7      	b.n	80083fc <_realloc_r+0x1c>

0800842c <__ascii_wctomb>:
 800842c:	b149      	cbz	r1, 8008442 <__ascii_wctomb+0x16>
 800842e:	2aff      	cmp	r2, #255	; 0xff
 8008430:	bf85      	ittet	hi
 8008432:	238a      	movhi	r3, #138	; 0x8a
 8008434:	6003      	strhi	r3, [r0, #0]
 8008436:	700a      	strbls	r2, [r1, #0]
 8008438:	f04f 30ff 	movhi.w	r0, #4294967295
 800843c:	bf98      	it	ls
 800843e:	2001      	movls	r0, #1
 8008440:	4770      	bx	lr
 8008442:	4608      	mov	r0, r1
 8008444:	4770      	bx	lr

08008446 <_malloc_usable_size_r>:
 8008446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844a:	1f18      	subs	r0, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfbc      	itt	lt
 8008450:	580b      	ldrlt	r3, [r1, r0]
 8008452:	18c0      	addlt	r0, r0, r3
 8008454:	4770      	bx	lr
	...

08008458 <_init>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr

08008464 <_fini>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	bf00      	nop
 8008468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846a:	bc08      	pop	{r3}
 800846c:	469e      	mov	lr, r3
 800846e:	4770      	bx	lr
