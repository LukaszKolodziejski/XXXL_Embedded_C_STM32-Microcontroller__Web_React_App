[{"C:\\Users\\Lenovo\\Documents\\HTML CSS JavaScript\\REACT NodeJs NPM\\8. Embedded IT\\2-stm32_react_app\\src\\index.js":"1","C:\\Users\\Lenovo\\Documents\\HTML CSS JavaScript\\REACT NodeJs NPM\\8. Embedded IT\\2-stm32_react_app\\src\\App.js":"2","C:\\Users\\Lenovo\\Documents\\HTML CSS JavaScript\\REACT NodeJs NPM\\8. Embedded IT\\2-stm32_react_app\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":2313,"mtime":1609887337842,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"c781zw",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\Lenovo\\Documents\\HTML CSS JavaScript\\REACT NodeJs NPM\\8. Embedded IT\\2-stm32_react_app\\src\\index.js",[],["16","17"],"C:\\Users\\Lenovo\\Documents\\HTML CSS JavaScript\\REACT NodeJs NPM\\8. Embedded IT\\2-stm32_react_app\\src\\App.js",["18"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [reciveTextStm32, setReciveTextStm32] = useState(\"Recive text\");\n  const [serialPort, setSerialPort] = useState(null);\n\n  async function getReader() {\n    const port = await navigator.serial.requestPort();\n    await port.open({ baudRate: 115200 });\n    setSerialPort(port);\n\n    // Recive\n    while (port.readable) {\n      const reader = port.readable.getReader();\n      try {\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) {\n            // |reader| has been canceled.\n            break;\n          }\n          const textDecoder = new TextDecoder(\"utf-8\").decode(value);\n          setReciveTextStm32(textDecoder);\n        }\n      } catch (error) {\n      } finally {\n        reader.releaseLock();\n      }\n    }\n    await port.close();\n  }\n\n  async function writeToStream(value) {\n    const encoder = new TextEncoder();\n    const writer = serialPort.writable.getWriter();\n    await writer.write(encoder.encode(value));\n    writer.releaseLock();\n  }\n\n  const streamHandler = (value) => {\n    serialPort ? writeToStream(value) : setReciveTextStm32(\"Click Start !!!\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button className=\"Start\" onClick={getReader}>\n          Start\n        </button>\n        <div className=\"Recive\">{reciveTextStm32}</div>\n        <br />\n        <div className=\"LedSection\">\n          <div className=\"Led\" onClick={() => streamHandler(\"LDR1\")}>\n            RED On\n          </div>\n          <div className=\"Led\" onClick={() => streamHandler(\"LDR0\")}>\n            RED Off\n          </div>\n        </div>\n        <div className=\"LedSection\">\n          <div className=\"Led\" onClick={() => streamHandler(\"LDB1\")}>\n            Blue On\n          </div>\n          <div className=\"Led\" onClick={() => streamHandler(\"LDB0\")}>\n            Blue Off\n          </div>\n        </div>\n        <div className=\"LedSection\">\n          <div className=\"Led\" onClick={() => streamHandler(\"LDG1\")}>\n            Green On\n          </div>\n          <div className=\"Led\" onClick={() => streamHandler(\"LDG0\")}>\n            Green Off\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\Lenovo\\Documents\\HTML CSS JavaScript\\REACT NodeJs NPM\\8. Embedded IT\\2-stm32_react_app\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":1,"column":27,"nodeType":"25","messageId":"26","endLine":1,"endColumn":36},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]